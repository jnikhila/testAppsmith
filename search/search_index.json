{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"introduction/","text":"What is Appsmith? \u00b6 Appsmith is a low code, open-source developer tool to build internal applications quickly. You can drag and drop pre-built widgets to build UI on a grid-style canvas. Appsmith simplifies frontend and backend integration between the UI and the datasource to optimize building applications. Appsmith supports JavaScript inside widgets, queries, and almost any other component to add logic, transform data, and define complex workflows. Info Build CRUD apps, Dashboards, Admin Panels, Dynamic Forms, and much more 10x faster. How Appsmith Works \u00b6 Connect Datasource : Integrate with a datasource such as a database or an API. Appsmith has plug-and-play support for many databases and the RESTful API interface to connect with most tools seamlessly. Build UI : Use customizable built-in widgets to build an app layout quickly. Access Data : Connect UI to the datasource by writing queries and binding the data to widgets. Control everything with JavaScript. Collaborate, Deploy, Share : Appsmith also supports version control with Git to track changes, create rollbacks and collaborate using git branches. Deploy the app and share it with other users. You can build anything from simple CRUD apps to complicated multi-step workflows with these simple steps. Appsmith makes it easy to build a UI that talks to any datasource. Got 2 minutes? Here's a video overview of Appsmith: {% embed url=\" https://youtu.be/Dxe_NzdGzL4 \" %} Get Started \u00b6 There are two ways of using Appsmith: Appsmith Cloud : Try Appsmith in our cloud environment. (Read about our data security ). Self-Host Appsmith : Deploy and manage Appsmith on your local machine or private server instance. First Steps \u00b6 New Users \u00b6 If you are new to Appsmith, this is the place to start: Quickstart Tutorial Build your first app using Appsmith Core Concepts Everything you need to know about Appsmith fundamentals Support Reach out to us for any questions Advanced Users \u00b6 If you are an intermediate to advanced user, we recommend going through the topics below: Deployment Install Appsmith Configure Manage Widgets Build UI Bind Data Reference Datasources Connect Datasource Access Data Reference JavaScript Create Workflows JS Promises External Libraries Framework Context Object Query Object Actions Resources Tutorials Sample Apps Templates {% hint style=\"warning\" %} If you think we need to include something in this documentation, please fill out this short questionnaire ! Alternatively, you can shoot an email to docs@appsmith.com , and we\u2019ll get working on it! Other Resources \u00b6 Have a look at our FAQ and Troubleshooting section, and you might find your questions answered there; View our guides and watch tutorials on YouTube ; Report bugs with Appsmith through Github issues . {% hint style=\"warning\" %} Are you still having trouble? We want to help! Reach out to us on Discord to get support or ask questions on our community forum .","title":"What is Appsmith?"},{"location":"introduction/#what-is-appsmith","text":"Appsmith is a low code, open-source developer tool to build internal applications quickly. You can drag and drop pre-built widgets to build UI on a grid-style canvas. Appsmith simplifies frontend and backend integration between the UI and the datasource to optimize building applications. Appsmith supports JavaScript inside widgets, queries, and almost any other component to add logic, transform data, and define complex workflows. Info Build CRUD apps, Dashboards, Admin Panels, Dynamic Forms, and much more 10x faster.","title":"What is Appsmith?"},{"location":"introduction/#how-appsmith-works","text":"Connect Datasource : Integrate with a datasource such as a database or an API. Appsmith has plug-and-play support for many databases and the RESTful API interface to connect with most tools seamlessly. Build UI : Use customizable built-in widgets to build an app layout quickly. Access Data : Connect UI to the datasource by writing queries and binding the data to widgets. Control everything with JavaScript. Collaborate, Deploy, Share : Appsmith also supports version control with Git to track changes, create rollbacks and collaborate using git branches. Deploy the app and share it with other users. You can build anything from simple CRUD apps to complicated multi-step workflows with these simple steps. Appsmith makes it easy to build a UI that talks to any datasource. Got 2 minutes? Here's a video overview of Appsmith: {% embed url=\" https://youtu.be/Dxe_NzdGzL4 \" %}","title":"How Appsmith Works"},{"location":"introduction/#get-started","text":"There are two ways of using Appsmith: Appsmith Cloud : Try Appsmith in our cloud environment. (Read about our data security ). Self-Host Appsmith : Deploy and manage Appsmith on your local machine or private server instance.","title":"Get Started"},{"location":"introduction/#first-steps","text":"","title":"First Steps"},{"location":"introduction/#new-users","text":"If you are new to Appsmith, this is the place to start: Quickstart Tutorial Build your first app using Appsmith Core Concepts Everything you need to know about Appsmith fundamentals Support Reach out to us for any questions","title":"New Users&#x20;"},{"location":"introduction/#advanced-users","text":"If you are an intermediate to advanced user, we recommend going through the topics below: Deployment Install Appsmith Configure Manage Widgets Build UI Bind Data Reference Datasources Connect Datasource Access Data Reference JavaScript Create Workflows JS Promises External Libraries Framework Context Object Query Object Actions Resources Tutorials Sample Apps Templates {% hint style=\"warning\" %} If you think we need to include something in this documentation, please fill out this short questionnaire ! Alternatively, you can shoot an email to docs@appsmith.com , and we\u2019ll get working on it!","title":"Advanced Users"},{"location":"introduction/#other-resources","text":"Have a look at our FAQ and Troubleshooting section, and you might find your questions answered there; View our guides and watch tutorials on YouTube ; Report bugs with Appsmith through Github issues . {% hint style=\"warning\" %} Are you still having trouble? We want to help! Reach out to us on Discord to get support or ask questions on our community forum .","title":"Other Resources"},{"location":"Advanced%20Concepts/access-control/","text":"Access Control \u00b6 Invite users to your workspace by clicking on the share button on the application home page or from inside the application Invite the user's email you wish to share the application with and select an appropriate role for them. Roles \u00b6 Appsmith implements RBAC by assigning a set of permissions to different user roles. These permissions determine the actions users can take on the platform. Below is the permission mapping for each role Administrator: Create/Edit App View App Make App Public Invite Users Manage Users Developer Create/Edit App View App Invite Users App Viewer View App Invite Users as App Viewers only Permissions \u00b6 Create/Edit App: This permission allows users to create and edit applications within a workspace. View App: This permission allows users to view & use applications internal to the workspace Make App Public: This permission allows users to mark applications as accessible outside the workspace. Invite Users: This permission allows users to invite others with a role equal to or lower than theirs. Manage Users. This permission allows users to delete users from a workspace. Public Apps \u00b6 Applications can be made public and shared with external users not part of your workspace as well. These applications will not require users to authenticate to use them. An app can be made public by clicking the share button from within the application and turning the public application switch on. To share the application, copy the link shown in the modal and share it with your users! {% hint style=\"success\" %} Only Administrators can make applications public.","title":"Access Control"},{"location":"Advanced%20Concepts/access-control/#access-control","text":"Invite users to your workspace by clicking on the share button on the application home page or from inside the application Invite the user's email you wish to share the application with and select an appropriate role for them.","title":"Access Control"},{"location":"Advanced%20Concepts/access-control/#roles","text":"Appsmith implements RBAC by assigning a set of permissions to different user roles. These permissions determine the actions users can take on the platform. Below is the permission mapping for each role Administrator: Create/Edit App View App Make App Public Invite Users Manage Users Developer Create/Edit App View App Invite Users App Viewer View App Invite Users as App Viewers only","title":"Roles"},{"location":"Advanced%20Concepts/access-control/#permissions","text":"Create/Edit App: This permission allows users to create and edit applications within a workspace. View App: This permission allows users to view & use applications internal to the workspace Make App Public: This permission allows users to mark applications as accessible outside the workspace. Invite Users: This permission allows users to invite others with a role equal to or lower than theirs. Manage Users. This permission allows users to delete users from a workspace.","title":"Permissions"},{"location":"Advanced%20Concepts/access-control/#public-apps","text":"Applications can be made public and shared with external users not part of your workspace as well. These applications will not require users to authenticate to use them. An app can be made public by clicking the share button from within the application and turning the public application switch on. To share the application, copy the link shown in the modal and share it with your users! {% hint style=\"success\" %} Only Administrators can make applications public.","title":"Public Apps"},{"location":"Advanced%20Concepts/embed-appsmith-into-existing-application/","text":"Embed Apps \u00b6 {% embed url=\" https://www.youtube.com/watch?v=l7508s-5VwU \" %} Tools and Dashboards are great as an app and on a website, and now, you can have it both in one go by embedding apps to your website! In this guide, you'll learn how to embed Appsmith Apps into any website. For this guide, we\u2019ll be considering the Customer Support Dashboard from the demo app\u2019s, and embed that into an HTML page. You can also check out the live preview here . Creating HTML Page \u00b6 Firstly, let\u2019s create an HTML page and call it ` cs_dashboard.html `. Now, add the basic HTML structure to make it an HTML page: <!DOCTYPE html> <html> <head> <title> Customer Support Dahboard </title> </head> <body> </body> </html> You\u2019ll also have to make sure that your app is public to embed into other application. You can do this by clicking on the Share option on the top toolbar and toggle the viewing option to Public . Here\u2019s a GIF showing the same: Next, create an iframe tag and add the shareable link from share options to the src attribute with height and width set to 500 and 100% respectively. Include the meta tag in head to ensure that the embedded application renders responsively on different screen sizes: <!DOCTYPE html> <html> <head> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" <title></title> </head> <body> <iframe src=\"https://app.appsmith.com/applications/5f2aeb2580ca1f6faaed4e4a/pages/5f2d61b580ca1f6faaed4e79\" height=\"700\" width=\"100%\"></iframe> </body> </html> Opening the HTML Page \u00b6 {% hint style=\"info\" %} If you are opening the HTML page as a file: then the browser won't allow you to do that. The HTML file needs to come from a server. After creating the HTML page, save it as cs_dashboard.html and have it be served by a HTTP server. This can be done in several ways: Serving a HTML file with Node.js \u00b6 Once you have created your HTML file, create a new app.js`` `` file. Paste the below mentioned code and edit your HTML file name. const http = require('http'); const fs = require('fs'); http.createServer(function(req, res) { res.writeHead(200, { 'content-type': 'text/html' }); const html = fs.readFileSync('./cs_dashboard.html'); res.end(html); }).listen(3000, () => { console.log('running on 3000'); }); Now, in the terminal, run node app.js This will prompt a running on 3000 message. Next, go to your browser and open http://localhost:3000/ This will open your HTML file. Running npx http-server \u00b6 Let's look at another way to open an HTML file. Now, if you have Node JS installed, go to the command terminal and run: npx http-server Next, open http://localhost:8080/cs_dashboard.html and it should open the HTML File. Modifying Layout \u00b6 If you want to get your app to use the whole page in your browser, you can still change your height and width parameters like so: <!DOCTYPE html> <html> <head> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" <title></title> </head> <body> <iframe src=\"https://app.appsmith.com/applications/5f2aeb2580ca1f6faaed4e4a/pages/5f2d61b580ca1f6faaed4e79\"frameborder=\"0\" scrolling=\"yes\" seamless=\"seamless\" style=\"display:block; width:100%; height:100vh;\"></iframe> </body> </html> Remove Appsmith Top Bar \u00b6 Additionally, you can also see the Appsmith toolbar on the top, you can remove this by adding ?embed=true to the share URL. Update the code to the following: <!DOCTYPE html> <html> <head> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" <title></title> </head> <body> <iframe src=\"https://app.appsmith.com/applications/5f2aeb2580ca1f6faaed4e4a/pages/5f2d61b580ca1f6faaed4e79?embed=true\" height=\"700\" width=\"100%\"></iframe> </body> </html> Awesome! Now you can see the app without any toolbar! Below is a screenshot:","title":"Embed Apps"},{"location":"Advanced%20Concepts/embed-appsmith-into-existing-application/#embed-apps","text":"{% embed url=\" https://www.youtube.com/watch?v=l7508s-5VwU \" %} Tools and Dashboards are great as an app and on a website, and now, you can have it both in one go by embedding apps to your website! In this guide, you'll learn how to embed Appsmith Apps into any website. For this guide, we\u2019ll be considering the Customer Support Dashboard from the demo app\u2019s, and embed that into an HTML page. You can also check out the live preview here .","title":"Embed Apps"},{"location":"Advanced%20Concepts/embed-appsmith-into-existing-application/#creating-html-page","text":"Firstly, let\u2019s create an HTML page and call it ` cs_dashboard.html `. Now, add the basic HTML structure to make it an HTML page: <!DOCTYPE html> <html> <head> <title> Customer Support Dahboard </title> </head> <body> </body> </html> You\u2019ll also have to make sure that your app is public to embed into other application. You can do this by clicking on the Share option on the top toolbar and toggle the viewing option to Public . Here\u2019s a GIF showing the same: Next, create an iframe tag and add the shareable link from share options to the src attribute with height and width set to 500 and 100% respectively. Include the meta tag in head to ensure that the embedded application renders responsively on different screen sizes: <!DOCTYPE html> <html> <head> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" <title></title> </head> <body> <iframe src=\"https://app.appsmith.com/applications/5f2aeb2580ca1f6faaed4e4a/pages/5f2d61b580ca1f6faaed4e79\" height=\"700\" width=\"100%\"></iframe> </body> </html>","title":"Creating HTML Page"},{"location":"Advanced%20Concepts/embed-appsmith-into-existing-application/#opening-the-html-page","text":"{% hint style=\"info\" %} If you are opening the HTML page as a file: then the browser won't allow you to do that. The HTML file needs to come from a server. After creating the HTML page, save it as cs_dashboard.html and have it be served by a HTTP server. This can be done in several ways:","title":"Opening the HTML Page"},{"location":"Advanced%20Concepts/embed-appsmith-into-existing-application/#serving-a-html-file-with-nodejs","text":"Once you have created your HTML file, create a new app.js`` `` file. Paste the below mentioned code and edit your HTML file name. const http = require('http'); const fs = require('fs'); http.createServer(function(req, res) { res.writeHead(200, { 'content-type': 'text/html' }); const html = fs.readFileSync('./cs_dashboard.html'); res.end(html); }).listen(3000, () => { console.log('running on 3000'); }); Now, in the terminal, run node app.js This will prompt a running on 3000 message. Next, go to your browser and open http://localhost:3000/ This will open your HTML file.","title":"Serving a HTML file with Node.js&#x20;"},{"location":"Advanced%20Concepts/embed-appsmith-into-existing-application/#running-npx-http-server","text":"Let's look at another way to open an HTML file. Now, if you have Node JS installed, go to the command terminal and run: npx http-server Next, open http://localhost:8080/cs_dashboard.html and it should open the HTML File.","title":"Running npx http-server"},{"location":"Advanced%20Concepts/embed-appsmith-into-existing-application/#modifying-layout","text":"If you want to get your app to use the whole page in your browser, you can still change your height and width parameters like so: <!DOCTYPE html> <html> <head> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" <title></title> </head> <body> <iframe src=\"https://app.appsmith.com/applications/5f2aeb2580ca1f6faaed4e4a/pages/5f2d61b580ca1f6faaed4e79\"frameborder=\"0\" scrolling=\"yes\" seamless=\"seamless\" style=\"display:block; width:100%; height:100vh;\"></iframe> </body> </html>","title":"Modifying Layout"},{"location":"Advanced%20Concepts/embed-appsmith-into-existing-application/#remove-appsmith-top-bar","text":"Additionally, you can also see the Appsmith toolbar on the top, you can remove this by adding ?embed=true to the share URL. Update the code to the following: <!DOCTYPE html> <html> <head> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" <title></title> </head> <body> <iframe src=\"https://app.appsmith.com/applications/5f2aeb2580ca1f6faaed4e4a/pages/5f2d61b580ca1f6faaed4e79?embed=true\" height=\"700\" width=\"100%\"></iframe> </body> </html> Awesome! Now you can see the app without any toolbar! Below is a screenshot:","title":"Remove Appsmith Top Bar"},{"location":"Advanced%20Concepts/how-to-implement-custom-authentication-on-appsmith/","text":"How to implement custom authentication on Appsmith \u00b6 {% embed url=\" https://youtu.be/5oPcF9dXZyU \" %} A lot of applications use Authentication APIs to secure their information. You can use those API's on Appsmith to build UI or tools using a custom authentication mode. In this guide, you'll learn how to implement this custom Auth using JWTs by chaining multiple steps. Building UI for Login Form \u00b6 The auth APIs require a login form. Hence let\u2019s build one on Appsmith. Follow the below steps: Firstly, log in to your Appsmith account; if you\u2019re new, sign-up here (it\u2019s free)!. Now create a new application by clicking on the `Create New` button on the dashboard. Next, click on the + icon next to widgets from the side navigation and drag and drop a form widget onto the canvas. Now let\u2019s add two text widgets and input widgets to create our login form. Rename the input widgets to following: Username Input Widget: userName Password Input: password This is a screenshot of how the login form looks like: Let's use these values in an Auth API; usually, login API requires a username and a password. In this example, we'll be using the same, which will return a JWT token and the user details with his permission roles. Here\u2019s how the output looks like after running the API: { \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjIyNzE1MTU0LCJleHAiOjE2MjUzMDcxNTR9.rqkR0bVR5g0k8awGTYDEQ0vr15H7401zxkTxpWp9Mc4\", \"user\": { \"id\": 2, \"username\": \"Vihar\", \"email\": \"vihar@appsmith.com\", \"provider\": \"local\", \"confirmed\": true, \"blocked\": false, \"role\": { \"id\": 1, \"name\": \"Authenticated\", \"description\": \"Default role given to authenticated user.\", \"type\": \"authenticated\" }, \"created_at\": \"2021-06-03T03:10:37.945Z\", \"updated_at\": \"2021-06-03T03:10:37.952Z\" } } Now, let\u2019s create an API that\u2019ll return the JWT using the login API. Follow the below steps: Click on the + icon next to the APIs in the side navigation. This will create a new API, now add the URL for the Login API Set the API name as login_api. To test this out, we\u2019ve created a test Auth API; use the following if you don\u2019t have any Auth APIs. In this example, let\u2019s use https://appsmith-tutorial-apis.herokuapp.com/auth/local , set the request type to POST . Next, in the body, add the following JSON to send username and password to the API. IN this case, we\u2019re taking the inputs from the form using the moustache syntax. { \"identifier\":\"{{userName.text}}\", \"password\":\"{{password.text}}\" } Next, add a username and password based on the user\u2019s roles in your API. If you\u2019re using the example AUTH Api, use the following credentials. Identifier: appsmith_user Password: appsmith_password Awesome, now we\u2019ll need to save the JWT token generated after the API is run. Appsmith has a store where you can save all the variables; for this, we\u2019ll need to use the moustache syntax after the API is successfully run. Below are the steps. Firstly, open the Submit button property pane and set the onClick property to Call an API and choose call_an_api Next, set the onSuccess property to `Store a value` and name the key as jwt and value as {{login_api.data.jwt}} This will save the jwt token from the API response. This is how the screenshot looks like: Now we\u2019ll be passing this jwt variable in the header with an Authorization mode to access the secure APIs. As an example, let\u2019s create a secure page and test it out. Now, let\u2019s add a new page and access the data from the secure API. Create a new API by clicking on the + icon next to the APIs section. Now add you\u2019re secure API, or you can use the following example API: https://appsmith-tutorial-apis.herokuapp.com/logistics This API requires authorization, lets now add a new header with key and value as: Authorization: Bearer {{appsmith.store.jwt}} As we can see, in the place of the token, we\u2019re using the moustache syntax and binding the jwt token that\u2019s saved from the login-api. Now run the API, you should see the response. In this way, you can use a custom login on Appsmith. Additionally, you can customise the redirections based on the authentication mode and your use case. Custom Google Authentication \u00b6 It is possible to use third-party OAuth services like Google, Twitter, Github, etc, to authenticate users for your app. In this case, you'll need to connect with a service that integrates with the desired Oauth provider. Here's a quick video showing how to implement a custom Google login with Xano: {% embed url=\" https://youtu.be/n3XSAA7q--I \" %}","title":"How to implement custom authentication on Appsmith"},{"location":"Advanced%20Concepts/how-to-implement-custom-authentication-on-appsmith/#how-to-implement-custom-authentication-on-appsmith","text":"{% embed url=\" https://youtu.be/5oPcF9dXZyU \" %} A lot of applications use Authentication APIs to secure their information. You can use those API's on Appsmith to build UI or tools using a custom authentication mode. In this guide, you'll learn how to implement this custom Auth using JWTs by chaining multiple steps.","title":"How to implement custom authentication on Appsmith"},{"location":"Advanced%20Concepts/how-to-implement-custom-authentication-on-appsmith/#building-ui-for-login-form","text":"The auth APIs require a login form. Hence let\u2019s build one on Appsmith. Follow the below steps: Firstly, log in to your Appsmith account; if you\u2019re new, sign-up here (it\u2019s free)!. Now create a new application by clicking on the `Create New` button on the dashboard. Next, click on the + icon next to widgets from the side navigation and drag and drop a form widget onto the canvas. Now let\u2019s add two text widgets and input widgets to create our login form. Rename the input widgets to following: Username Input Widget: userName Password Input: password This is a screenshot of how the login form looks like: Let's use these values in an Auth API; usually, login API requires a username and a password. In this example, we'll be using the same, which will return a JWT token and the user details with his permission roles. Here\u2019s how the output looks like after running the API: { \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjIyNzE1MTU0LCJleHAiOjE2MjUzMDcxNTR9.rqkR0bVR5g0k8awGTYDEQ0vr15H7401zxkTxpWp9Mc4\", \"user\": { \"id\": 2, \"username\": \"Vihar\", \"email\": \"vihar@appsmith.com\", \"provider\": \"local\", \"confirmed\": true, \"blocked\": false, \"role\": { \"id\": 1, \"name\": \"Authenticated\", \"description\": \"Default role given to authenticated user.\", \"type\": \"authenticated\" }, \"created_at\": \"2021-06-03T03:10:37.945Z\", \"updated_at\": \"2021-06-03T03:10:37.952Z\" } } Now, let\u2019s create an API that\u2019ll return the JWT using the login API. Follow the below steps: Click on the + icon next to the APIs in the side navigation. This will create a new API, now add the URL for the Login API Set the API name as login_api. To test this out, we\u2019ve created a test Auth API; use the following if you don\u2019t have any Auth APIs. In this example, let\u2019s use https://appsmith-tutorial-apis.herokuapp.com/auth/local , set the request type to POST . Next, in the body, add the following JSON to send username and password to the API. IN this case, we\u2019re taking the inputs from the form using the moustache syntax. { \"identifier\":\"{{userName.text}}\", \"password\":\"{{password.text}}\" } Next, add a username and password based on the user\u2019s roles in your API. If you\u2019re using the example AUTH Api, use the following credentials. Identifier: appsmith_user Password: appsmith_password Awesome, now we\u2019ll need to save the JWT token generated after the API is run. Appsmith has a store where you can save all the variables; for this, we\u2019ll need to use the moustache syntax after the API is successfully run. Below are the steps. Firstly, open the Submit button property pane and set the onClick property to Call an API and choose call_an_api Next, set the onSuccess property to `Store a value` and name the key as jwt and value as {{login_api.data.jwt}} This will save the jwt token from the API response. This is how the screenshot looks like: Now we\u2019ll be passing this jwt variable in the header with an Authorization mode to access the secure APIs. As an example, let\u2019s create a secure page and test it out. Now, let\u2019s add a new page and access the data from the secure API. Create a new API by clicking on the + icon next to the APIs section. Now add you\u2019re secure API, or you can use the following example API: https://appsmith-tutorial-apis.herokuapp.com/logistics This API requires authorization, lets now add a new header with key and value as: Authorization: Bearer {{appsmith.store.jwt}} As we can see, in the place of the token, we\u2019re using the moustache syntax and binding the jwt token that\u2019s saved from the login-api. Now run the API, you should see the response. In this way, you can use a custom login on Appsmith. Additionally, you can customise the redirections based on the authentication mode and your use case.","title":"Building UI for Login Form"},{"location":"Advanced%20Concepts/how-to-implement-custom-authentication-on-appsmith/#custom-google-authentication","text":"It is possible to use third-party OAuth services like Google, Twitter, Github, etc, to authenticate users for your app. In this case, you'll need to connect with a service that integrates with the desired Oauth provider. Here's a quick video showing how to implement a custom Google login with Xano: {% embed url=\" https://youtu.be/n3XSAA7q--I \" %}","title":"Custom Google Authentication"},{"location":"Advanced%20Concepts/sharing-data-across-pages/","text":"Share Data Across Pages \u00b6 Sharing data via query params \u00b6 Query params can be passed by adding the query params object to NavigateTo action . To do this click on the JS mode for Action and update it as follows. {{navigateTo(\"PageName\", {\"param\": \"value\"})}} These can be consumed on the destination page with appsmith.URL.queryParams.param . Sharing data via local storage \u00b6 Key-value pairs can be stored within the local storage with the help of the StoreValue action . To do so pick the StoreValue action and provide the desired key and values. These can be consumed on the destination page with appsmith.store.key","title":"Share Data Across Pages"},{"location":"Advanced%20Concepts/sharing-data-across-pages/#share-data-across-pages","text":"","title":"Share Data Across Pages"},{"location":"Advanced%20Concepts/sharing-data-across-pages/#sharing-data-via-query-params","text":"Query params can be passed by adding the query params object to NavigateTo action . To do this click on the JS mode for Action and update it as follows. {{navigateTo(\"PageName\", {\"param\": \"value\"})}} These can be consumed on the destination page with appsmith.URL.queryParams.param .","title":"Sharing data via query params"},{"location":"Advanced%20Concepts/sharing-data-across-pages/#sharing-data-via-local-storage","text":"Key-value pairs can be stored within the local storage with the help of the StoreValue action . To do so pick the StoreValue action and provide the desired key and values. These can be consumed on the destination page with appsmith.store.key","title":"Sharing data via local storage"},{"location":"Advanced%20Concepts/more/","text":"More \u00b6 Here we discuss other advanced topics that will come in handy when working with Appsmith such as connecting to your local database, importing - exporting apps, and more. {% content-ref url=\"how-to-work-with-local-apis-on-appsmith.md\" %} how-to-work-with-local-apis-on-appsmith.md {% content-ref url=\"backup-restore.md\" %} backup-restore.md {% content-ref url=\"keyboard-shortcuts.md\" %} keyboard-shortcuts.md","title":"More"},{"location":"Advanced%20Concepts/more/#more","text":"Here we discuss other advanced topics that will come in handy when working with Appsmith such as connecting to your local database, importing - exporting apps, and more. {% content-ref url=\"how-to-work-with-local-apis-on-appsmith.md\" %} how-to-work-with-local-apis-on-appsmith.md {% content-ref url=\"backup-restore.md\" %} backup-restore.md {% content-ref url=\"keyboard-shortcuts.md\" %} keyboard-shortcuts.md","title":"More"},{"location":"Advanced%20Concepts/more/backup-restore/","text":"Migrate Applications \u00b6 On Appsmith, you can migrate all Appsmith data from one instance to another or just migrate necessary applications. Steps to Migrate entire Appsmith Data onto instances: \u00b6 Backup the old VM \u00b6 Dump the mongo data from the old VM via the command: mongodump --uri \"mongodb://<rootUsername>:<rootPassword>@localhost:27017/appsmith\" --out=/tmp/appsmith-mongo-dump Copy the dump file to the new VM Open the file encryption.env and note the values in this file. The values here are important for Appsmith to be able to read sensitive information in the new installation. Restore the backup on the new VM: \u00b6 {% hint style=\"warning\" %} The restore would end up deleting all the existing data in the mongo database of the newly installed appsmith instance Install Appsmith via the install.sh script. Restore the dump on the newly created mongo container via the command: mongorestore --drop /tmp/appsmith-mongo-dump -d appsmith --uri=mongodb://<rootUsername>:<rootPassword>@localhost/appsmith Open the file encryption.env and change the variables APPSMITH_ENCRYPTION_PASSWORD & APPSMITH_ENCRYPTION_SALT to the same ones as the old VM. This is important because sensitive data in Mongo is encrypted using these credentials. Without this, you risk corrupting any passwords you've saved. Restart the Appsmith system using the command: sudo docker-compose down && sudo docker-compose up -d Import/Export Applications \u00b6 You can import or export the desired application to any workspace, either in the same or a different Appsmith instance. {% hint style=\"info\" %} Applications are forward compatible from Appsmith version 1.6.9. Applications built in an older version of an Appsmith instance will work when imported into a newer version of an Appsmith instance. {% embed url=\" https://youtu.be/2JuJ0v56ztw \" %} Export Application \u00b6 You can sync your application to a Git repository or export your application as a JSON file to your system. Follow the steps below to export your application as a JSON file: Go to your workspace homepage and navigate to the app you want to export. Click on the menu button at the bottom of the Application card and select \u201c Export .\u201d {% embed url=\" https://youtu.be/lBMP9MQHdCQ \" %} Import Application \u00b6 You can choose one of the below ways to import an Appsmith application.- Import from a Git Repository ; From an application JSON file. Import from an application JSON file \u00b6 If you have exported an application as a JSON file, you can import the same application to any workspace or Appsmith instance. Follow the steps below to import an exported (JSON file) application - Go to your workspace homepage and navigate to the menu button of the workspace. Click on the menu button (next to +NEW) and select the \u201c Import \u201d option. In the import pop-up window, click on import from file and pick the JSON file from your system\u2019s memory. Once the file is imported, you will see a datasource configuration modal (if the imported app had a datasource connection) where you can configure the datasources used by the imported application. {% hint style=\"info\" %} As a security measure, we do not export any config values used for the connecting datasource during the import operation. So either you have to configure it in the datasource configuration modal, or you can skip this and choose to configure it later {% embed url=\" https://youtu.be/bhzGIdXq2Z4 \" %} : {% hint style=\"success\" %} When you import the application into the destination instance/ workspace, it's a new one, meaning source and destination applications are detached, and changes will not be synced. Import from a Git repository \u00b6 If you have an application connected to Git version control in Appsmith, you can import the Appsmith application from your Git repository into any workspace. For more information, check out Import from Repository .","title":"Migrate Applications"},{"location":"Advanced%20Concepts/more/backup-restore/#migrate-applications","text":"On Appsmith, you can migrate all Appsmith data from one instance to another or just migrate necessary applications.","title":"Migrate Applications"},{"location":"Advanced%20Concepts/more/backup-restore/#steps-to-migrate-entire-appsmith-data-onto-instances","text":"","title":"Steps to Migrate entire Appsmith Data onto instances:"},{"location":"Advanced%20Concepts/more/backup-restore/#backup-the-old-vm","text":"Dump the mongo data from the old VM via the command: mongodump --uri \"mongodb://<rootUsername>:<rootPassword>@localhost:27017/appsmith\" --out=/tmp/appsmith-mongo-dump Copy the dump file to the new VM Open the file encryption.env and note the values in this file. The values here are important for Appsmith to be able to read sensitive information in the new installation.","title":"Backup the old VM"},{"location":"Advanced%20Concepts/more/backup-restore/#restore-the-backup-on-the-new-vm","text":"{% hint style=\"warning\" %} The restore would end up deleting all the existing data in the mongo database of the newly installed appsmith instance Install Appsmith via the install.sh script. Restore the dump on the newly created mongo container via the command: mongorestore --drop /tmp/appsmith-mongo-dump -d appsmith --uri=mongodb://<rootUsername>:<rootPassword>@localhost/appsmith Open the file encryption.env and change the variables APPSMITH_ENCRYPTION_PASSWORD & APPSMITH_ENCRYPTION_SALT to the same ones as the old VM. This is important because sensitive data in Mongo is encrypted using these credentials. Without this, you risk corrupting any passwords you've saved. Restart the Appsmith system using the command: sudo docker-compose down && sudo docker-compose up -d","title":"Restore the backup on the new VM:"},{"location":"Advanced%20Concepts/more/backup-restore/#importexport-applications","text":"You can import or export the desired application to any workspace, either in the same or a different Appsmith instance. {% hint style=\"info\" %} Applications are forward compatible from Appsmith version 1.6.9. Applications built in an older version of an Appsmith instance will work when imported into a newer version of an Appsmith instance. {% embed url=\" https://youtu.be/2JuJ0v56ztw \" %}","title":"Import/Export Applications"},{"location":"Advanced%20Concepts/more/backup-restore/#export-application","text":"You can sync your application to a Git repository or export your application as a JSON file to your system. Follow the steps below to export your application as a JSON file: Go to your workspace homepage and navigate to the app you want to export. Click on the menu button at the bottom of the Application card and select \u201c Export .\u201d {% embed url=\" https://youtu.be/lBMP9MQHdCQ \" %}","title":"Export Application"},{"location":"Advanced%20Concepts/more/backup-restore/#import-application","text":"You can choose one of the below ways to import an Appsmith application.- Import from a Git Repository ; From an application JSON file.","title":"Import Application"},{"location":"Advanced%20Concepts/more/backup-restore/#import-from-an-application-json-file","text":"If you have exported an application as a JSON file, you can import the same application to any workspace or Appsmith instance. Follow the steps below to import an exported (JSON file) application - Go to your workspace homepage and navigate to the menu button of the workspace. Click on the menu button (next to +NEW) and select the \u201c Import \u201d option. In the import pop-up window, click on import from file and pick the JSON file from your system\u2019s memory. Once the file is imported, you will see a datasource configuration modal (if the imported app had a datasource connection) where you can configure the datasources used by the imported application. {% hint style=\"info\" %} As a security measure, we do not export any config values used for the connecting datasource during the import operation. So either you have to configure it in the datasource configuration modal, or you can skip this and choose to configure it later {% embed url=\" https://youtu.be/bhzGIdXq2Z4 \" %} : {% hint style=\"success\" %} When you import the application into the destination instance/ workspace, it's a new one, meaning source and destination applications are detached, and changes will not be synced.","title":"Import from an application JSON file"},{"location":"Advanced%20Concepts/more/backup-restore/#import-from-a-git-repository","text":"If you have an application connected to Git version control in Appsmith, you can import the Appsmith application from your Git repository into any workspace. For more information, check out Import from Repository .","title":"Import from a Git repository"},{"location":"Advanced%20Concepts/more/how-to-work-with-local-apis-on-appsmith/","text":"Local DB and APIs \u00b6 {% embed url=\" https://youtu.be/IUX2rXmS17E \" %} Appsmith allows you to work with local APIs using the help of ngrok . In this guide, let\u2019s look at how we can build an Appsmith application utilising the local APIs running on our machine Building a Simple Local API \u00b6 If you have your local APIs ready, you can skip to the next section. Here, as an example, we\u2019ll use a Python FastAPI server for serving a simple local API. Let\u2019s install the necessary packages using pip: $ pip install fastapi uvicorn Now let\u2019s write a script that\u2019ll serve as a simple API request, below is the code snippet: from fastapi import FastAPI app = FastAPI() items = [{ \"name\": \"Counter-Strike\", \"appid\": 10, \"average_playtime\": 17612, \"genres\": \"Action\", \"price\": 7.2 }, { \"name\": \"Team Fortress Classic\", \"appid\": 20, \"average_playtime\": 277, \"genres\": \"Action\", \"price\": 3.99 }] @app.get(\"/\") async def root(): return items Here, we imported the FastAPI library, initiated an app using the FastAPI class. Next, we define a simple list consisting of details of steam games as objects Lastly, we declare a route \u201c/\u201d at which the items variables (game objects) are being returned. We can get this server running by using the following command: $ uvicorn main:app --reload The command uvicorn main:app refers to: main : the file main.py (the Python \"module\"). app : the object created inside of main.py with the line app = FastAPI(). --reload : make the server restart after code changes. Only use for development. Awesome, with this we should see our API running at http://127.0.0.1:8000 ! Setting ngrok \u00b6 Now that we have our local APIs, let\u2019s use ngrok to serve them on production. For this, we\u2019ll have to signup at ngrok (it\u2019s free!), and follow the instructions to connect your account. Download the ngrok installation file and unzip it. Add your auth-token to the default ngrok.yml configuration file using: $ ./ngrok authtoken <your-auth-token> Fire up ngrok , we already have our API server ready, now we\u2019ll have to expose the particular local port for HTTP tunnel forwarding using the following command: $ ./ngrok http 8000 Awesome, we can now see that the local APIs are now being forwarded to a different server on production using ngrok . Below is a screenshot, Testing APIs on Appsmith \u00b6 Now that we have API, up and running, let\u2019s test these out on Appsmith. Create an application on Appsmith Create a New API by clicking on the + icon next to the APIs section on the left navigation and rename it to getGames Add the forwarded API link and hit RUN, we\u2019ll have to see the API response on the response pane. Next, navigate to Pages, and drag and drop a Table Widget on to the canvas. Open the table property pane and add use the API to display data on to the table by adding the following code snippet under the Table Data property: {{ getGames.data }} Below is a GIF, following the same steps:","title":"Local DB and APIs"},{"location":"Advanced%20Concepts/more/how-to-work-with-local-apis-on-appsmith/#local-db-and-apis","text":"{% embed url=\" https://youtu.be/IUX2rXmS17E \" %} Appsmith allows you to work with local APIs using the help of ngrok . In this guide, let\u2019s look at how we can build an Appsmith application utilising the local APIs running on our machine","title":"Local DB and APIs"},{"location":"Advanced%20Concepts/more/how-to-work-with-local-apis-on-appsmith/#building-a-simple-local-api","text":"If you have your local APIs ready, you can skip to the next section. Here, as an example, we\u2019ll use a Python FastAPI server for serving a simple local API. Let\u2019s install the necessary packages using pip: $ pip install fastapi uvicorn Now let\u2019s write a script that\u2019ll serve as a simple API request, below is the code snippet: from fastapi import FastAPI app = FastAPI() items = [{ \"name\": \"Counter-Strike\", \"appid\": 10, \"average_playtime\": 17612, \"genres\": \"Action\", \"price\": 7.2 }, { \"name\": \"Team Fortress Classic\", \"appid\": 20, \"average_playtime\": 277, \"genres\": \"Action\", \"price\": 3.99 }] @app.get(\"/\") async def root(): return items Here, we imported the FastAPI library, initiated an app using the FastAPI class. Next, we define a simple list consisting of details of steam games as objects Lastly, we declare a route \u201c/\u201d at which the items variables (game objects) are being returned. We can get this server running by using the following command: $ uvicorn main:app --reload The command uvicorn main:app refers to: main : the file main.py (the Python \"module\"). app : the object created inside of main.py with the line app = FastAPI(). --reload : make the server restart after code changes. Only use for development. Awesome, with this we should see our API running at http://127.0.0.1:8000 !","title":"Building a Simple Local API"},{"location":"Advanced%20Concepts/more/how-to-work-with-local-apis-on-appsmith/#setting-ngrok","text":"Now that we have our local APIs, let\u2019s use ngrok to serve them on production. For this, we\u2019ll have to signup at ngrok (it\u2019s free!), and follow the instructions to connect your account. Download the ngrok installation file and unzip it. Add your auth-token to the default ngrok.yml configuration file using: $ ./ngrok authtoken <your-auth-token> Fire up ngrok , we already have our API server ready, now we\u2019ll have to expose the particular local port for HTTP tunnel forwarding using the following command: $ ./ngrok http 8000 Awesome, we can now see that the local APIs are now being forwarded to a different server on production using ngrok . Below is a screenshot,","title":"Setting ngrok"},{"location":"Advanced%20Concepts/more/how-to-work-with-local-apis-on-appsmith/#testing-apis-on-appsmith","text":"Now that we have API, up and running, let\u2019s test these out on Appsmith. Create an application on Appsmith Create a New API by clicking on the + icon next to the APIs section on the left navigation and rename it to getGames Add the forwarded API link and hit RUN, we\u2019ll have to see the API response on the response pane. Next, navigate to Pages, and drag and drop a Table Widget on to the canvas. Open the table property pane and add use the API to display data on to the table by adding the following code snippet under the Table Data property: {{ getGames.data }} Below is a GIF, following the same steps:","title":"Testing APIs on Appsmith"},{"location":"Advanced%20Concepts/more/keyboard-shortcuts/","text":"Keyboard Shortcuts \u00b6 Appsmith is a low-code internal tools platform you use to build your internal apps. When you are busy writing code, it's often helpful to have keyboard shortcuts that will speed up your work and give you the flexibility to find your way quickly with widgets, different modes, and more. Here's a guide to the available keyboard shortcuts in Appsmith that you can start using today. In Editor \u00b6 You can view a comprehensive list of available keyboard shortcuts right within the Appsmith Editor. Click the question mark (?) + Shift on your keyboard to view the keyboard shortcuts. You'll see a pop-up screen below that provides the list of available shortcuts in Appsmith. Mac OS \u00b6 Windows \u00b6","title":"Keyboard Shortcuts"},{"location":"Advanced%20Concepts/more/keyboard-shortcuts/#keyboard-shortcuts","text":"Appsmith is a low-code internal tools platform you use to build your internal apps. When you are busy writing code, it's often helpful to have keyboard shortcuts that will speed up your work and give you the flexibility to find your way quickly with widgets, different modes, and more. Here's a guide to the available keyboard shortcuts in Appsmith that you can start using today.","title":"Keyboard Shortcuts"},{"location":"Advanced%20Concepts/more/keyboard-shortcuts/#in-editor","text":"You can view a comprehensive list of available keyboard shortcuts right within the Appsmith Editor. Click the question mark (?) + Shift on your keyboard to view the keyboard shortcuts. You'll see a pop-up screen below that provides the list of available shortcuts in Appsmith.","title":"In Editor"},{"location":"Advanced%20Concepts/more/keyboard-shortcuts/#mac-os","text":"","title":"Mac OS"},{"location":"Advanced%20Concepts/more/keyboard-shortcuts/#windows","text":"","title":"Windows"},{"location":"Advanced%20Concepts/version-control-with-git/","text":"Version Control With Git \u00b6 Version Control with Git allows you to version control your apps by connecting them with a Git hosting provider (Github, GitLab, Bitbucket), making it easier to track changes, create rollbacks or collaborate using git branches. Note: {% hint style=\"info\" %} Version Control works with any Git hosting service that supports SSH protocol. {% embed url=\" https://youtu.be/emdZaG-tzgw \" %} Prerequisites \u00b6 To get started with Version control with Git in Appsmith - Connect to your Git Repository Import from a Git Repository {% hint style=\"info\" %} In the community edition, You can connect up to three private repositories in a workspace. If you wish to connect more, you can upgrade to the enterprise edition (coming soon). However, you can connect unlimited public repositories. Git In Action \u00b6 Once your app connects to the Git repository, you can further learn how version control works on Appsmith.\\ The flow is similar to how you work on Git - Commit and Push Work with Branches Pull and Sync Merging Branches Disconnect the Git repository Update local file path","title":"Version Control With Git"},{"location":"Advanced%20Concepts/version-control-with-git/#version-control-with-git","text":"Version Control with Git allows you to version control your apps by connecting them with a Git hosting provider (Github, GitLab, Bitbucket), making it easier to track changes, create rollbacks or collaborate using git branches. Note: {% hint style=\"info\" %} Version Control works with any Git hosting service that supports SSH protocol. {% embed url=\" https://youtu.be/emdZaG-tzgw \" %}","title":"Version Control With Git"},{"location":"Advanced%20Concepts/version-control-with-git/#prerequisites","text":"To get started with Version control with Git in Appsmith - Connect to your Git Repository Import from a Git Repository {% hint style=\"info\" %} In the community edition, You can connect up to three private repositories in a workspace. If you wish to connect more, you can upgrade to the enterprise edition (coming soon). However, you can connect unlimited public repositories.","title":"Prerequisites"},{"location":"Advanced%20Concepts/version-control-with-git/#git-in-action","text":"Once your app connects to the Git repository, you can further learn how version control works on Appsmith.\\ The flow is similar to how you work on Git - Commit and Push Work with Branches Pull and Sync Merging Branches Disconnect the Git repository Update local file path","title":"Git In Action"},{"location":"Advanced%20Concepts/version-control-with-git/commit-and-push/","text":"Commit and Push \u00b6 After developing your app further, you\u2019d want to sync it with your repository. To sync the app and the repository, commit the changes using the deploy button at the top right or + icon at the bottom left corner. In the deploy window, enter your commit message and click on Commit and Push to update your repository with the latest changes. {% hint style=\"info\" %} Once you commit and push changes, the changes are also published for the app viewers. Please note that the deployed version of one branch does not affect the other. For example, if you are working on a feature branch f1 and you deploy the changes from f1 branch, it will not affect the changes of the master branch Let\u2019s discuss some common errors you may face during the commit and push process. Remote is Ahead \u00b6 In case the remote counterpart of your current branch has some commits that are not present on the local branch, the push command would fail, and you would need to pull the changes to proceed. After pulling the changes, once you click on the pull button, all changes would be finally pushed to the repository, including the last commit. Merge Conflicts \u00b6 If there are any merge conflicts, you will have to resolve them manually on the repository. Once you fix the conflicts, you can try pulling the changes again.","title":"Commit and Push"},{"location":"Advanced%20Concepts/version-control-with-git/commit-and-push/#commit-and-push","text":"After developing your app further, you\u2019d want to sync it with your repository. To sync the app and the repository, commit the changes using the deploy button at the top right or + icon at the bottom left corner. In the deploy window, enter your commit message and click on Commit and Push to update your repository with the latest changes. {% hint style=\"info\" %} Once you commit and push changes, the changes are also published for the app viewers. Please note that the deployed version of one branch does not affect the other. For example, if you are working on a feature branch f1 and you deploy the changes from f1 branch, it will not affect the changes of the master branch Let\u2019s discuss some common errors you may face during the commit and push process.","title":"Commit and Push"},{"location":"Advanced%20Concepts/version-control-with-git/commit-and-push/#remote-is-ahead","text":"In case the remote counterpart of your current branch has some commits that are not present on the local branch, the push command would fail, and you would need to pull the changes to proceed. After pulling the changes, once you click on the pull button, all changes would be finally pushed to the repository, including the last commit.","title":"Remote is Ahead"},{"location":"Advanced%20Concepts/version-control-with-git/commit-and-push/#merge-conflicts","text":"If there are any merge conflicts, you will have to resolve them manually on the repository. Once you fix the conflicts, you can try pulling the changes again.","title":"Merge Conflicts"},{"location":"Advanced%20Concepts/version-control-with-git/connecting-to-git-repository/","text":"Connecting to Git Repository \u00b6 To connect your app with git, follow the steps below: Creating a new Repository \u00b6 Create a new repository on your git service and copy the SSH URL. The repository should be empty except README.md , .gitignore , and LICENSE files (These can be auto-created when you create a new repository.) Generating a Deploy key \u00b6 Open the app you want to connect to git and click on the Connect GIT button on the bottom bar. In the Git connection window, paste your repository\u2019s SSH URL and click on Generate key to generate an SSH key. {% embed url=\" https://youtu.be/oFfdIwhSPL8 \" %} Adding the deploy key in the Repository \u00b6 Copy the generated deploy key and add it to your repository. Please note that you have to enable write access for pushing the changes to the remote repo from Appsmith. For Github \u00b6 Open the settings of the repository and go to deploy keys. Click on \u201c Add deploy key .\u201d Add a title for the key and paste the generated key into the key section. Check the \u201c Allow write access \u201d checkbox and add the key. {% embed url=\" https://youtu.be/4xMHO4G2hEA \" %} For Gitlab \u00b6 Open the Settings> Repository and expand the deploy keys section. Click on \" Add key \" , Add the title and paste the generated key in the key section. Check the \" Grant write permissions \" to this key and add the key. {% embed url=\" https://youtu.be/9aaiE6OERW0 \" %} For Bitbucket \u00b6 Open \" Personal settings \" from the bottom right corner and go to \" SSH keys \" . Click on \" Add key \", add the label and paste the generated key in the key section. {% embed url=\" https://youtu.be/A8ZOvW1CVIk \" %} User Configurations \u00b6 In user settings, define the user configurations. By default, the global user configurations are used. Click on the \" Edit \" button or directly open the profile section to change the global configurations. If you want to add a user configuration specific to the current app, you must uncheck the \" use default configuration \" checkbox and enter the author details below. {% embed url=\" https://youtu.be/d5R1MYKtpCM \" %} Finally, click on connect , and if the connection is successful, your repository will have a README.md file. On the Git window, you\u2019ll move to the Deploy section, where you can make an initial commit. {% embed url=\" https://youtu.be/Z67SfBpKrnk \" %} {% hint style=\"info\" %} In the community edition, You can connect up to three private repositories in a workspace. If you wish to connect more, you can upgrade to the enterprise edition (coming soon). However, you can connect unlimited public repositories.","title":"Connecting to Git Repository"},{"location":"Advanced%20Concepts/version-control-with-git/connecting-to-git-repository/#connecting-to-git-repository","text":"To connect your app with git, follow the steps below:","title":"Connecting to Git Repository"},{"location":"Advanced%20Concepts/version-control-with-git/connecting-to-git-repository/#creating-a-new-repository","text":"Create a new repository on your git service and copy the SSH URL. The repository should be empty except README.md , .gitignore , and LICENSE files (These can be auto-created when you create a new repository.)","title":"Creating a new Repository"},{"location":"Advanced%20Concepts/version-control-with-git/connecting-to-git-repository/#generating-a-deploy-key","text":"Open the app you want to connect to git and click on the Connect GIT button on the bottom bar. In the Git connection window, paste your repository\u2019s SSH URL and click on Generate key to generate an SSH key. {% embed url=\" https://youtu.be/oFfdIwhSPL8 \" %}","title":"Generating a Deploy key"},{"location":"Advanced%20Concepts/version-control-with-git/connecting-to-git-repository/#adding-the-deploy-key-in-the-repository","text":"Copy the generated deploy key and add it to your repository. Please note that you have to enable write access for pushing the changes to the remote repo from Appsmith.","title":"Adding the deploy key in the Repository"},{"location":"Advanced%20Concepts/version-control-with-git/connecting-to-git-repository/#for-github","text":"Open the settings of the repository and go to deploy keys. Click on \u201c Add deploy key .\u201d Add a title for the key and paste the generated key into the key section. Check the \u201c Allow write access \u201d checkbox and add the key. {% embed url=\" https://youtu.be/4xMHO4G2hEA \" %}","title":"For Github"},{"location":"Advanced%20Concepts/version-control-with-git/connecting-to-git-repository/#for-gitlab","text":"Open the Settings> Repository and expand the deploy keys section. Click on \" Add key \" , Add the title and paste the generated key in the key section. Check the \" Grant write permissions \" to this key and add the key. {% embed url=\" https://youtu.be/9aaiE6OERW0 \" %}","title":"For Gitlab"},{"location":"Advanced%20Concepts/version-control-with-git/connecting-to-git-repository/#for-bitbucket","text":"Open \" Personal settings \" from the bottom right corner and go to \" SSH keys \" . Click on \" Add key \", add the label and paste the generated key in the key section. {% embed url=\" https://youtu.be/A8ZOvW1CVIk \" %}","title":"For Bitbucket"},{"location":"Advanced%20Concepts/version-control-with-git/connecting-to-git-repository/#user-configurations","text":"In user settings, define the user configurations. By default, the global user configurations are used. Click on the \" Edit \" button or directly open the profile section to change the global configurations. If you want to add a user configuration specific to the current app, you must uncheck the \" use default configuration \" checkbox and enter the author details below. {% embed url=\" https://youtu.be/d5R1MYKtpCM \" %} Finally, click on connect , and if the connection is successful, your repository will have a README.md file. On the Git window, you\u2019ll move to the Deploy section, where you can make an initial commit. {% embed url=\" https://youtu.be/Z67SfBpKrnk \" %} {% hint style=\"info\" %} In the community edition, You can connect up to three private repositories in a workspace. If you wish to connect more, you can upgrade to the enterprise edition (coming soon). However, you can connect unlimited public repositories.","title":"User Configurations"},{"location":"Advanced%20Concepts/version-control-with-git/disconnect-the-git-repository/","text":"Disconnect the Git Repository \u00b6 If you want to disconnect your app from the Git repository, click Settings and hit the delete icon next to the remote URL. It will take you to the disconnection window, ensuring that you want to delete the connection. {% hint style=\"info\" %} Once you disconnect with Git, all the local branches from the Appsmith server and their changes (except the default branch) will be deleted, and you cannot connect to the same remote repository again. Please note that the branches on the remote repository will remain untouched .","title":"Disconnect the Git Repository"},{"location":"Advanced%20Concepts/version-control-with-git/disconnect-the-git-repository/#disconnect-the-git-repository","text":"If you want to disconnect your app from the Git repository, click Settings and hit the delete icon next to the remote URL. It will take you to the disconnection window, ensuring that you want to delete the connection. {% hint style=\"info\" %} Once you disconnect with Git, all the local branches from the Appsmith server and their changes (except the default branch) will be deleted, and you cannot connect to the same remote repository again. Please note that the branches on the remote repository will remain untouched .","title":"Disconnect the Git Repository"},{"location":"Advanced%20Concepts/version-control-with-git/import-from-repository/","text":"Import from Repository \u00b6 {% embed url=\" https://youtu.be/B4gR4XligTo \" %} \u200bIf you already have an Appsmith App in a Git repository, you can import it to a new workspace or a different Appsmith account. Follow the steps given below: On the Appsmith workspace home, click on desired workspace's Menu button and select Import. Choose the Import from a Git repo option on the import application pop-up. You'll be navigated to an Import from the Git Repository screen. Add your Repository\u2019s SSH URL and click on Generate key . {% embed url=\" https://youtu.be/zrxgcI3m2lc \" %} Add the Deploy key to your repository. \u200b Go back to the Git connection window and configure the user settings and click on Import. Once the import is complete, you\u2019ll see a data source configuration modal where you can configure the data sources used by the imported Application. We do not export any configuration values used for connecting a data source. So either you have to configure it in the data source configuration modal, or you can skip this and choose to configure it later. {% hint style=\"info\" %} If the imported workspace already has a data source with the same name but a different type, the import will fail due to name conflicts. For example, suppose a git-connected application has a MongoDB data source - \"movies.\" You are importing it to a workspace that has a Postgres data source also named \"movies\". In such a case, the import will fail.","title":"Import from Repository"},{"location":"Advanced%20Concepts/version-control-with-git/import-from-repository/#import-from-repository","text":"{% embed url=\" https://youtu.be/B4gR4XligTo \" %} \u200bIf you already have an Appsmith App in a Git repository, you can import it to a new workspace or a different Appsmith account. Follow the steps given below: On the Appsmith workspace home, click on desired workspace's Menu button and select Import. Choose the Import from a Git repo option on the import application pop-up. You'll be navigated to an Import from the Git Repository screen. Add your Repository\u2019s SSH URL and click on Generate key . {% embed url=\" https://youtu.be/zrxgcI3m2lc \" %} Add the Deploy key to your repository. \u200b Go back to the Git connection window and configure the user settings and click on Import. Once the import is complete, you\u2019ll see a data source configuration modal where you can configure the data sources used by the imported Application. We do not export any configuration values used for connecting a data source. So either you have to configure it in the data source configuration modal, or you can skip this and choose to configure it later. {% hint style=\"info\" %} If the imported workspace already has a data source with the same name but a different type, the import will fail due to name conflicts. For example, suppose a git-connected application has a MongoDB data source - \"movies.\" You are importing it to a workspace that has a Postgres data source also named \"movies\". In such a case, the import will fail.","title":"Import from Repository"},{"location":"Advanced%20Concepts/version-control-with-git/merging-branches/","text":"Merging Branches \u00b6 When you want to merge your branch with the base branch - Click on the Merge button at the bottom left corner of the screen. It will open the merge tab Select your base branch and check the merge status The base and head branches shouldn't have any uncommitted changes. The remote counterpart of the base branch shouldn't have any commits that are missing locally (the local and remote versions should be in sync.) The base and the head branch shouldn't have any conflicting changes. Click on Merge Changes if the merge status check is successful. Conflicts \u00b6 Consider a scenario where the user1 wants to develop a new feature and have a single branch main . As a general practice user creates feature/f1 from the main branch. At the same time, user2 updates the main branch with the same resources like page, query, or JSObject that user1 modifies on the feature/f1 branch. If user1 tries to merge feature/f1 to main , it leads to a merge conflict. You can resolve it in the following way: Create a pull request with main as the base branch; Resolve the conflicts on remote branches (Between origin/f1 and origin/main ); Once the conflicts are resolved, merge this new branch( origin/f1 ) into the old branch( origin/main ); ( origin/main <- origin/f1 ) Pull the main branch again in your app. Now you should have all the changes from the feature/f1 branch; Delete branch origin/feature/f1 on remote; Sync branch with remote to remove feature/f1 from the local repository.","title":"Merging Branches"},{"location":"Advanced%20Concepts/version-control-with-git/merging-branches/#merging-branches","text":"When you want to merge your branch with the base branch - Click on the Merge button at the bottom left corner of the screen. It will open the merge tab Select your base branch and check the merge status The base and head branches shouldn't have any uncommitted changes. The remote counterpart of the base branch shouldn't have any commits that are missing locally (the local and remote versions should be in sync.) The base and the head branch shouldn't have any conflicting changes. Click on Merge Changes if the merge status check is successful.","title":"Merging Branches"},{"location":"Advanced%20Concepts/version-control-with-git/merging-branches/#conflicts","text":"Consider a scenario where the user1 wants to develop a new feature and have a single branch main . As a general practice user creates feature/f1 from the main branch. At the same time, user2 updates the main branch with the same resources like page, query, or JSObject that user1 modifies on the feature/f1 branch. If user1 tries to merge feature/f1 to main , it leads to a merge conflict. You can resolve it in the following way: Create a pull request with main as the base branch; Resolve the conflicts on remote branches (Between origin/f1 and origin/main ); Once the conflicts are resolved, merge this new branch( origin/f1 ) into the old branch( origin/main ); ( origin/main <- origin/f1 ) Pull the main branch again in your app. Now you should have all the changes from the feature/f1 branch; Delete branch origin/feature/f1 on remote; Sync branch with remote to remove feature/f1 from the local repository.","title":"Conflicts"},{"location":"Advanced%20Concepts/version-control-with-git/pull-and-sync/","text":"Pull & Sync \u00b6 If your local branch is not in sync with the remote branch of the git repository, you pull the latest changes by clicking on the pull button at the bottom left corner. Conflicts \u00b6 Consider a scenario where multiple users work on a single branch, say, the feature/f1 branch (we don\u2019t recommend this approach), and update the same resources from 2 different Appsmith instances (e.g., cloud and self-hosted). Now whoever commits later will face the issue of a merge conflict as the user who tries to commit and push will have to pull the changes from remote first. You can resolve it in the following way: Create a new branch in appsmith from the conflicted branch ( feature/f1_conflicted ); Resolve the conflicts on the remote repository (Between origin/feature/f1 and origin/feature/f1_conflicted ) by creating a pull request with origin/feature/f1 as a base branch; Once the conflicts are resolved merge this new branch ( origin/feature/f1_conflicted ) into the old branch( origin/feature/f1 ); ( origin/feature/f1 <- origin/feature/f1_conflicted ) Pull the branch ( feature/f1 ) again in Appsmith\u2019s local repository; Delete branch origin/feature/f1_conflicted on the remote repository; Run sync branch flow to remove feature/f1_conflicted from the local repository. Discard and pull changes \u00b6 While developing an application in Appsmith, sometimes, you may end up in a situation where you want to discard the current changes and revert to the previous stable version. Now, with discard and pull functionality, you can remove the unwanted changes, and pull the changes present in the remote repository so that your application will always be in sync. Discarding changes will result in the following scenarios: Any resources added after the last commit will be removed. Any resources deleted after the last commit will be restored. Changes made to any resource after the last commit will be removed. Note: Resources refers to pages, JSObjects, queries, etc","title":"Pull & Sync"},{"location":"Advanced%20Concepts/version-control-with-git/pull-and-sync/#pull-sync","text":"If your local branch is not in sync with the remote branch of the git repository, you pull the latest changes by clicking on the pull button at the bottom left corner.","title":"Pull &amp; Sync"},{"location":"Advanced%20Concepts/version-control-with-git/pull-and-sync/#conflicts","text":"Consider a scenario where multiple users work on a single branch, say, the feature/f1 branch (we don\u2019t recommend this approach), and update the same resources from 2 different Appsmith instances (e.g., cloud and self-hosted). Now whoever commits later will face the issue of a merge conflict as the user who tries to commit and push will have to pull the changes from remote first. You can resolve it in the following way: Create a new branch in appsmith from the conflicted branch ( feature/f1_conflicted ); Resolve the conflicts on the remote repository (Between origin/feature/f1 and origin/feature/f1_conflicted ) by creating a pull request with origin/feature/f1 as a base branch; Once the conflicts are resolved merge this new branch ( origin/feature/f1_conflicted ) into the old branch( origin/feature/f1 ); ( origin/feature/f1 <- origin/feature/f1_conflicted ) Pull the branch ( feature/f1 ) again in Appsmith\u2019s local repository; Delete branch origin/feature/f1_conflicted on the remote repository; Run sync branch flow to remove feature/f1_conflicted from the local repository.","title":"Conflicts"},{"location":"Advanced%20Concepts/version-control-with-git/pull-and-sync/#discard-and-pull-changes","text":"While developing an application in Appsmith, sometimes, you may end up in a situation where you want to discard the current changes and revert to the previous stable version. Now, with discard and pull functionality, you can remove the unwanted changes, and pull the changes present in the remote repository so that your application will always be in sync. Discarding changes will result in the following scenarios: Any resources added after the last commit will be removed. Any resources deleted after the last commit will be restored. Changes made to any resource after the last commit will be removed. Note: Resources refers to pages, JSObjects, queries, etc","title":"Discard and pull changes"},{"location":"Advanced%20Concepts/version-control-with-git/updating-local-file-path/","text":"Updating Local File Path \u00b6 Appsmith clones the git repositories in the local filesystem, attached to the persistent volume within the docker container. To maintain the git repositories, we will need a file path that will point to the volume within the docker container. We can quickly achieve this by just updating the relevant environment variable. {% hint style=\"info\" %} If the file path is not present, git repositories will be cloned, but this will not be persistent, and Appsmith will try to clone the repositories in case they got deleted by docker restart, etc. Custom Git Root \u00b6 To point to a custom Git Root where the git repositories will be persisted, update the env variable called APPSMITH_GIT_ROOT to point to your custom file path. APPSMITH_GIT_ROOT=./path/to/repo/directory Please remember to restart the container to apply changes.","title":"Updating Local File Path"},{"location":"Advanced%20Concepts/version-control-with-git/updating-local-file-path/#updating-local-file-path","text":"Appsmith clones the git repositories in the local filesystem, attached to the persistent volume within the docker container. To maintain the git repositories, we will need a file path that will point to the volume within the docker container. We can quickly achieve this by just updating the relevant environment variable. {% hint style=\"info\" %} If the file path is not present, git repositories will be cloned, but this will not be persistent, and Appsmith will try to clone the repositories in case they got deleted by docker restart, etc.","title":"Updating Local File Path"},{"location":"Advanced%20Concepts/version-control-with-git/updating-local-file-path/#custom-git-root","text":"To point to a custom Git Root where the git repositories will be persisted, update the env variable called APPSMITH_GIT_ROOT to point to your custom file path. APPSMITH_GIT_ROOT=./path/to/repo/directory Please remember to restart the container to apply changes.","title":"Custom Git Root"},{"location":"Advanced%20Concepts/version-control-with-git/working-with-branches/","text":"Working with Branches \u00b6 The initial commit while connecting to a repository is made to the master branch. If you want to work on a feature independently, you can create a separate branch. To create a new branch - Click on the branch button at the bottom left corner. You can switch to an existing branch or create a new one from the branch pop-up. When you switch to another branch, the uncommitted changes in your current branch won\u2019t carry over to the destination branch. However, if you create a new branch, it will have the uncommitted changes of your parent branch. {% hint style=\"info\" %} * Branch names should not start with origin/ since this prefix is used to distinguish between local and remote versions of a branch. * Checking out a remote branch with a local counterpart already available would result in an error. * If you create a new branch, it will have the uncommitted changes of your parent branch. When you switch to another branch, the uncommitted changes in your current branch won\u2019t be carried over to the destination branch. In both cases, the current branch will retain the uncommitted changes. Syncing Local with Remote Branch \u00b6 To sync the local with the remote branch (fetching or pruning), click on the branch pop-up and hit the \u201c Sync branches \u201d button. Syncing the branches won\u2019t merge any change you\u2019ve made on the remote branch. You\u2019ll have to click on the pull button to get the latest changes. Delete a Branch \u00b6 Similar to the Git flow, you can delete a branch in Appsmith that is no longer needed. {% hint style=\"info\" %} You can delete any branch other than the default branch. Please make sure that you are not editing the branch you want to delete. If you want to delete a branch from Appsmith, follow the steps given below: Click on the branch list at the bottom left corner. Move the cursor to the branch you want to delete, hit the options button, and click on delete branch. {% embed url=\" https://youtu.be/Ww6cpZEkSqs \" %}","title":"Working with Branches"},{"location":"Advanced%20Concepts/version-control-with-git/working-with-branches/#working-with-branches","text":"The initial commit while connecting to a repository is made to the master branch. If you want to work on a feature independently, you can create a separate branch. To create a new branch - Click on the branch button at the bottom left corner. You can switch to an existing branch or create a new one from the branch pop-up. When you switch to another branch, the uncommitted changes in your current branch won\u2019t carry over to the destination branch. However, if you create a new branch, it will have the uncommitted changes of your parent branch. {% hint style=\"info\" %} * Branch names should not start with origin/ since this prefix is used to distinguish between local and remote versions of a branch. * Checking out a remote branch with a local counterpart already available would result in an error. * If you create a new branch, it will have the uncommitted changes of your parent branch. When you switch to another branch, the uncommitted changes in your current branch won\u2019t be carried over to the destination branch. In both cases, the current branch will retain the uncommitted changes.","title":"Working with Branches"},{"location":"Advanced%20Concepts/version-control-with-git/working-with-branches/#syncing-local-with-remote-branch","text":"To sync the local with the remote branch (fetching or pruning), click on the branch pop-up and hit the \u201c Sync branches \u201d button. Syncing the branches won\u2019t merge any change you\u2019ve made on the remote branch. You\u2019ll have to click on the pull button to get the latest changes.","title":"Syncing Local with Remote Branch"},{"location":"Advanced%20Concepts/version-control-with-git/working-with-branches/#delete-a-branch","text":"Similar to the Git flow, you can delete a branch in Appsmith that is no longer needed. {% hint style=\"info\" %} You can delete any branch other than the default branch. Please make sure that you are not editing the branch you want to delete. If you want to delete a branch from Appsmith, follow the steps given below: Click on the branch list at the bottom left corner. Move the cursor to the branch you want to delete, hit the options button, and click on delete branch. {% embed url=\" https://youtu.be/Ww6cpZEkSqs \" %}","title":"Delete a Branch"},{"location":"Core%20Concepts/building-ui/","text":"Building UI \u00b6 Appsmith has a grid-style canvas where you can drag and drop customizable widgets to build an app UI quickly. Refer to the sections below to build dynamic UI and design beautifully themed applications. {% content-ref url=\"designing-an-application/\" %} designing-an-application {% content-ref url=\"dynamic-ui/\" %} dynamic-ui","title":"Building UI"},{"location":"Core%20Concepts/building-ui/#building-ui","text":"Appsmith has a grid-style canvas where you can drag and drop customizable widgets to build an app UI quickly. Refer to the sections below to build dynamic UI and design beautifully themed applications. {% content-ref url=\"designing-an-application/\" %} designing-an-application {% content-ref url=\"dynamic-ui/\" %} dynamic-ui","title":"Building UI"},{"location":"Core%20Concepts/building-ui/designing-an-application/","text":"Designing an Application \u00b6 An app can be built using UI elements ( widgets ) by placing them on the canvas as per your requirement. {% embed url=\" https://youtu.be/NB8Btt0aw0g \" %} Adding and Arranging Widgets \u00b6 To add a widget to the canvas, select the widget from the widget tab, drag it onto the canvas and drop it there! When creating an app, you might need several widgets for various purposes like storing data, triggering an action, etc. You can place the widgets anywhere on the canvas. Placing Widgets on the Canvas \u00b6 While working on an app, creating a complex layout (adding and placing multiple widgets) is easy and intuitive with the enhanced drag and drop gestures in Appsmith! When you add a new widget, the widgets already present on the canvas move aside and provide the space for the incoming widget. You can drag the widget to the desired location, and other widgets in the same area on the canvas will automatically move or resize to accommodate the incoming widget. {% embed url=\" https://youtu.be/_JOeo0dfk8Y \" %} When the widget hits the boundary of its container, it starts resizing itself to provide more room to the incoming widget. The aspect ratio is still maintained even when the size changes. {% embed url=\" https://youtu.be/Frw_E1dfhvg \" %} Moving Widgets across Containers \u00b6 A widget can move across containers. A container can be the canvas or a layout widget. {% hint style=\"info\" %} Layout widgets are the ones that can contain other widgets, like - Container widget, List widget, Tabs Widget, etc. You can move a widget into a new container by dragging your cursor. Select and hold the widget you want to move. If you move it slowly towards a layout widget, the selected widget moves and resizes it. However, if you move your cursor with an increased velocity, the widget jumps inside the droppable widget. {% embed url=\" https://youtu.be/FL57bXMYeL4 \" %} Resizing a widget \u00b6 You can change the size of the widget. To resize a widget, select the widget, click and hold an edge or a corner and move the cursor to change the widget\u2019s size. {% embed url=\" https://youtu.be/nnmYtv1gb5M \" %}","title":"Designing an Application"},{"location":"Core%20Concepts/building-ui/designing-an-application/#designing-an-application","text":"An app can be built using UI elements ( widgets ) by placing them on the canvas as per your requirement. {% embed url=\" https://youtu.be/NB8Btt0aw0g \" %}","title":"Designing an Application"},{"location":"Core%20Concepts/building-ui/designing-an-application/#adding-and-arranging-widgets","text":"To add a widget to the canvas, select the widget from the widget tab, drag it onto the canvas and drop it there! When creating an app, you might need several widgets for various purposes like storing data, triggering an action, etc. You can place the widgets anywhere on the canvas.","title":"Adding and Arranging Widgets"},{"location":"Core%20Concepts/building-ui/designing-an-application/#placing-widgets-on-the-canvas","text":"While working on an app, creating a complex layout (adding and placing multiple widgets) is easy and intuitive with the enhanced drag and drop gestures in Appsmith! When you add a new widget, the widgets already present on the canvas move aside and provide the space for the incoming widget. You can drag the widget to the desired location, and other widgets in the same area on the canvas will automatically move or resize to accommodate the incoming widget. {% embed url=\" https://youtu.be/_JOeo0dfk8Y \" %} When the widget hits the boundary of its container, it starts resizing itself to provide more room to the incoming widget. The aspect ratio is still maintained even when the size changes. {% embed url=\" https://youtu.be/Frw_E1dfhvg \" %}","title":"Placing Widgets on the Canvas"},{"location":"Core%20Concepts/building-ui/designing-an-application/#moving-widgets-across-containers","text":"A widget can move across containers. A container can be the canvas or a layout widget. {% hint style=\"info\" %} Layout widgets are the ones that can contain other widgets, like - Container widget, List widget, Tabs Widget, etc. You can move a widget into a new container by dragging your cursor. Select and hold the widget you want to move. If you move it slowly towards a layout widget, the selected widget moves and resizes it. However, if you move your cursor with an increased velocity, the widget jumps inside the droppable widget. {% embed url=\" https://youtu.be/FL57bXMYeL4 \" %}","title":"Moving Widgets across Containers"},{"location":"Core%20Concepts/building-ui/designing-an-application/#resizing-a-widget","text":"You can change the size of the widget. To resize a widget, select the widget, click and hold an edge or a corner and move the cursor to change the widget\u2019s size. {% embed url=\" https://youtu.be/nnmYtv1gb5M \" %}","title":"Resizing a widget"},{"location":"Core%20Concepts/building-ui/designing-an-application/app-theming/","text":"App Theming \u00b6 App theming allows you to style your pages and widgets using global controls, making it easy to change the visual layout with a single click. {% embed url=\" https://youtu.be/v6Lc3p6lv7o \" %} Themes are application-level styles that apply to all the widgets linked to the theme properties. {% hint style=\"warning\" %} All apps support theming, but for older apps, changing the theme or customizing the theme may not update the app entirely. This is to prevent overriding any changes you have already done by styling your widgets. If you still want to use themes in your existing application, please reset your widget's styles. Applying a Theme \u00b6 Within apps, themes can be changed and customized using the \"Theme properties\" in the property pane when opening your app or when no widgets are selected. Each app has an applied theme that can be modified. There are two ways you can modify an applied theme: Changing the theme - You can change the theme from the saved list of themes or default themes. Customizing the theme - The theme can be customized further based on the customization options available in theme properties. Changing the theme \u00b6 You can browse the default themes or your saved themes by clicking the Change Theme button. Once you select the preferred theme, it is applied automatically. After the theme is applied, you can go back and customize it further. You can choose to undo the applied theme if you don't like it. Customizing the theme \u00b6 Once applied, you can customize the theme further by updating the following items: App font: It changes the font family used in the app. Colors: Primary Color - It applies to all the components/widgets in your app. Background Color - It changes the app's background color (canvas). App border radius: It changes the default border-radius across all widgets. Currently, we support three different border radii by default. App box-shadow : It changes the default box shadow for layout widgets like containers, forms ,and lists. Saving the theme \u00b6 All changes made to the applied theme are auto-saved. However, you can save themes for re-using them later. Think of this as checkpointing a theme; it will help keep a safe version of the theme if you want to keep customizing your current theme. You can view these themes from the theme list and choose to apply them when you wish to. You can also choose to delete a saved theme, which will have no impact on your application. {% hint style=\"info\" %} When you apply a theme from the themes section and customize it, we create a copy and apply it to the app. It ensures that default themes are never overridden. \u200bReset the theme of all widgets \u00b6 All apps support theming, but apps created before the new theme options might still be using the older styles, because we do not want to break any of the style settings you have made. To update your older apps to use theming, you will need to use the Reset widget styles button from the menu in the Theme Properties pane. {% embed url=\" https://youtu.be/6W-EIPKCNK8 \" %} Click an empty spot on the canvas so that no widgets are selected. Find the Theme Properties settings on the right of the page, and click the three dots (\u22ef) button. Click the Reset widget styles button. All of the widgets which previously did not support theming will now be ready for new styles. {% hint style=\"info\" %} Widgets which are deprecated will not support theming**.**","title":"App Theming"},{"location":"Core%20Concepts/building-ui/designing-an-application/app-theming/#app-theming","text":"App theming allows you to style your pages and widgets using global controls, making it easy to change the visual layout with a single click. {% embed url=\" https://youtu.be/v6Lc3p6lv7o \" %} Themes are application-level styles that apply to all the widgets linked to the theme properties. {% hint style=\"warning\" %} All apps support theming, but for older apps, changing the theme or customizing the theme may not update the app entirely. This is to prevent overriding any changes you have already done by styling your widgets. If you still want to use themes in your existing application, please reset your widget's styles.","title":"App Theming"},{"location":"Core%20Concepts/building-ui/designing-an-application/app-theming/#applying-a-theme","text":"Within apps, themes can be changed and customized using the \"Theme properties\" in the property pane when opening your app or when no widgets are selected. Each app has an applied theme that can be modified. There are two ways you can modify an applied theme: Changing the theme - You can change the theme from the saved list of themes or default themes. Customizing the theme - The theme can be customized further based on the customization options available in theme properties.","title":"Applying a Theme"},{"location":"Core%20Concepts/building-ui/designing-an-application/app-theming/#changing-the-theme","text":"You can browse the default themes or your saved themes by clicking the Change Theme button. Once you select the preferred theme, it is applied automatically. After the theme is applied, you can go back and customize it further. You can choose to undo the applied theme if you don't like it.","title":"Changing the theme"},{"location":"Core%20Concepts/building-ui/designing-an-application/app-theming/#customizing-the-theme","text":"Once applied, you can customize the theme further by updating the following items: App font: It changes the font family used in the app. Colors: Primary Color - It applies to all the components/widgets in your app. Background Color - It changes the app's background color (canvas). App border radius: It changes the default border-radius across all widgets. Currently, we support three different border radii by default. App box-shadow : It changes the default box shadow for layout widgets like containers, forms ,and lists.","title":"Customizing the theme"},{"location":"Core%20Concepts/building-ui/designing-an-application/app-theming/#saving-the-theme","text":"All changes made to the applied theme are auto-saved. However, you can save themes for re-using them later. Think of this as checkpointing a theme; it will help keep a safe version of the theme if you want to keep customizing your current theme. You can view these themes from the theme list and choose to apply them when you wish to. You can also choose to delete a saved theme, which will have no impact on your application. {% hint style=\"info\" %} When you apply a theme from the themes section and customize it, we create a copy and apply it to the app. It ensures that default themes are never overridden.","title":"Saving the theme"},{"location":"Core%20Concepts/building-ui/designing-an-application/app-theming/#reset-the-theme-of-all-widgets","text":"All apps support theming, but apps created before the new theme options might still be using the older styles, because we do not want to break any of the style settings you have made. To update your older apps to use theming, you will need to use the Reset widget styles button from the menu in the Theme Properties pane. {% embed url=\" https://youtu.be/6W-EIPKCNK8 \" %} Click an empty spot on the canvas so that no widgets are selected. Find the Theme Properties settings on the right of the page, and click the three dots (\u22ef) button. Click the Reset widget styles button. All of the widgets which previously did not support theming will now be ready for new styles. {% hint style=\"info\" %} Widgets which are deprecated will not support theming**.**","title":"\u200bReset the theme of all widgets"},{"location":"Core%20Concepts/building-ui/designing-an-application/application-layout/","text":"Application Layout \u00b6 The Application layout can be selected to match the Application size to the device it is intended for. Desktop layout is set by default for an application. How it works \u00b6 For application layout that has a Min-Max width limit, The application fills the browser's width until the browser width is not Greater than the maximum width of the layout chosen. When it exceeds the maximum width of the layout, the additional width is filled by whitespaces. The application will not squeeze below the minimum width of the layout chosen and would show scrolls if the browser width is less than the minimum width of the layout chosen. In case of Fluid , The application fills the browser's width. At any point in time to change the application layout, click on the Layout control present on the top of the canvas and select a layout to use. Note : Changing layout for an application will change the layout of all pages of the application. Supported Layouts Desktop (Application width would resize in between 1280px - 1160px) Tablet L (Application width would resize in between 1080px - 960px) Tablet (Application width would resize in between 800px - 650px) Mobile Device (Application width would resize in between 450px - 350px) Fluid (Application fills up to the Browser Width)","title":"Application Layout"},{"location":"Core%20Concepts/building-ui/designing-an-application/application-layout/#application-layout","text":"The Application layout can be selected to match the Application size to the device it is intended for. Desktop layout is set by default for an application.","title":"Application Layout"},{"location":"Core%20Concepts/building-ui/designing-an-application/application-layout/#how-it-works","text":"For application layout that has a Min-Max width limit, The application fills the browser's width until the browser width is not Greater than the maximum width of the layout chosen. When it exceeds the maximum width of the layout, the additional width is filled by whitespaces. The application will not squeeze below the minimum width of the layout chosen and would show scrolls if the browser width is less than the minimum width of the layout chosen. In case of Fluid , The application fills the browser's width. At any point in time to change the application layout, click on the Layout control present on the top of the canvas and select a layout to use. Note : Changing layout for an application will change the layout of all pages of the application. Supported Layouts Desktop (Application width would resize in between 1280px - 1160px) Tablet L (Application width would resize in between 1080px - 960px) Tablet (Application width would resize in between 800px - 650px) Mobile Device (Application width would resize in between 450px - 350px) Fluid (Application fills up to the Browser Width)","title":"How it works"},{"location":"Core%20Concepts/building-ui/dynamic-ui/","text":"Building Dynamic UI \u00b6 This document presumes you understand the basics of Displaying Data & Capturing Data and expands on the concept of building dynamic UI that reacts to user inputs and system data {% embed url=\" https://youtu.be/vlx8TEuep5I \" %} Dynamic Properties \u00b6 Every property of a widget can be described dynamically using javascript inside handlebars {{}} . The properties which do not have an input to write javascript can be made dynamic by clicking the JS button next to them. This transforms the property into an input field that can be used to write code. Updating Widget Data \u00b6 Let us take an example of a table displaying a list of products. When a user selects a product in the table, we may want to update the product information in a form so that the user can update the product. In order to achieve this, we can populate the default values of each of the Form's widgets with the corresponding value selected in the table. We can reference the Tables selectedRow property using its name inside the {{ }} Get Product Name Input (Default Text property) {{ Table1.selectedRow.productName }} Get MRP Input (Default Text property) {{ Table1.selectedRow.mrp }} Get Category Dropdown (Default Option property) {{ Table1.selectedRow.category }} Here Table1 is the name of the widget","title":"Building Dynamic UI"},{"location":"Core%20Concepts/building-ui/dynamic-ui/#building-dynamic-ui","text":"This document presumes you understand the basics of Displaying Data & Capturing Data and expands on the concept of building dynamic UI that reacts to user inputs and system data {% embed url=\" https://youtu.be/vlx8TEuep5I \" %}","title":"Building Dynamic UI"},{"location":"Core%20Concepts/building-ui/dynamic-ui/#dynamic-properties","text":"Every property of a widget can be described dynamically using javascript inside handlebars {{}} . The properties which do not have an input to write javascript can be made dynamic by clicking the JS button next to them. This transforms the property into an input field that can be used to write code.","title":"Dynamic Properties"},{"location":"Core%20Concepts/building-ui/dynamic-ui/#updating-widget-data","text":"Let us take an example of a table displaying a list of products. When a user selects a product in the table, we may want to update the product information in a form so that the user can update the product. In order to achieve this, we can populate the default values of each of the Form's widgets with the corresponding value selected in the table. We can reference the Tables selectedRow property using its name inside the {{ }} Get Product Name Input (Default Text property) {{ Table1.selectedRow.productName }} Get MRP Input (Default Text property) {{ Table1.selectedRow.mrp }} Get Category Dropdown (Default Option property) {{ Table1.selectedRow.category }} Here Table1 is the name of the widget","title":"Updating Widget Data"},{"location":"Core%20Concepts/building-ui/dynamic-ui/widget-visibility/","text":"Controlling Widget Visibility \u00b6 The visibility property is usually a switch in the property pane of every widget. This property can be made dynamic by clicking the JS button next to the property which converts it to a text field. Inside the text, the value of the visibility can be conditionally set using javascript. Control Visibility with other widgets \u00b6 In the example below the visibility of the table is a conditional value based on the selected value of the RadioGroup {{RadioGroup1.selectedOptionValue === \"Visible\"}} {% hint style=\"warning\" %} The Visible property expects the expression to evaluate to a boolean value Control Visibility with Query responses \u00b6 Similar to the above example, we can tie the visibility of a widget to the response of a Query. {{ API1.data.value === \"trueValue\" }} Dynamic Forms \u00b6 There are some cases that require form fields to dynamically change based on the user input. This can be achieved using a Tab widget inside the form and conditionally updating the selected tab value based on the inputs of the form {% hint style=\"success\" %} Hide the tabs in the tab widget to make it look like the views are changing in place","title":"Controlling Widget Visibility"},{"location":"Core%20Concepts/building-ui/dynamic-ui/widget-visibility/#controlling-widget-visibility","text":"The visibility property is usually a switch in the property pane of every widget. This property can be made dynamic by clicking the JS button next to the property which converts it to a text field. Inside the text, the value of the visibility can be conditionally set using javascript.","title":"Controlling Widget Visibility"},{"location":"Core%20Concepts/building-ui/dynamic-ui/widget-visibility/#control-visibility-with-other-widgets","text":"In the example below the visibility of the table is a conditional value based on the selected value of the RadioGroup {{RadioGroup1.selectedOptionValue === \"Visible\"}} {% hint style=\"warning\" %} The Visible property expects the expression to evaluate to a boolean value","title":"Control Visibility with other widgets"},{"location":"Core%20Concepts/building-ui/dynamic-ui/widget-visibility/#control-visibility-with-query-responses","text":"Similar to the above example, we can tie the visibility of a widget to the response of a Query. {{ API1.data.value === \"trueValue\" }}","title":"Control Visibility with Query responses"},{"location":"Core%20Concepts/building-ui/dynamic-ui/widget-visibility/#dynamic-forms","text":"There are some cases that require form fields to dynamically change based on the user input. This can be achieved using a Tab widget inside the form and conditionally updating the selected tab value based on the inputs of the form {% hint style=\"success\" %} Hide the tabs in the tab widget to make it look like the views are changing in place","title":"Dynamic Forms"},{"location":"Core%20Concepts/connecting-to-data-sources/","text":"Connecting to Datasource \u00b6 Rich applications require real data to build intuitive UI, perform data transformations & write business-correct logic. Appsmith can talk to your data in the following ways Query your database directly Hit a REST API {% hint style=\"warning\" %} Before connecting to a data source, you must whitelist the IP address of the Appsmith deployment on your database instance or VPC 18.223.74.85 and 3.131.104.27 are the IP addresses of the Appsmith cloud instances that need to be whitelisted This is a guide on how to whitelist appsmith on AWS. Security \u00b6 Appsmith safely encrypts all your data source credentials and stores them securely. Appsmith also does not store any data returned from your data sources and acts only as a proxy layer to orchestrate the execution of Queries. Since Appsmith is an open-source framework, you can deploy it on-premise , and audit it to ensure none of your data leaves your VPC. Read more about Security Sample Data \u00b6 If you would like to play around with the platform before connecting your data, we provide mock data sources that you can use. Sample DB \u00b6 You can connect to 2 sample datasets Movies: This is a sample MongoDB database with a collection called movies Users: This is a sample PostgreSQL database with a table called users {% hint style=\"info\" %} The data in the mock database gets reset every 24 hours and is common for all users so it may contain some unexpected values . Sample API \u00b6 You can import the below CURL commands to execute these APIs Fetch Users \u00b6 curl --location --request GET 'https://mock-api.appsmith.com/users?page=1' Update Users \u00b6 curl --location --request PUT 'https://mock-api.appsmith.com/users/1' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"status\" : \"Approved\" }'","title":"Connecting to Datasource"},{"location":"Core%20Concepts/connecting-to-data-sources/#connecting-to-datasource","text":"Rich applications require real data to build intuitive UI, perform data transformations & write business-correct logic. Appsmith can talk to your data in the following ways Query your database directly Hit a REST API {% hint style=\"warning\" %} Before connecting to a data source, you must whitelist the IP address of the Appsmith deployment on your database instance or VPC 18.223.74.85 and 3.131.104.27 are the IP addresses of the Appsmith cloud instances that need to be whitelisted This is a guide on how to whitelist appsmith on AWS.","title":"Connecting to Datasource"},{"location":"Core%20Concepts/connecting-to-data-sources/#security","text":"Appsmith safely encrypts all your data source credentials and stores them securely. Appsmith also does not store any data returned from your data sources and acts only as a proxy layer to orchestrate the execution of Queries. Since Appsmith is an open-source framework, you can deploy it on-premise , and audit it to ensure none of your data leaves your VPC. Read more about Security","title":"Security"},{"location":"Core%20Concepts/connecting-to-data-sources/#sample-data","text":"If you would like to play around with the platform before connecting your data, we provide mock data sources that you can use.","title":"Sample Data"},{"location":"Core%20Concepts/connecting-to-data-sources/#sample-db","text":"You can connect to 2 sample datasets Movies: This is a sample MongoDB database with a collection called movies Users: This is a sample PostgreSQL database with a table called users {% hint style=\"info\" %} The data in the mock database gets reset every 24 hours and is common for all users so it may contain some unexpected values .","title":"Sample DB"},{"location":"Core%20Concepts/connecting-to-data-sources/#sample-api","text":"You can import the below CURL commands to execute these APIs","title":"Sample API"},{"location":"Core%20Concepts/connecting-to-data-sources/#fetch-users","text":"curl --location --request GET 'https://mock-api.appsmith.com/users?page=1'","title":"Fetch Users"},{"location":"Core%20Concepts/connecting-to-data-sources/#update-users","text":"curl --location --request PUT 'https://mock-api.appsmith.com/users/1' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"status\" : \"Approved\" }'","title":"Update Users"},{"location":"Core%20Concepts/connecting-to-data-sources/connecting-to-databases/","text":"Databases \u00b6 Supported Databases \u00b6 Amazon S3 (also Upcloud, Digital Ocean Spaces, Wasabi, DreamObjects) ArangoDB DynamoDB ElasticSearch Firestore Google Sheets MongoDB MS SQL MySQL PostgreSQL Redis Redshift Snowflake SMTP Security \u00b6 Appsmith safely encrypts all your database credentials and stores them securely. Appsmith also does not store any data returned from your data sources and acts only as a proxy layer to orchestrate the API / Query calls. Since Appsmith is an open-source framework, you can deploy it on-premise , and audit it to ensure none of your data leaves your VPC. Connecting to a Database \u00b6 {% hint style=\"warning\" %} Before connecting to a data source, you may need to whitelist the IP address of the Appsmith deployment on your database instance or VPC. 18.223.74.85 and 3.131.104.27 are the IP addresses of the Appsmith cloud instances that need to be whitelisted. Once the appsmith instance has been whitelisted : Click on + next to Datasources You\u2019ll see a list of Datasources that Appsmith can connect to Choose a Database from the supported list Provide the configuration details required to connect to your database. You may need to contact your database admin to whitelist appsmith cloud Click on Test to verify that Appsmith is able to connect to your database using the details provided by you Save your Datasources {% hint style=\"success\" %} Databases configured within one page of an app can be accessed by developers anywhere within the workspace. General Notes \u00b6 Appsmith creates a new connection pool with the database server when you first connect the database server to your app. All subsequent queries executed by Appsmith against your database then re-use this connection to ensure that at run-time your queries are executed quickly. In the case that an idle connection is closed by the database server, Appsmith creates a new connection while executing the next query. For certain plugins like PostgreSQL , and MySQL , Appsmith creates and maintains a connection pool because multiple queries cannot be executed against a single connection. Concurrent Queries \u00b6 Appsmith limits maximum queries that can run concurrently on a database to be 5. If the application attempts to make more queries concurrently, you'll see an error saying Connection not available .","title":"Databases"},{"location":"Core%20Concepts/connecting-to-data-sources/connecting-to-databases/#databases","text":"","title":"Databases"},{"location":"Core%20Concepts/connecting-to-data-sources/connecting-to-databases/#supported-databases","text":"Amazon S3 (also Upcloud, Digital Ocean Spaces, Wasabi, DreamObjects) ArangoDB DynamoDB ElasticSearch Firestore Google Sheets MongoDB MS SQL MySQL PostgreSQL Redis Redshift Snowflake SMTP","title":"Supported Databases"},{"location":"Core%20Concepts/connecting-to-data-sources/connecting-to-databases/#security","text":"Appsmith safely encrypts all your database credentials and stores them securely. Appsmith also does not store any data returned from your data sources and acts only as a proxy layer to orchestrate the API / Query calls. Since Appsmith is an open-source framework, you can deploy it on-premise , and audit it to ensure none of your data leaves your VPC.","title":"Security"},{"location":"Core%20Concepts/connecting-to-data-sources/connecting-to-databases/#connecting-to-a-database","text":"{% hint style=\"warning\" %} Before connecting to a data source, you may need to whitelist the IP address of the Appsmith deployment on your database instance or VPC. 18.223.74.85 and 3.131.104.27 are the IP addresses of the Appsmith cloud instances that need to be whitelisted. Once the appsmith instance has been whitelisted : Click on + next to Datasources You\u2019ll see a list of Datasources that Appsmith can connect to Choose a Database from the supported list Provide the configuration details required to connect to your database. You may need to contact your database admin to whitelist appsmith cloud Click on Test to verify that Appsmith is able to connect to your database using the details provided by you Save your Datasources {% hint style=\"success\" %} Databases configured within one page of an app can be accessed by developers anywhere within the workspace.","title":"Connecting to a Database"},{"location":"Core%20Concepts/connecting-to-data-sources/connecting-to-databases/#general-notes","text":"Appsmith creates a new connection pool with the database server when you first connect the database server to your app. All subsequent queries executed by Appsmith against your database then re-use this connection to ensure that at run-time your queries are executed quickly. In the case that an idle connection is closed by the database server, Appsmith creates a new connection while executing the next query. For certain plugins like PostgreSQL , and MySQL , Appsmith creates and maintains a connection pool because multiple queries cannot be executed against a single connection.","title":"General Notes"},{"location":"Core%20Concepts/connecting-to-data-sources/connecting-to-databases/#concurrent-queries","text":"Appsmith limits maximum queries that can run concurrently on a database to be 5. If the application attempts to make more queries concurrently, you'll see an error saying Connection not available .","title":"Concurrent Queries"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/","text":"REST APIs \u00b6 If your APIs are protected by an authentication mechanism, that requires a standard set of headers or parameters that need to be sent with every request, you can save these in a common data source to be reused with every request known as Authenticated APIs. Create Authenticated API \u00b6 Navigate to Explorer \u2192 scroll down to Datasources \u2192 Click on the (+) sign \u2192 Click Authenticated API . {% embed url=\" https://youtu.be/Uy7ZDviGbtM \" %} How to create an Authenticated API? You\u2019ll be redirected to the create datasource page as shown below: Configure \u00b6 You can configure the data source as follows: Name \u00b6 By default, Appsmith supplies a running sequence for the data source created. You can click on the pencil icon next to it to edit the name of the data source. {% hint style=\"info\" %} It is advisable that you give a meaningful name to your Authenticated API datasource. URL \u00b6 Use this field to add the API URL you would like to access. For example, I would like to access the mock API of Appsmith, and for that, I\u2019ll supply the URL as https://mock-api.appsmith.com `` Headers \u00b6 You can add one or more header details that you would like to send along with the request to access the API you have integrated. Query Parameters \u00b6 You can add one or more query parameters to the API you integrate with as part of the request. Send Appsmith Signature Header \u00b6 When you want to ensure that the incoming requests originate from Appsmith, you can enable Send Appsmith Signature Header by selecting Yes . You\u2019ll see a new field - Session Details Signature Key to supply the signature key. Authentication Type \u00b6 You can define an authentication type for REST APIs by using the protocols available on Appsmith. Security \u00b6 Appsmith safely encrypts all your authentication credentials and stores them securely. Appsmith also does not store any data returned from your data sources and acts only as a proxy layer to orchestrate the API / Query calls. Since Appsmith is an open-source framework, you can deploy it on-premise , and audit it to ensure none of your data leaves your VPC. Smart JSON Substitution \u00b6 The smart JSON substitution feature allows Appsmith to dynamically perform type conversions on field values in a request body. The video below illustrates how to use this feature: {% embed url=\" https://youtu.be/-Z3y-pdNhXc \" %}","title":"REST APIs"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/#rest-apis","text":"If your APIs are protected by an authentication mechanism, that requires a standard set of headers or parameters that need to be sent with every request, you can save these in a common data source to be reused with every request known as Authenticated APIs.","title":"REST APIs"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/#create-authenticated-api","text":"Navigate to Explorer \u2192 scroll down to Datasources \u2192 Click on the (+) sign \u2192 Click Authenticated API . {% embed url=\" https://youtu.be/Uy7ZDviGbtM \" %} How to create an Authenticated API? You\u2019ll be redirected to the create datasource page as shown below:","title":"Create Authenticated API"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/#configure","text":"You can configure the data source as follows:","title":"Configure"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/#name","text":"By default, Appsmith supplies a running sequence for the data source created. You can click on the pencil icon next to it to edit the name of the data source. {% hint style=\"info\" %} It is advisable that you give a meaningful name to your Authenticated API datasource.","title":"Name"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/#url","text":"Use this field to add the API URL you would like to access. For example, I would like to access the mock API of Appsmith, and for that, I\u2019ll supply the URL as https://mock-api.appsmith.com ``","title":"URL"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/#headers","text":"You can add one or more header details that you would like to send along with the request to access the API you have integrated.","title":"Headers"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/#query-parameters","text":"You can add one or more query parameters to the API you integrate with as part of the request.","title":"Query Parameters"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/#send-appsmith-signature-header","text":"When you want to ensure that the incoming requests originate from Appsmith, you can enable Send Appsmith Signature Header by selecting Yes . You\u2019ll see a new field - Session Details Signature Key to supply the signature key.","title":"Send Appsmith Signature Header"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/#authentication-type","text":"You can define an authentication type for REST APIs by using the protocols available on Appsmith.","title":"Authentication Type"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/#security","text":"Appsmith safely encrypts all your authentication credentials and stores them securely. Appsmith also does not store any data returned from your data sources and acts only as a proxy layer to orchestrate the API / Query calls. Since Appsmith is an open-source framework, you can deploy it on-premise , and audit it to ensure none of your data leaves your VPC.","title":"Security"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/#smart-json-substitution","text":"The smart JSON substitution feature allows Appsmith to dynamically perform type conversions on field values in a request body. The video below illustrates how to use this feature: {% embed url=\" https://youtu.be/-Z3y-pdNhXc \" %}","title":"Smart JSON Substitution"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/connect-to-apis/","text":"Configuring APIs \u00b6 {% hint style=\"success\" %} If your API is not available on the public internet, you must expose it via a service such as https://ngrok.com/ API Editor \u00b6 The API pane is a REST interface that allows you to create and modify your existing APIs. All REST HTTP methods are supported and API values can be configured in the headers, params, and body fields Importing CURL Commands \u00b6 Appsmith makes it easy to import your APIs into your application using CURL commands. Passing Data/Parameters To API Calls \u00b6 There are various ways to pass parameters to API calls on Appsmith. This video shows three ways to pass data to API calls: {% embed url=\" https://youtu.be/znaaDiQbAS8 \" %}","title":"Configuring APIs"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/connect-to-apis/#configuring-apis","text":"{% hint style=\"success\" %} If your API is not available on the public internet, you must expose it via a service such as https://ngrok.com/","title":"Configuring APIs"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/connect-to-apis/#api-editor","text":"The API pane is a REST interface that allows you to create and modify your existing APIs. All REST HTTP methods are supported and API values can be configured in the headers, params, and body fields","title":"API Editor"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/connect-to-apis/#importing-curl-commands","text":"Appsmith makes it easy to import your APIs into your application using CURL commands.","title":"Importing CURL Commands"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/connect-to-apis/#passing-dataparameters-to-api-calls","text":"There are various ways to pass parameters to API calls on Appsmith. This video shows three ways to pass data to API calls: {% embed url=\" https://youtu.be/znaaDiQbAS8 \" %}","title":"Passing Data/Parameters To API Calls"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/self-signed-certificates/","text":"Self-signed Certificates \u00b6 Self-signed certificates are sometimes used in testing or internal environments, as they provide incoming/outgoing data encryption and can be created quickly with no cost. This practice can carry significantly increased security risks, however, and should be carefully considered. In case you need to use a self-signed certificate to access your REST endpoint, the Authenticated API Datasource allows you to upload your own self-signed certificate within the API's configuration page. To upload your self-signed certificate: Navigate to your Authenticated API Datasource in the Explorer pane. If you haven't already created one, you can find instructions in the Authenticated API docs . Click Edit in the top-right of the window. Click to open the Advanced Settings dropdown at the bottom of the window. Set the Use Self-signed certificate* option to \"Yes\". In the new Upload Certificate field, click the Select button. Now you can browse to find and upload your self-signed certificate file. This information needs to be provided in .PEM ( Privacy Enhanced Mail ) format, as shown below. The certificate information is stored securely in an encrypted format in the database.","title":"Self-signed Certificates"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/self-signed-certificates/#self-signed-certificates","text":"Self-signed certificates are sometimes used in testing or internal environments, as they provide incoming/outgoing data encryption and can be created quickly with no cost. This practice can carry significantly increased security risks, however, and should be carefully considered. In case you need to use a self-signed certificate to access your REST endpoint, the Authenticated API Datasource allows you to upload your own self-signed certificate within the API's configuration page. To upload your self-signed certificate: Navigate to your Authenticated API Datasource in the Explorer pane. If you haven't already created one, you can find instructions in the Authenticated API docs . Click Edit in the top-right of the window. Click to open the Advanced Settings dropdown at the bottom of the window. Set the Use Self-signed certificate* option to \"Yes\". In the new Upload Certificate field, click the Select button. Now you can browse to find and upload your self-signed certificate file. This information needs to be provided in .PEM ( Privacy Enhanced Mail ) format, as shown below. The certificate information is stored securely in an encrypted format in the database.","title":"Self-signed Certificates"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/signature-header-in-api-actions/","text":"Signature Header \u00b6 This is an option that can be enabled on REST datasources. When enabled, we also require a signature secret (a string of at least 32 characters) as input from the user. The effect of this option being enabled is that every API call made to this datasource will include an additional header, X-Appsmith-Signature , whose value is a JSON Web Token (JWT) signed with the secret provided by the user. Following are details of how this signature is constructed, what the JWT contains, and what significance this header holds to users. Enabling the Header \u00b6 There are two steps to enable the signature header for a particular REST datasource : Set Send Appsmith signature header to Yes . Set the Session Details Signature Key to a random string that is at least 32 characters long. Now Save the datasource and any action built on top of this datasource should now have an X-Appsmith-Signature header with a JWT (described below) as it's value. Contents of the JWT \u00b6 A JSON Web Token (JWT) is made up of three parts. The header, payload, and signature. The header and payload are essentially base64 encoded JSON objects. A typical header JSON object looks like the following: { \"alg\": \"HS256\", \"typ\": \"JWT\" } A typical payload JSON object looks like the following: { \"iss\": \"Appsmith\", \"exp\": 1516239022 } Construction of token and signature \u00b6 Now, these two are taken to construct the following string (let's call this the body): base64Encode(JSON.stringify(header)) + \".\" + base64Encode(JSON.stringify(payload)) This body is then signed using the algorithm specified in the header's alg key. The secret used to make this signature is the one configured in the datasource by the user. This signature is then appended to the above body, with another \".\" in the middle. Significance of the signature \u00b6 The signature will ensure the authenticity and integrity of this JWT. Authenticity : Authenticity is the property of the token that proves that the token is originating from Appsmith. A signature cannot be recreated without access to the secret that was used to create it. The fact that the secret signature is only available to Appsmith and the user proves the signature's and so the token's authenticity. Integrity : Integrity is the property of the token that it cannot be tampered with. The signature is constructed using the body, in addition to the secret. So, if the contents of the header or payload or changed (causing a change in the body part of the token), the signature will not match. However, the signature cannot be recreated by the tamperer since the secret is not available to them. So, integrity is ensured, as long as the secret remains a secret.","title":"Signature Header"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/signature-header-in-api-actions/#signature-header","text":"This is an option that can be enabled on REST datasources. When enabled, we also require a signature secret (a string of at least 32 characters) as input from the user. The effect of this option being enabled is that every API call made to this datasource will include an additional header, X-Appsmith-Signature , whose value is a JSON Web Token (JWT) signed with the secret provided by the user. Following are details of how this signature is constructed, what the JWT contains, and what significance this header holds to users.","title":"Signature Header"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/signature-header-in-api-actions/#enabling-the-header","text":"There are two steps to enable the signature header for a particular REST datasource : Set Send Appsmith signature header to Yes . Set the Session Details Signature Key to a random string that is at least 32 characters long. Now Save the datasource and any action built on top of this datasource should now have an X-Appsmith-Signature header with a JWT (described below) as it's value.","title":"Enabling the Header"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/signature-header-in-api-actions/#contents-of-the-jwt","text":"A JSON Web Token (JWT) is made up of three parts. The header, payload, and signature. The header and payload are essentially base64 encoded JSON objects. A typical header JSON object looks like the following: { \"alg\": \"HS256\", \"typ\": \"JWT\" } A typical payload JSON object looks like the following: { \"iss\": \"Appsmith\", \"exp\": 1516239022 }","title":"Contents of the JWT"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/signature-header-in-api-actions/#construction-of-token-and-signature","text":"Now, these two are taken to construct the following string (let's call this the body): base64Encode(JSON.stringify(header)) + \".\" + base64Encode(JSON.stringify(payload)) This body is then signed using the algorithm specified in the header's alg key. The secret used to make this signature is the one configured in the datasource by the user. This signature is then appended to the above body, with another \".\" in the middle.","title":"Construction of token and signature"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/signature-header-in-api-actions/#significance-of-the-signature","text":"The signature will ensure the authenticity and integrity of this JWT. Authenticity : Authenticity is the property of the token that proves that the token is originating from Appsmith. A signature cannot be recreated without access to the secret that was used to create it. The fact that the secret signature is only available to Appsmith and the user proves the signature's and so the token's authenticity. Integrity : Integrity is the property of the token that it cannot be tampered with. The signature is constructed using the body, in addition to the secret. So, if the contents of the header or payload or changed (causing a change in the body part of the token), the signature will not match. However, the signature cannot be recreated by the tamperer since the secret is not available to them. So, integrity is ensured, as long as the secret remains a secret.","title":"Significance of the signature"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/","text":"Authentication Type \u00b6 The API authentication is a process of validating the consumer's identity who attempts to make a connection by using an authentication protocol. The authentication type defines the available authentication protocols that you can use on Appsmith to make a connection with your APIs. Configure one of the below authentication modes and save it. {% content-ref url=\"basic-authentication.md\" %} basic-authentication.md {% content-ref url=\"oauth2-authentication/\" %} oauth2-authentication","title":"Authentication Type"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/#authentication-type","text":"The API authentication is a process of validating the consumer's identity who attempts to make a connection by using an authentication protocol. The authentication type defines the available authentication protocols that you can use on Appsmith to make a connection with your APIs. Configure one of the below authentication modes and save it. {% content-ref url=\"basic-authentication.md\" %} basic-authentication.md {% content-ref url=\"oauth2-authentication/\" %} oauth2-authentication","title":"Authentication Type"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/basic-authentication/","text":"Basic \u00b6 To share basic authentication details across multiple APIs, you can use the Basic authentication mechanism within datasources. To do this, click on the + icon next to the datasources section and add an Authenticated API. Enter the Base URL of the API (ex. https://airtable.com ) and select the authentication type as Basic . The username and password can now be configured under the authentication section and will add the base64 version of the username:password to the header of all APIs added under this datasource. Save this datasource and add a new API","title":"Basic"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/basic-authentication/#basic","text":"To share basic authentication details across multiple APIs, you can use the Basic authentication mechanism within datasources. To do this, click on the + icon next to the datasources section and add an Authenticated API. Enter the Base URL of the API (ex. https://airtable.com ) and select the authentication type as Basic . The username and password can now be configured under the authentication section and will add the base64 version of the username:password to the header of all APIs added under this datasource. Save this datasource and add a new API","title":"Basic"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/","text":"OAuth 2.0 \u00b6 Open Authentication (OAuth 2.0) is an open-standard authorization protocol that allows you to share information between services without relieving or exchanging your password. It is a widely used standard by developers to exchange information securely and thus provides secure designated access to the applications. For example, you can tell GitHub to give access to Appsmith to merge or create pull requests on your behalf without sharing your password. Thus, giving you the flexibility to allow the interaction between applications without exposing your password. By using OAuth 2.0, you minimize the security risk. It ensures that even if the associated application is breached, your password is safe as it was never exposed. How does OAuth 2.0 work? \u00b6 OAuth 2.0 is about authorization, asking for the permissions that govern the access. OAuth2.0 is a simplified redesigned version of OAuth 1.0. OAuth 2.0 is faster and easier to implement and use. There are four main participants in an OAuth 2.0 workflow: Resource Owner, Client, Authorization Server, and Resource Server. Using the OAuth 2.0 workflow, a resource owner that is a user or a system would like to authorize a client to access protected resources that can be accessed using an access token. A client asks for an access token from an authorization server. A client uses the access token and requests access from the resource server. A resource server validates the access token and returns the requested resource. For example, John ( resource owner ) wants Notion ( client ) to post tweets on his behalf on Twitter. Twitter ( authorization and resource server ) generates a key and a secret for Notion to do the job. Notion uses the key and secret to create tokens and post the tweets on John\u2019s behalf. {% hint style=\"info\" %} OAuth 2.0 is not backward compatible. If your app is OAuth 1.0 or 1.1, you\u2019ll not be able to use OAuth 2.0 for integration. Authentication Type - OAuth 2.0 \u00b6 For OAuth 2.0 integration, select OAuth 2.0 from the available options. Authentication Type \u00b6 You can connect to your OAuth 2.0 APIs using Authenticated APIs on Appsmith. You select the Authentication type as OAuth 2.0. You can see in the below screenshot that you have the following available grant types to choose from. Grant Types \u00b6 An authorization grant type is a secured representation of the owner\u2019s authorization presented in exchange for an access token. {% embed url=\" https://youtu.be/NOpmWnQuwwQ \" %} Select the Grant types that best suit your implementation needs For OAuth 2.0 on Appsmith, you can use the below grant types to communicate with your APIs. Navigate to the below grant types for their specific configurations. {% content-ref url=\"authorization-code.md\" %} authorization-code.md {% content-ref url=\"client-credentials.md\" %} client-credentials.md","title":"OAuth 2.0"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/#oauth-20","text":"Open Authentication (OAuth 2.0) is an open-standard authorization protocol that allows you to share information between services without relieving or exchanging your password. It is a widely used standard by developers to exchange information securely and thus provides secure designated access to the applications. For example, you can tell GitHub to give access to Appsmith to merge or create pull requests on your behalf without sharing your password. Thus, giving you the flexibility to allow the interaction between applications without exposing your password. By using OAuth 2.0, you minimize the security risk. It ensures that even if the associated application is breached, your password is safe as it was never exposed.","title":"OAuth 2.0"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/#how-does-oauth-20-work","text":"OAuth 2.0 is about authorization, asking for the permissions that govern the access. OAuth2.0 is a simplified redesigned version of OAuth 1.0. OAuth 2.0 is faster and easier to implement and use. There are four main participants in an OAuth 2.0 workflow: Resource Owner, Client, Authorization Server, and Resource Server. Using the OAuth 2.0 workflow, a resource owner that is a user or a system would like to authorize a client to access protected resources that can be accessed using an access token. A client asks for an access token from an authorization server. A client uses the access token and requests access from the resource server. A resource server validates the access token and returns the requested resource. For example, John ( resource owner ) wants Notion ( client ) to post tweets on his behalf on Twitter. Twitter ( authorization and resource server ) generates a key and a secret for Notion to do the job. Notion uses the key and secret to create tokens and post the tweets on John\u2019s behalf. {% hint style=\"info\" %} OAuth 2.0 is not backward compatible. If your app is OAuth 1.0 or 1.1, you\u2019ll not be able to use OAuth 2.0 for integration.","title":"How does OAuth 2.0 work?"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/#authentication-type-oauth-20","text":"For OAuth 2.0 integration, select OAuth 2.0 from the available options.","title":"Authentication Type - OAuth 2.0"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/#authentication-type","text":"You can connect to your OAuth 2.0 APIs using Authenticated APIs on Appsmith. You select the Authentication type as OAuth 2.0. You can see in the below screenshot that you have the following available grant types to choose from.","title":"Authentication Type"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/#grant-types","text":"An authorization grant type is a secured representation of the owner\u2019s authorization presented in exchange for an access token. {% embed url=\" https://youtu.be/NOpmWnQuwwQ \" %} Select the Grant types that best suit your implementation needs For OAuth 2.0 on Appsmith, you can use the below grant types to communicate with your APIs. Navigate to the below grant types for their specific configurations. {% content-ref url=\"authorization-code.md\" %} authorization-code.md {% content-ref url=\"client-credentials.md\" %} client-credentials.md","title":"Grant Types"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/","text":"Authorization Code \u00b6 An authorization code is a temporary code authorized by an authorization server. You can get an access token in exchange for an authorization code. Once you get an access token , you can use it to access the resources or perform actions on behalf of the user. In Appsmith, you can achieve this by setting up an Authenticated API and configuring it to use the Authorization Code as the grant type. {% embed url=\" https://youtu.be/YfdK3t2r5Co \" %} How to select an authorization code? Integrate with Dropbox \u00b6 Let\u2019s take an example to understand the authorization code integration with Dropbox. You have a portal app built on Appsmith, and your app users use it to upload their profiles. You already have a backend application integrated with Dropbox and want to use Dropbox to store the profiles. To achieve this, you have to create an Authenticated API and configure it to connect with Dropbox. User Endpoint \u00b6 You\u2019ll have to connect to a user endpoint on the Dropbox platform to perform API calls. Navigate to the exhaustive list of user endpoints used by Dropbox for different API calls. {% hint style=\"info\" %} Dropbox provides details on headers or the content type that you will have to add to your requests. Configure Authenticated API \u00b6 For uploading files configure Authenticated API as per below table: Appsmith Dropbox Value URL User Endpoint https://content.dropboxapi.com/ Headers Dropbox-API-Arg {\"path\": \"/{{ < pick the file path from widget like`` FilePicker > }}\",\"mode\" : \"add\",\"autorename\" : true, \"mute\" : false,\"strict_conflict\" :false} Headers Content-Type application/octet-stream Authentication Type NA OAuth 2.0 Grant Type NA Authorization Code Access Token URL Token Endpoint https://api.dropboxapi.com/oauth2/token Client ID Navigate to Appconsole >> Select App >> Settings tab >> App key Copy the App key and add in the Client ID field. Client Secret Navigate to Appconsole >> Select App >> Settings tab >> App secret Copy the App secret and add in the Client secret field. Scopes Navigate to Appconsole >> Select App >> Permissions tab >> select Scope files.content.write Copy the scope files.content.write and add it to the field. Authorization URL Authorization Endpoint https://www.dropbox.com/oauth2/authorize Redirect URL Navigate to Appconsole >> Select App >> Settings tab >> OAuth2 >> Redirect URIs Add the Redirect URL from Appsmith to the field and click add button. {% hint style=\"info\" %} To create an application you can also follow the OAuth guide available at Dropbox. Keep the rest of the settings and click the Save and Authorize button. You\u2019ll be redirected to the datasource screen on Appsmith with the response status as success on successful authentication. {% hint style=\"info\" %} You can verify if your datasource verification has been successful by checking the response_status in the address bar of your browser. Upload Files \u00b6 A user will select the files by using a Filepicker widget. Whenever a user chooses a file and clicks upload, the button will trigger the API call for uploading the file. Here\u2019s a blueprint of interaction between Portal App and Dropbox: User selects a file and clicks on the upload button. The Upload API residing on Appsmith will be called. The Authenticated API talks to Dropbox APIs for authorization and generating a token. The token generated is added to the Upload API call. The upload request is executed on Dropbox to upload a file. Dropbox directory structure shows that the file is uploaded successfully. You can send the response all up to the Portal App to display the uploaded file or bind it to show a message to intimate users for a successful upload. Let\u2019s configure Authentication API to integrate with Dropbox and create the workflow for uploading files. {% embed url=\" https://youtu.be/RHhp5WaQV1g \" %} How to integrate with Dropbox? Create Query \u00b6 Navigate to Explorer \u2192 Click (+) next to Query/API \u2192 Select New <AuthenticatedAPIName> Query under Create Query. The action adds an API connected to the Datasource (AuthenticatedAPI) for Dropbox. You\u2019ll see that the User Endpoint you configured for the datasource is already available, along with the header details. There are two ways to add the headers to the APIs: Add Headers to Authenticated API \u00b6 You can add headers directly to the Authenticated API when you configure it. Here you can add the headers that are common across the APIs. For example, content type. Add Headers to API \u00b6 You can add headers to individual APIs when you add them to the platform. Here you can add headers that are specific to API. Add Widget \u00b6 Let\u2019s add a filepicker widget to canvas and configure it to trigger the Upload API call. Navigate to Widgets \u2192 search FilePicker in the search bar \u2192 Drag the widget onto the canvas. Select the FilePicker Widget and navigate to the onFilesSelected event available on the properties pane. Enable JS available next to the event Add the following code in the input box. {{UploadFileToDropbox.run() }} The above code snippet will trigger the API execution whenever from a FilePicker widget user selects a file and clicks on the Upload button available on the widget. {% hint style=\"info\" %} At any given point in time, you can add data to your headers by using the mustache {{}} sign. For example, FilePicker1.files[0].name for filename. Once the API call is successful, you can navigate to the Dropbox interface and verify the file upload. Integrate with Google Docs \u00b6 Let\u2019s look into some other integrations that you can do with Authenticated APIs . In this section, you\u2019ll be able to configure your Google Docs integrations to your Appsmith apps. User Endpoint \u00b6 You\u2019ll have to connect to a user endpoint on the Google Docs platform to perform API calls. Google Docs provide an exhaustive guide for integrating with Docs API . Configure Authenticate API \u00b6 Follow these steps to configure Google docs integration for an Authenticated API. {% embed url=\" https://youtu.be/ZO9rV9j2S9w \" %} How to integrate with Google Docs? Appsmith Google Docs Value URL User Endpoint https://docs.googleapis.com/ Authentication Type NA OAuth 2.0 Grant Type NA Authorization Code Access Token URL Token Endpoint https://oauth2.googleapis.com/toke n Client ID Navigate to Google API Console >> Select Your Project that has Google Docs API Enabled >> Select Google API Docs on API/Service Details >> Click on Client Credentials >> Select the OAuth 2.0 Client >> Copy Client ID Copy the Client ID and add in the Client ID field. Client Secret Navigate to Google API Console >> Select Your Project that has Google Docs API Enabled >> Select Google API Docs on API/Service Details >> Click on Client Credentials >> Select the OAuth 2.0 Client >> Copy Client Secret Copy the Client secret and add in the Client secret field. Scopes Navigate to Google API doc >>Click the API you are integrating with for example (create) >> on the right Panel >> Try this method >> scroll to the show scopes link >> click on the link to reveal the scopes required for the API. https://www.googleapis.com/auth/documents https://www.googleapis.com/auth/drive Authorization URL Authorization Endpoint https://accounts.google.com/o/oauth2/auth Redirect URL Navigate to Google API Console >> Select Your Project that has Google Docs API Enabled >> Select Google API Docs on API/Service Details >> Click on Client Credentials >> Select the OAuth 2.0 Client >>Authorized redirect URIs Add the Redirect URL from Appsmith to the field and click the save button. {% hint style=\"info\" %} You can follow the step-by-step guide provided by Google to set up an OAuth 2.0 Client . Keep the other settings as is and click Save & Authorize button to create the Authenticated API. You\u2019ll be asked to sign in to your Google account and authorize the datasource. Once successfully authenticated, you\u2019ll navigate to the Appsmith Datasource screen with response status available in the address bar. A response status as success marks the successful configuration of the datasource. Once the datasource is added, you can create queries and perform different actions with the google docs interface. {% hint style=\"info\" %} You can also check out the How-To Guide- How to add OAuth2 Authorization for Integrating Google Sheets into Appsmith. Integrate with Zoho Campaigns \u00b6 Let\u2019s look into another integration that you can do with Authenticated APIs . In this section, you\u2019ll be able to configure your Appsmith app to integrate with Zoho Campaigns. User Endpoint \u00b6 You\u2019ll have to connect to a user endpoint on the Zoho Campaigns platform to perform API calls. Zoho Campaigns provide an exhaustive developer guide for integrating with Campaign APIs . Configure Authenticated API \u00b6 Follow these steps to configure Zoho Campaigns' integration for an Authenticated API. {% embed url=\" https://youtu.be/ABN1SadqXk4 \" %} How to integrate with Zoho Campaigns? {% hint style=\"info\" %} The Zoho APIs are location-specific, i.e., if your organization is located in the United States of America (US), then the API endpoints you use should be specific to the .com domain. For example, https://campaigns.zoho.com/ will be used if your organization is located in the US. Whenever you configure the URL in the Authenticated API , verify the location of your organization . Appsmith Zoho Campaigns Value URL User Endpoint https://campaigns.zoho.in/api Authentication Type NA OAuth 2.0 Grant Type NA Authorization Cod e Access Token URL Token Endpoint https://accounts.zoho.in/oauth/v2/token Client ID Navigate to Zoho API Console >> Select Your Application >> Select Client Secret Tab>> Copy Client ID Add it to the Client ID field on Appsmith. Client Secret Navigate to Zoho API Console >> Select Your Application >> Select Client Secret Tab>> Copy Client Secret Add it to the Client secret field on Appsmith. Scopes Navigate to the Zoho Campaign guide and click on the API you want to integrate with and check the scope required. Zohocampaigns.campaign.ALL Authorization URL Authorization Endpoint https://accounts.zoho.in/oauth/v2/auth Redirect URL Navigate to Zoho API Console >> Select Your Application >> Select Client Details>> Authorized Redirect URIs Add the Redirect URL from Appsmith to the field and click the Update button. {% hint style=\"info\" %} You can follow the step-by-step guide provided by Zoho to Register the Client . Once you make changes to the above fields, click Save & Authorize button to create the Authenticated API. You\u2019ll be asked to authorize the datasource by signing into your Zoho Account. You\u2019ll be navigated to the Appsmith Datasource screen with a response status as success available in the address bar on successful authentication. Once the datasource is added, you can create queries and perform different actions with the Zoho Campaign interface. Additional Settings \u00b6 Apart from the required settings, there are some optional settings which have default values set, and you can change the configuration if the need be: Custom Authentication Parameters \u00b6 If your authorization server needs you to send some custom query parameters as part of access token request, you can add those here. You can add one or more parameters based on your needs. For example, your API needs a parameter showPrompt that is sent to authorization server and based on it your API logic either presents user with a prompt to take the consent or the prompt is not shown as the consent is already recorded. In such cases, you configure the showPrompt parameter as a custom parameter. Client Authentication \u00b6 If your APIs need client credentials to be sent along then you can use client authentication field. You can either choose to send the client credentials as part of: Basic authorization header by selecting Send as Basic Auth Header . Body in the form of client credentials by selecting Send client credentials in body . Advanced Settings \u00b6 There are some advance settings that you can configure as part of your Authenticated API . Send Scope with Refresh Token \u00b6 With this configuration you can choose to send the scope configured for the API along with a refresh token. By default, the setting is turned off. You can turn on the settings by selecting Yes . Send Client Credentials with (on Refresh Token) \u00b6 You can choose to send the client credentials along with refresh tokens by configuring this field. You can either choose to send the client credentials as part of header by selecting header , or as part of body by selecting body. With OAuth 2.0 integration, you can connect your APIs to Appsmith and build complex apps.","title":"Authorization Code"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#authorization-code","text":"An authorization code is a temporary code authorized by an authorization server. You can get an access token in exchange for an authorization code. Once you get an access token , you can use it to access the resources or perform actions on behalf of the user. In Appsmith, you can achieve this by setting up an Authenticated API and configuring it to use the Authorization Code as the grant type. {% embed url=\" https://youtu.be/YfdK3t2r5Co \" %} How to select an authorization code?","title":"Authorization Code"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#integrate-with-dropbox","text":"Let\u2019s take an example to understand the authorization code integration with Dropbox. You have a portal app built on Appsmith, and your app users use it to upload their profiles. You already have a backend application integrated with Dropbox and want to use Dropbox to store the profiles. To achieve this, you have to create an Authenticated API and configure it to connect with Dropbox.","title":"Integrate with Dropbox"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#user-endpoint","text":"You\u2019ll have to connect to a user endpoint on the Dropbox platform to perform API calls. Navigate to the exhaustive list of user endpoints used by Dropbox for different API calls. {% hint style=\"info\" %} Dropbox provides details on headers or the content type that you will have to add to your requests.","title":"User Endpoint"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#configure-authenticated-api","text":"For uploading files configure Authenticated API as per below table: Appsmith Dropbox Value URL User Endpoint https://content.dropboxapi.com/ Headers Dropbox-API-Arg {\"path\": \"/{{ < pick the file path from widget like`` FilePicker > }}\",\"mode\" : \"add\",\"autorename\" : true, \"mute\" : false,\"strict_conflict\" :false} Headers Content-Type application/octet-stream Authentication Type NA OAuth 2.0 Grant Type NA Authorization Code Access Token URL Token Endpoint https://api.dropboxapi.com/oauth2/token Client ID Navigate to Appconsole >> Select App >> Settings tab >> App key Copy the App key and add in the Client ID field. Client Secret Navigate to Appconsole >> Select App >> Settings tab >> App secret Copy the App secret and add in the Client secret field. Scopes Navigate to Appconsole >> Select App >> Permissions tab >> select Scope files.content.write Copy the scope files.content.write and add it to the field. Authorization URL Authorization Endpoint https://www.dropbox.com/oauth2/authorize Redirect URL Navigate to Appconsole >> Select App >> Settings tab >> OAuth2 >> Redirect URIs Add the Redirect URL from Appsmith to the field and click add button. {% hint style=\"info\" %} To create an application you can also follow the OAuth guide available at Dropbox. Keep the rest of the settings and click the Save and Authorize button. You\u2019ll be redirected to the datasource screen on Appsmith with the response status as success on successful authentication. {% hint style=\"info\" %} You can verify if your datasource verification has been successful by checking the response_status in the address bar of your browser.","title":"Configure Authenticated API"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#upload-files","text":"A user will select the files by using a Filepicker widget. Whenever a user chooses a file and clicks upload, the button will trigger the API call for uploading the file. Here\u2019s a blueprint of interaction between Portal App and Dropbox: User selects a file and clicks on the upload button. The Upload API residing on Appsmith will be called. The Authenticated API talks to Dropbox APIs for authorization and generating a token. The token generated is added to the Upload API call. The upload request is executed on Dropbox to upload a file. Dropbox directory structure shows that the file is uploaded successfully. You can send the response all up to the Portal App to display the uploaded file or bind it to show a message to intimate users for a successful upload. Let\u2019s configure Authentication API to integrate with Dropbox and create the workflow for uploading files. {% embed url=\" https://youtu.be/RHhp5WaQV1g \" %} How to integrate with Dropbox?","title":"Upload Files"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#create-query","text":"Navigate to Explorer \u2192 Click (+) next to Query/API \u2192 Select New <AuthenticatedAPIName> Query under Create Query. The action adds an API connected to the Datasource (AuthenticatedAPI) for Dropbox. You\u2019ll see that the User Endpoint you configured for the datasource is already available, along with the header details. There are two ways to add the headers to the APIs:","title":"Create Query"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#add-headers-to-authenticated-api","text":"You can add headers directly to the Authenticated API when you configure it. Here you can add the headers that are common across the APIs. For example, content type.","title":"Add Headers to Authenticated API"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#add-headers-to-api","text":"You can add headers to individual APIs when you add them to the platform. Here you can add headers that are specific to API.","title":"Add Headers to API"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#add-widget","text":"Let\u2019s add a filepicker widget to canvas and configure it to trigger the Upload API call. Navigate to Widgets \u2192 search FilePicker in the search bar \u2192 Drag the widget onto the canvas. Select the FilePicker Widget and navigate to the onFilesSelected event available on the properties pane. Enable JS available next to the event Add the following code in the input box. {{UploadFileToDropbox.run() }} The above code snippet will trigger the API execution whenever from a FilePicker widget user selects a file and clicks on the Upload button available on the widget. {% hint style=\"info\" %} At any given point in time, you can add data to your headers by using the mustache {{}} sign. For example, FilePicker1.files[0].name for filename. Once the API call is successful, you can navigate to the Dropbox interface and verify the file upload.","title":"Add Widget"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#integrate-with-google-docs","text":"Let\u2019s look into some other integrations that you can do with Authenticated APIs . In this section, you\u2019ll be able to configure your Google Docs integrations to your Appsmith apps.","title":"Integrate with Google Docs"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#user-endpoint_1","text":"You\u2019ll have to connect to a user endpoint on the Google Docs platform to perform API calls. Google Docs provide an exhaustive guide for integrating with Docs API .","title":"User Endpoint"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#configure-authenticate-api","text":"Follow these steps to configure Google docs integration for an Authenticated API. {% embed url=\" https://youtu.be/ZO9rV9j2S9w \" %} How to integrate with Google Docs? Appsmith Google Docs Value URL User Endpoint https://docs.googleapis.com/ Authentication Type NA OAuth 2.0 Grant Type NA Authorization Code Access Token URL Token Endpoint https://oauth2.googleapis.com/toke n Client ID Navigate to Google API Console >> Select Your Project that has Google Docs API Enabled >> Select Google API Docs on API/Service Details >> Click on Client Credentials >> Select the OAuth 2.0 Client >> Copy Client ID Copy the Client ID and add in the Client ID field. Client Secret Navigate to Google API Console >> Select Your Project that has Google Docs API Enabled >> Select Google API Docs on API/Service Details >> Click on Client Credentials >> Select the OAuth 2.0 Client >> Copy Client Secret Copy the Client secret and add in the Client secret field. Scopes Navigate to Google API doc >>Click the API you are integrating with for example (create) >> on the right Panel >> Try this method >> scroll to the show scopes link >> click on the link to reveal the scopes required for the API. https://www.googleapis.com/auth/documents https://www.googleapis.com/auth/drive Authorization URL Authorization Endpoint https://accounts.google.com/o/oauth2/auth Redirect URL Navigate to Google API Console >> Select Your Project that has Google Docs API Enabled >> Select Google API Docs on API/Service Details >> Click on Client Credentials >> Select the OAuth 2.0 Client >>Authorized redirect URIs Add the Redirect URL from Appsmith to the field and click the save button. {% hint style=\"info\" %} You can follow the step-by-step guide provided by Google to set up an OAuth 2.0 Client . Keep the other settings as is and click Save & Authorize button to create the Authenticated API. You\u2019ll be asked to sign in to your Google account and authorize the datasource. Once successfully authenticated, you\u2019ll navigate to the Appsmith Datasource screen with response status available in the address bar. A response status as success marks the successful configuration of the datasource. Once the datasource is added, you can create queries and perform different actions with the google docs interface. {% hint style=\"info\" %} You can also check out the How-To Guide- How to add OAuth2 Authorization for Integrating Google Sheets into Appsmith.","title":"Configure Authenticate API"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#integrate-with-zoho-campaigns","text":"Let\u2019s look into another integration that you can do with Authenticated APIs . In this section, you\u2019ll be able to configure your Appsmith app to integrate with Zoho Campaigns.","title":"Integrate with Zoho Campaigns"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#user-endpoint_2","text":"You\u2019ll have to connect to a user endpoint on the Zoho Campaigns platform to perform API calls. Zoho Campaigns provide an exhaustive developer guide for integrating with Campaign APIs .","title":"User Endpoint"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#configure-authenticated-api_1","text":"Follow these steps to configure Zoho Campaigns' integration for an Authenticated API. {% embed url=\" https://youtu.be/ABN1SadqXk4 \" %} How to integrate with Zoho Campaigns? {% hint style=\"info\" %} The Zoho APIs are location-specific, i.e., if your organization is located in the United States of America (US), then the API endpoints you use should be specific to the .com domain. For example, https://campaigns.zoho.com/ will be used if your organization is located in the US. Whenever you configure the URL in the Authenticated API , verify the location of your organization . Appsmith Zoho Campaigns Value URL User Endpoint https://campaigns.zoho.in/api Authentication Type NA OAuth 2.0 Grant Type NA Authorization Cod e Access Token URL Token Endpoint https://accounts.zoho.in/oauth/v2/token Client ID Navigate to Zoho API Console >> Select Your Application >> Select Client Secret Tab>> Copy Client ID Add it to the Client ID field on Appsmith. Client Secret Navigate to Zoho API Console >> Select Your Application >> Select Client Secret Tab>> Copy Client Secret Add it to the Client secret field on Appsmith. Scopes Navigate to the Zoho Campaign guide and click on the API you want to integrate with and check the scope required. Zohocampaigns.campaign.ALL Authorization URL Authorization Endpoint https://accounts.zoho.in/oauth/v2/auth Redirect URL Navigate to Zoho API Console >> Select Your Application >> Select Client Details>> Authorized Redirect URIs Add the Redirect URL from Appsmith to the field and click the Update button. {% hint style=\"info\" %} You can follow the step-by-step guide provided by Zoho to Register the Client . Once you make changes to the above fields, click Save & Authorize button to create the Authenticated API. You\u2019ll be asked to authorize the datasource by signing into your Zoho Account. You\u2019ll be navigated to the Appsmith Datasource screen with a response status as success available in the address bar on successful authentication. Once the datasource is added, you can create queries and perform different actions with the Zoho Campaign interface.","title":"Configure Authenticated API"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#additional-settings","text":"Apart from the required settings, there are some optional settings which have default values set, and you can change the configuration if the need be:","title":"Additional Settings"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#custom-authentication-parameters","text":"If your authorization server needs you to send some custom query parameters as part of access token request, you can add those here. You can add one or more parameters based on your needs. For example, your API needs a parameter showPrompt that is sent to authorization server and based on it your API logic either presents user with a prompt to take the consent or the prompt is not shown as the consent is already recorded. In such cases, you configure the showPrompt parameter as a custom parameter.","title":"Custom Authentication Parameters"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#client-authentication","text":"If your APIs need client credentials to be sent along then you can use client authentication field. You can either choose to send the client credentials as part of: Basic authorization header by selecting Send as Basic Auth Header . Body in the form of client credentials by selecting Send client credentials in body .","title":"Client Authentication"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#advanced-settings","text":"There are some advance settings that you can configure as part of your Authenticated API .","title":"Advanced Settings"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#send-scope-with-refresh-token","text":"With this configuration you can choose to send the scope configured for the API along with a refresh token. By default, the setting is turned off. You can turn on the settings by selecting Yes .","title":"Send Scope with Refresh Token"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code/#send-client-credentials-with-on-refresh-token","text":"You can choose to send the client credentials along with refresh tokens by configuring this field. You can either choose to send the client credentials as part of header by selecting header , or as part of body by selecting body. With OAuth 2.0 integration, you can connect your APIs to Appsmith and build complex apps.","title":"Send Client Credentials with (on Refresh Token)"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/client-credentials/","text":"Client Credentials \u00b6 The client credentials grant is typically used for server-to-server communication. This means that this type of data source will not require intervention from the user once configured. Appsmith safely encrypts your credentials and reuses these credentials for all the API requests made using this data source. The fields relevant to this grant type are as follows: Add Access Token To : This field configures the field in which the access token information will be sent in the API request. (Query parameter or Header). Header Prefix : In case of sending the access token as an Authorization header, you can configure the prefix to be used using this field. Access Token URL : This is the endpoint on the authentication server that Appsmith should hit to exchange the authorization code for an Access Token. Client ID : The client identifier issued to the client during the application registration process Client Secret : The client secret issued to the client during the application registration process. This field is encrypted and stored in the Appsmith database. To avoid any security threats over the network, Appsmith does not allow users to view the client secret after the data source is saved. Scope(s) : The scope of the access request. It may have multiple comma-separated values. {% hint style=\"warning\" %} In case you feel like there may have been a data breach in your infrastructure, you can simply invalidate your client credentials at the authorization server to immediately revoke Appsmith's access to your resources.","title":"Client Credentials"},{"location":"Core%20Concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/client-credentials/#client-credentials","text":"The client credentials grant is typically used for server-to-server communication. This means that this type of data source will not require intervention from the user once configured. Appsmith safely encrypts your credentials and reuses these credentials for all the API requests made using this data source. The fields relevant to this grant type are as follows: Add Access Token To : This field configures the field in which the access token information will be sent in the API request. (Query parameter or Header). Header Prefix : In case of sending the access token as an Authorization header, you can configure the prefix to be used using this field. Access Token URL : This is the endpoint on the authentication server that Appsmith should hit to exchange the authorization code for an Access Token. Client ID : The client identifier issued to the client during the application registration process Client Secret : The client secret issued to the client during the application registration process. This field is encrypted and stored in the Appsmith database. To avoid any security threats over the network, Appsmith does not allow users to view the client secret after the data source is saved. Scope(s) : The scope of the access request. It may have multiple comma-separated values. {% hint style=\"warning\" %} In case you feel like there may have been a data breach in your infrastructure, you can simply invalidate your client credentials at the authorization server to immediately revoke Appsmith's access to your resources.","title":"Client Credentials"},{"location":"Core%20Concepts/data-access-and-binding/","text":"Data Access and Binding \u00b6 This section covers retrieving data from the connected datasource by writing queries and establishing a connection between the UI and the data. Data binding facilitates displaying information in widgets and writing data back to the datasource. {% content-ref url=\"querying-a-database/\" %} querying-a-database {% content-ref url=\"displaying-data-read/\" %} displaying-data-read {% content-ref url=\"capturing-data-write/\" %} capturing-data-write","title":"Data Access and Binding"},{"location":"Core%20Concepts/data-access-and-binding/#data-access-and-binding","text":"This section covers retrieving data from the connected datasource by writing queries and establishing a connection between the UI and the data. Data binding facilitates displaying information in widgets and writing data back to the datasource. {% content-ref url=\"querying-a-database/\" %} querying-a-database {% content-ref url=\"displaying-data-read/\" %} displaying-data-read {% content-ref url=\"capturing-data-write/\" %} capturing-data-write","title":"Data Access and Binding"},{"location":"Core%20Concepts/data-access-and-binding/capturing-data-write/","text":"Capturing Data (Write) \u00b6 This document presumes you have successfully connected to a data source and have a Query that can insert/update/delete data. You should also have gone through the basics of using widgets . The following widgets can be used to capture user inputs in an application Checkbox Datepicker Filepicker Form Input Maps Radio Group Rich Text Editor Select Switch Widgets store their user input in an internal property that can be referenced using javascript. Example SQL \u00b6 INSERT INTO users (\"name\", \"createdAt\", \"gender\") VALUES ({{nameInput.text}}, {{moment().format(\"YYYY-MM-DD\")}}, {{genderDropdown.selectedOptionValue}}); Example Post Body { \"name\": {{nameInput.text}}, \"createdDate\": {{moment().format('YYYY-MM-DD')}}, \"gender\": {{genderDropdown.selectedOptionValue}} } In the examples above, text is the internal property of the nameInput widget while selectedOptionValue is the internal property of the genderDropdown widget. The createdDate key is populated with the value of the current date using the moment.js library Triggering Updates \u00b6 Since write operations are more expensive, the Query should be triggered once all the user data is captured. To do this, we can make use of a Button widget and configure the Query to run in the onClick of the button . The property pane has an action section where all the interactions that a user can perform with a widget are listed. We can configure the action to be taken when the interaction takes place in this section. To configure the Query we want to call when a button is clicked, we can select the action in the onClick dropdown.","title":"Capturing Data (Write)"},{"location":"Core%20Concepts/data-access-and-binding/capturing-data-write/#capturing-data-write","text":"This document presumes you have successfully connected to a data source and have a Query that can insert/update/delete data. You should also have gone through the basics of using widgets . The following widgets can be used to capture user inputs in an application Checkbox Datepicker Filepicker Form Input Maps Radio Group Rich Text Editor Select Switch Widgets store their user input in an internal property that can be referenced using javascript.","title":"Capturing Data (Write)"},{"location":"Core%20Concepts/data-access-and-binding/capturing-data-write/#example-sql","text":"INSERT INTO users (\"name\", \"createdAt\", \"gender\") VALUES ({{nameInput.text}}, {{moment().format(\"YYYY-MM-DD\")}}, {{genderDropdown.selectedOptionValue}}); Example Post Body { \"name\": {{nameInput.text}}, \"createdDate\": {{moment().format('YYYY-MM-DD')}}, \"gender\": {{genderDropdown.selectedOptionValue}} } In the examples above, text is the internal property of the nameInput widget while selectedOptionValue is the internal property of the genderDropdown widget. The createdDate key is populated with the value of the current date using the moment.js library","title":"Example SQL"},{"location":"Core%20Concepts/data-access-and-binding/capturing-data-write/#triggering-updates","text":"Since write operations are more expensive, the Query should be triggered once all the user data is captured. To do this, we can make use of a Button widget and configure the Query to run in the onClick of the button . The property pane has an action section where all the interactions that a user can perform with a widget are listed. We can configure the action to be taken when the interaction takes place in this section. To configure the Query we want to call when a button is clicked, we can select the action in the onClick dropdown.","title":"Triggering Updates"},{"location":"Core%20Concepts/data-access-and-binding/capturing-data-write/capture-form-data/","text":"Capture Form Data \u00b6 The Form widget is a special type of container used to build validated forms. Multiple widgets can be dragged inside the form widget to capture data. The form widget comes with a form button pre-configured. The form button is disabled if Any of the required fields inside the form are not filled The form contains an input whose value does not match the regex configured Submitting Form Data \u00b6 Form data can be submitted using a PUT / POST API or an Insert / Update Query. To submit form data, Bind the onClick of the form button to call the API / Query Configure onSuccess to Display a success message Configure the API / Query to read the inputs from the form widgets using Javascript. {% hint style=\"warning\" %} Widgets inside a form are automatically reset to their default values when the Form Button onClick succeeds. This can be disabled in the button properties Displaying Submitted Data \u00b6 Once the API / Query updates the data, the widgets on the screen need to be updated with new data as well. The best way to achieve this is to simply re-fetch the data from the API / Query rather than trying to append the data to the existing data set. This can be done in the onSuccess of the API / Query. {% hint style=\"warning\" %} The Property Pane UI supports a single onSuccess Callback but multiple callbacks and conditions can be configured by clicking the JS button next to the property. Learn more about Creating Workflows Posting URL Encoded Form Data \u00b6 The encoding type can be selected via the Body dropdown on the API editor. Selecting the value application/x-www-form-urlencoded will auto encoded the value sent in the body field.","title":"Capture Form Data"},{"location":"Core%20Concepts/data-access-and-binding/capturing-data-write/capture-form-data/#capture-form-data","text":"The Form widget is a special type of container used to build validated forms. Multiple widgets can be dragged inside the form widget to capture data. The form widget comes with a form button pre-configured. The form button is disabled if Any of the required fields inside the form are not filled The form contains an input whose value does not match the regex configured","title":"Capture Form Data"},{"location":"Core%20Concepts/data-access-and-binding/capturing-data-write/capture-form-data/#submitting-form-data","text":"Form data can be submitted using a PUT / POST API or an Insert / Update Query. To submit form data, Bind the onClick of the form button to call the API / Query Configure onSuccess to Display a success message Configure the API / Query to read the inputs from the form widgets using Javascript. {% hint style=\"warning\" %} Widgets inside a form are automatically reset to their default values when the Form Button onClick succeeds. This can be disabled in the button properties","title":"Submitting Form Data"},{"location":"Core%20Concepts/data-access-and-binding/capturing-data-write/capture-form-data/#displaying-submitted-data","text":"Once the API / Query updates the data, the widgets on the screen need to be updated with new data as well. The best way to achieve this is to simply re-fetch the data from the API / Query rather than trying to append the data to the existing data set. This can be done in the onSuccess of the API / Query. {% hint style=\"warning\" %} The Property Pane UI supports a single onSuccess Callback but multiple callbacks and conditions can be configured by clicking the JS button next to the property. Learn more about Creating Workflows","title":"Displaying Submitted Data"},{"location":"Core%20Concepts/data-access-and-binding/capturing-data-write/capture-form-data/#posting-url-encoded-form-data","text":"The encoding type can be selected via the Body dropdown on the API editor. Selecting the value application/x-www-form-urlencoded will auto encoded the value sent in the body field.","title":"Posting URL Encoded Form Data"},{"location":"Core%20Concepts/data-access-and-binding/displaying-data-read/","text":"Displaying Data (Read) \u00b6 This document presumes you have successfully connected to a data source and have a Query that fetches data. Displaying Data in a widget \u00b6 Widget properties can be edited via the property pane which is opened using the top-right icon (Edit Widget Properties). Data from a Query can be set in a widget property by referencing the name (unique identifier) of the Query. {% hint style=\"success\" %} Appsmith is Reactive so the widgets are automatically updated whenever the data in the Query changes For example, you can bind the results of the Query as below {{ fetch_users.data.users }} {% hint style=\"warning\" %} Each widget property has a specific data type that it validates its value against. If the data type mismatches, it will throw an error. This can be fixed using javascript to transform the value of the property Transforming Data \u00b6 You can use Javascript inside to transform Query data when binding it to a property. Let us take an example of a Query that returns an array of objects that need to be populated in a dropdown . Directly binding the data will lead to an error as shown below A dropdown needs an Array\\ in its option field, so to connect this data to a dropdown, we need to transform the data in the dropdown options property. Example Query Data [ { \"id\": 1, \"name\": \"test\", \"status\": \"APPROVED\", \"gender\": \"\", \"avatar\": \"https://robohash.org/sednecessitatibuset.png?size=100x100&set=set1\", \"email\": \"barty.crouch@gmail.com\", \"address\": \"St Petersberg #911 4th main\", \"createdAt\": \"2020-03-16T18:00:05.000Z\", \"updatedAt\": \"2020-08-12T17:29:31.980Z\" }, { \"id\": 2, \"name\": \"Jenelle Kibbys\", \"status\": \"APPROVED\", \"gender\": \"Female\", \"avatar\": \"https://robohash.org/quiaasperiorespariatur.bmp?size=100x100&set=set1\", \"email\": \"jkibby1@hp.com\", \"address\": \"85 Tennessee Plaza\", \"createdAt\": \"2019-10-04T03:22:23.000Z\", \"updatedAt\": \"2019-09-11T20:18:38.000Z\" }, { \"id\": 3, \"name\": \"Demetre\", \"status\": \"APPROVED\", \"gender\": \"Male\", \"avatar\": \"https://robohash.org/iustooptiocum.jpg?size=100x100&set=set1\", \"email\": \"aaaa@bbb.com\", \"address\": \"262 Saint Paul Park\", \"createdAt\": \"2020-05-01T17:30:50.000Z\", \"updatedAt\": \"2019-10-08T14:55:53.000Z\" } ] Transformation Code The following example iterates over a data set and returns data in an Array<label, value> format {{ QueryName.data.map((row) => { return { label: row.name, value: row.id }; }); }}","title":"Displaying Data (Read)"},{"location":"Core%20Concepts/data-access-and-binding/displaying-data-read/#displaying-data-read","text":"This document presumes you have successfully connected to a data source and have a Query that fetches data.","title":"Displaying Data (Read)"},{"location":"Core%20Concepts/data-access-and-binding/displaying-data-read/#displaying-data-in-a-widget","text":"Widget properties can be edited via the property pane which is opened using the top-right icon (Edit Widget Properties). Data from a Query can be set in a widget property by referencing the name (unique identifier) of the Query. {% hint style=\"success\" %} Appsmith is Reactive so the widgets are automatically updated whenever the data in the Query changes For example, you can bind the results of the Query as below {{ fetch_users.data.users }} {% hint style=\"warning\" %} Each widget property has a specific data type that it validates its value against. If the data type mismatches, it will throw an error. This can be fixed using javascript to transform the value of the property","title":"Displaying Data in a widget"},{"location":"Core%20Concepts/data-access-and-binding/displaying-data-read/#transforming-data","text":"You can use Javascript inside to transform Query data when binding it to a property. Let us take an example of a Query that returns an array of objects that need to be populated in a dropdown . Directly binding the data will lead to an error as shown below A dropdown needs an Array\\ in its option field, so to connect this data to a dropdown, we need to transform the data in the dropdown options property. Example Query Data [ { \"id\": 1, \"name\": \"test\", \"status\": \"APPROVED\", \"gender\": \"\", \"avatar\": \"https://robohash.org/sednecessitatibuset.png?size=100x100&set=set1\", \"email\": \"barty.crouch@gmail.com\", \"address\": \"St Petersberg #911 4th main\", \"createdAt\": \"2020-03-16T18:00:05.000Z\", \"updatedAt\": \"2020-08-12T17:29:31.980Z\" }, { \"id\": 2, \"name\": \"Jenelle Kibbys\", \"status\": \"APPROVED\", \"gender\": \"Female\", \"avatar\": \"https://robohash.org/quiaasperiorespariatur.bmp?size=100x100&set=set1\", \"email\": \"jkibby1@hp.com\", \"address\": \"85 Tennessee Plaza\", \"createdAt\": \"2019-10-04T03:22:23.000Z\", \"updatedAt\": \"2019-09-11T20:18:38.000Z\" }, { \"id\": 3, \"name\": \"Demetre\", \"status\": \"APPROVED\", \"gender\": \"Male\", \"avatar\": \"https://robohash.org/iustooptiocum.jpg?size=100x100&set=set1\", \"email\": \"aaaa@bbb.com\", \"address\": \"262 Saint Paul Park\", \"createdAt\": \"2020-05-01T17:30:50.000Z\", \"updatedAt\": \"2019-10-08T14:55:53.000Z\" } ] Transformation Code The following example iterates over a data set and returns data in an Array<label, value> format {{ QueryName.data.map((row) => { return { label: row.name, value: row.id }; }); }}","title":"Transforming Data"},{"location":"Core%20Concepts/data-access-and-binding/displaying-data-read/display-data-tables/","text":"Display Data in Tables \u00b6 The Table Widget helps us visualize rows of information that are returned from our data sources. We make use of the Table Data property to display data in the table. Pagination \u00b6 Tables are generally required to display large data sets from Queries and APIs yet browsers cannot load all the data present in our database. To paginate this data, we can: Enable the server-side pagination property in the table Call the API / Query onPageChange Configure pagination in the API / Query Offset Based Pagination \u00b6 This method uses the Table's page number to determine the offset of the records to fetch from the database. This method relies on the pageNo and pageSize fields of the Table and is used in both APIs and Queries. The pageNo and pageSize can be used in the API / Query by referencing them inside {{ }} select * from users limit {{ Table1.pageSize }} offset {{ (Table1.pageNo - 1) * Table1.pageSize }} https://mock-api.appsmith.com/users?page={{Table1.pageNo}} Key Based Pagination \u00b6 This method uses a value in the response of the API as the key to the next API call. This can be configured in the API settings by providing the Next & Previous URLs that the API should execute onPageChange. Server-Side Searching / Filtering \u00b6 Tables come with client-side searching, and filtering out of the box. To perform these operations server-side , we have to pass these values to the API / Query. Searching \u00b6 Call the API / Query onSearchTextChange from the Table Pass the value of the Table's searchText to the API / Query select * from users where name ilike {{\"%\" + Table1.searchText + \"%\"}} https://mock-api.appsmith.com/users?name={{Table1.searchText}} Filtering \u00b6 Server-side filtering requires us to use another widget like a dropdown which can provide users a list of filters that our APIs support. Drag a dropdown and populate it with filter values Call the API / Query onOptionChange from the Table Pass the value of the Dropdown's selectedOptionValue to the API / Query select * from users where gender = {{genderDropdown.selectedOptionValue}} https://mock-api.appsmith.com/users?gender={{genderDropdown.selectedOptionValue}} Transforming Table Data \u00b6 Some API / Query responses might have nested, unnecessary, or poorly formatted fields. These can be easily transformed inside the table data property by mapping over the data using javascript. Example Github API \u00b6 https://api.github.com/repos/appsmithorg/appsmith/issues Binding this APIs response directly to a table would be unreadable like the image below To format this data, we can simply write a map function over the API response and return an array of objects with only the fields we want to display. We can also format these fields how we'd like using javascript {{ fetch_issues.data.map((issue) => { return { user: issue.user.login, assignees: issue.assignees.map((assignee) => assignee.login).join(\",\"), title: issue.title, number: \"#\" + issue.number, }; }); }}","title":"Display Data in Tables"},{"location":"Core%20Concepts/data-access-and-binding/displaying-data-read/display-data-tables/#display-data-in-tables","text":"The Table Widget helps us visualize rows of information that are returned from our data sources. We make use of the Table Data property to display data in the table.","title":"Display Data in Tables"},{"location":"Core%20Concepts/data-access-and-binding/displaying-data-read/display-data-tables/#pagination","text":"Tables are generally required to display large data sets from Queries and APIs yet browsers cannot load all the data present in our database. To paginate this data, we can: Enable the server-side pagination property in the table Call the API / Query onPageChange Configure pagination in the API / Query","title":"Pagination"},{"location":"Core%20Concepts/data-access-and-binding/displaying-data-read/display-data-tables/#offset-based-pagination","text":"This method uses the Table's page number to determine the offset of the records to fetch from the database. This method relies on the pageNo and pageSize fields of the Table and is used in both APIs and Queries. The pageNo and pageSize can be used in the API / Query by referencing them inside {{ }} select * from users limit {{ Table1.pageSize }} offset {{ (Table1.pageNo - 1) * Table1.pageSize }} https://mock-api.appsmith.com/users?page={{Table1.pageNo}}","title":"Offset Based Pagination"},{"location":"Core%20Concepts/data-access-and-binding/displaying-data-read/display-data-tables/#key-based-pagination","text":"This method uses a value in the response of the API as the key to the next API call. This can be configured in the API settings by providing the Next & Previous URLs that the API should execute onPageChange.","title":"Key Based Pagination"},{"location":"Core%20Concepts/data-access-and-binding/displaying-data-read/display-data-tables/#server-side-searching-filtering","text":"Tables come with client-side searching, and filtering out of the box. To perform these operations server-side , we have to pass these values to the API / Query.","title":"Server-Side Searching / Filtering"},{"location":"Core%20Concepts/data-access-and-binding/displaying-data-read/display-data-tables/#searching","text":"Call the API / Query onSearchTextChange from the Table Pass the value of the Table's searchText to the API / Query select * from users where name ilike {{\"%\" + Table1.searchText + \"%\"}} https://mock-api.appsmith.com/users?name={{Table1.searchText}}","title":"Searching"},{"location":"Core%20Concepts/data-access-and-binding/displaying-data-read/display-data-tables/#filtering","text":"Server-side filtering requires us to use another widget like a dropdown which can provide users a list of filters that our APIs support. Drag a dropdown and populate it with filter values Call the API / Query onOptionChange from the Table Pass the value of the Dropdown's selectedOptionValue to the API / Query select * from users where gender = {{genderDropdown.selectedOptionValue}} https://mock-api.appsmith.com/users?gender={{genderDropdown.selectedOptionValue}}","title":"Filtering"},{"location":"Core%20Concepts/data-access-and-binding/displaying-data-read/display-data-tables/#transforming-table-data","text":"Some API / Query responses might have nested, unnecessary, or poorly formatted fields. These can be easily transformed inside the table data property by mapping over the data using javascript.","title":"Transforming Table Data"},{"location":"Core%20Concepts/data-access-and-binding/displaying-data-read/display-data-tables/#example-github-api","text":"https://api.github.com/repos/appsmithorg/appsmith/issues Binding this APIs response directly to a table would be unreadable like the image below To format this data, we can simply write a map function over the API response and return an array of objects with only the fields we want to display. We can also format these fields how we'd like using javascript {{ fetch_issues.data.map((issue) => { return { user: issue.user.login, assignees: issue.assignees.map((assignee) => assignee.login).join(\",\"), title: issue.title, number: \"#\" + issue.number, }; }); }}","title":"Example Github API"},{"location":"Core%20Concepts/data-access-and-binding/querying-a-database/","text":"Queries \u00b6 The information you want to present in any application is typically spread over numerous tables in a well-designed database. A query can collect data from different tables/ documents and pull it together for display. You can either request data from your database or manipulate the data, or both. {% hint style=\"info\" %} To write and execute queries, you should understand the basics of connecting to a Database or Connecting to an API . A query can insert, update, or remove data from a database, conduct calculations, integrate data from other databases, and much more. {% hint style=\"info\" %} APIs , Database Queries , and Integrations to perform CRUD operations on data are collectively termed Queries in Appsmith**.** You can create queries to manipulate data from a datasource using the Appsmith query editor. {% hint style=\"info\" %} By default, the prepared statement is enabled for all queries. Prepared statements provide a secure way of executing your queries. You can read How to Use Prepared Statements for efficient and secure data transactions. Setting up a Query \u00b6 Go to the page where you wish to run the query. Follow the below steps to set up a query using a query editor: {% hint style=\"success\" %} Queries are auto-saved , so you never lose your work. These changes will be reflected in your published application only after you deploy. {% embed url=\" https://youtu.be/N6zRxIVSGfk \" %} How to set up a Query? Go to Datasources \u2192 + to create a new query or select an existing datasource to which you wish to add a query. {% hint style=\"info\" %} You can follow the steps detailed in Datasources to add a new datasource . Choose the connected datasource and click + New Query. You will be taken to the query editor to configure the query. You can also choose to add a new query by navigating to Explorer >> Scroll down to Queries/JS >> Click plus ( + ) sign >> Select the name <DATASOURCE_NAME> Query (users query) {% hint style=\"info\" %} You can configure your API(s) using a REST interface . {% hint style=\"danger\" %} The query is created with a default name . It\u2019s recommended that you rename it for readability and access . Write your query in the syntax that is valid for your database type . Bind your query to the widget and carry out data manipulations. {% hint style=\"warning\" %} A query and its results can be accessed from only the page it is a part of. To use a query on another page, click the context menu next to the query name and clone it. Naming a Query \u00b6 A query must have a unique and meaningful name that acts as an identifier . It is used to access the query results. In that sense, a name is like a variable in a programming language. You can access the various properties of the query and its data using the query name . {% hint style=\"warning\" %} Note that JavaScript keywords and the window object methods and properties are not valid as query names. Running a Query \u00b6 Click on the Run button or hit cmd + enter to execute a query. You'll see the results in the Response tab if the query succeeds. {% embed url=\" https://youtu.be/0xA7ChO7Rlk \" %} How to run a query? All query results are stored in the data property of the query object . It is immutable and cannot be changed. You can access it using JavaScript, as shown in the code snippet below: {{ Query1.data }} {% hint style=\"info\" %} DB Queries fetch data in the form of an array of objects where each object is a row , and each key in the object is a column . All API Queries return the exact API response of the endpoint. Using Queries in applications \u00b6 Once you have successfully run a Query, you can use it in your application to Display Data Capture Data","title":"Queries"},{"location":"Core%20Concepts/data-access-and-binding/querying-a-database/#queries","text":"The information you want to present in any application is typically spread over numerous tables in a well-designed database. A query can collect data from different tables/ documents and pull it together for display. You can either request data from your database or manipulate the data, or both. {% hint style=\"info\" %} To write and execute queries, you should understand the basics of connecting to a Database or Connecting to an API . A query can insert, update, or remove data from a database, conduct calculations, integrate data from other databases, and much more. {% hint style=\"info\" %} APIs , Database Queries , and Integrations to perform CRUD operations on data are collectively termed Queries in Appsmith**.** You can create queries to manipulate data from a datasource using the Appsmith query editor. {% hint style=\"info\" %} By default, the prepared statement is enabled for all queries. Prepared statements provide a secure way of executing your queries. You can read How to Use Prepared Statements for efficient and secure data transactions.","title":"Queries"},{"location":"Core%20Concepts/data-access-and-binding/querying-a-database/#setting-up-a-query","text":"Go to the page where you wish to run the query. Follow the below steps to set up a query using a query editor: {% hint style=\"success\" %} Queries are auto-saved , so you never lose your work. These changes will be reflected in your published application only after you deploy. {% embed url=\" https://youtu.be/N6zRxIVSGfk \" %} How to set up a Query? Go to Datasources \u2192 + to create a new query or select an existing datasource to which you wish to add a query. {% hint style=\"info\" %} You can follow the steps detailed in Datasources to add a new datasource . Choose the connected datasource and click + New Query. You will be taken to the query editor to configure the query. You can also choose to add a new query by navigating to Explorer >> Scroll down to Queries/JS >> Click plus ( + ) sign >> Select the name <DATASOURCE_NAME> Query (users query) {% hint style=\"info\" %} You can configure your API(s) using a REST interface . {% hint style=\"danger\" %} The query is created with a default name . It\u2019s recommended that you rename it for readability and access . Write your query in the syntax that is valid for your database type . Bind your query to the widget and carry out data manipulations. {% hint style=\"warning\" %} A query and its results can be accessed from only the page it is a part of. To use a query on another page, click the context menu next to the query name and clone it.","title":"Setting up a Query"},{"location":"Core%20Concepts/data-access-and-binding/querying-a-database/#naming-a-query","text":"A query must have a unique and meaningful name that acts as an identifier . It is used to access the query results. In that sense, a name is like a variable in a programming language. You can access the various properties of the query and its data using the query name . {% hint style=\"warning\" %} Note that JavaScript keywords and the window object methods and properties are not valid as query names.","title":"Naming a Query"},{"location":"Core%20Concepts/data-access-and-binding/querying-a-database/#running-a-query","text":"Click on the Run button or hit cmd + enter to execute a query. You'll see the results in the Response tab if the query succeeds. {% embed url=\" https://youtu.be/0xA7ChO7Rlk \" %} How to run a query? All query results are stored in the data property of the query object . It is immutable and cannot be changed. You can access it using JavaScript, as shown in the code snippet below: {{ Query1.data }} {% hint style=\"info\" %} DB Queries fetch data in the form of an array of objects where each object is a row , and each key in the object is a column . All API Queries return the exact API response of the endpoint.","title":"Running a Query"},{"location":"Core%20Concepts/data-access-and-binding/querying-a-database/#using-queries-in-applications","text":"Once you have successfully run a Query, you can use it in your application to Display Data Capture Data","title":"Using Queries in applications"},{"location":"Core%20Concepts/data-access-and-binding/querying-a-database/query-settings/","text":"Query Settings \u00b6 You can specify the following settings in the Settings tab on the Appsmith Query Editor: Run query on page load \u00b6 This allows you to configure whether the query should load on every page load. By default, it is turned on for queries that display data on a widget. You can explicitly change this setting to suit your logic. Request confirmation before running query \u00b6 This enables you to set up a confirmation pop-up before a query is run. This Setting comes in handy to protect against users accidentally running destructive operations. Query timeout (in milliseconds) \u00b6 It\u2019s the time till which Appsmith server waits for the query to execute before closing the connection. By default, it is set to 10000 ms. If your query takes longer than this to return results, Appsmith will throw a timeout error.","title":"Query Settings"},{"location":"Core%20Concepts/data-access-and-binding/querying-a-database/query-settings/#query-settings","text":"You can specify the following settings in the Settings tab on the Appsmith Query Editor:","title":"Query Settings"},{"location":"Core%20Concepts/data-access-and-binding/querying-a-database/query-settings/#run-query-on-page-load","text":"This allows you to configure whether the query should load on every page load. By default, it is turned on for queries that display data on a widget. You can explicitly change this setting to suit your logic.","title":"Run query on page load"},{"location":"Core%20Concepts/data-access-and-binding/querying-a-database/query-settings/#request-confirmation-before-running-query","text":"This enables you to set up a confirmation pop-up before a query is run. This Setting comes in handy to protect against users accidentally running destructive operations.","title":"Request confirmation before running query"},{"location":"Core%20Concepts/data-access-and-binding/querying-a-database/query-settings/#query-timeout-in-milliseconds","text":"It\u2019s the time till which Appsmith server waits for the query to execute before closing the connection. By default, it is set to 10000 ms. If your query takes longer than this to return results, Appsmith will throw a timeout error.","title":"Query timeout (in milliseconds)"},{"location":"Core%20Concepts/writing-code/","text":"Writing Code \u00b6 You can use JavaScript inside {{ }} anywhere in Appsmith. You can reference every entity in Appsmith as a JavaScript variable and perform all JavaScript functions and operations on them. It means you can reference all Widgets, APIs, Queries, and their associated data and properties anywhere in an application in mustache syntax {{ }} . Appsmith currently supports two forms of JavaScript code for dynamically evaluated property values: Single line code or functions, such as ternary conditions {{ QueryName.data.filter((row) => row.id > 5 ) }} 2. Immediately-Invoked Function Expressions ( IIFE ) {{ (function() { const array = QueryName.data; const filterArray = array.filter((row) => row.id > 5); return filterArray; })() }} You can also write JavaScript code for event listeners. For JavaScript code inside an event listener, you can write multi-line JavaScript as below. {{ storeValue(\"userID\", 42); console.log(appsmith.store.userID); showAlert(\"userID saved\"); }} Reactive \u00b6 Appsmith is Reactive , not imperative, which means that code in Appsmith is declarative and describes the eventual state of a property. To update the property of a widget, a programmer using an imperative style would normally write a statement like this: // This imperative Style **incompatible** with appsmith if (Dropdown1.selectedOptionValue === \"John\") { nameInput.text = \"John Doe\"; // this does not work in Appsmith } Instead, we must write code in our widget's properties pane to define the property's value. To successfully set the nameInput widget's text value, we'll use the following snippet: // In the \"Text\" property field of the nameInput widget {{ Dropdown1.selectedOptionValue === \"John\" ? \"John Doe\" : \"\" }} This way, the properties of the nameInput widget are updated reactively any time the values of Dropdown1 change. When a user changes the Dropdown1 value, the nameInput widget's text will automatically update according to our expression. In general, any given widget on the canvas is automatically updated whenever its underlying values change or an API / Query returns with new data. Single Line JavaScript \u00b6 Appsmith primarily supports writing single-line javascript between mustache brackets {{ }} . Anything written between the brackets is evaluated as a javascript expression and its result is used as the given property's value. Sometimes, to achieve the intended result, it may require us to chain multiple operations (methods, ternary expressions, etc.) in a single line. If your expression becomes too complex to fit easily into a single line, consider writing a helper function in a JS Object to help keep your code readable! Valid JavaScript \u00b6 Following are valid examples of JavaScript for property values. {{ QueryName.data.filter((row) => row.id > 5 ) }} {{ Dropdown.selectedOptionValue === \"1\" ? \"Option 1\" : \"Option 2\" }} Invalid JavaScript You cannot simply write multi-line javascript between the mustache brackets; the following two snippets are examples of invalid code. See the next section, \"Multi-Line Javascript,\" to see how we can structure properties that accept multiple lines of code. {{ const array = QueryName.data; const filterArray = array.filter((row) => row.id > 5); return filterArray; }} {{ if (Dropdown.selectedOptionValue === \"1\") { return \"Option 1\"; } else { return \"Option 2\"; } }} Multi-Line JavaScript \u00b6 Appsmith supports multi-line JS if it is an IIFE (Immediately-Invoked Function Expression). The above invalid examples become valid if restructured and used as below. {{ (function() { const array = QueryName.data; const filterArray = array.filter((row) => row.id > 5); return filterArray; })() }} {{ (function() { if (Dropdown.selectedOptionValue === \"1\") { return \"Option 1\"; } else { return \"Option 2\"; } })() }} {% hint style=\"warning\" %} Writing comments inside : Note that you can write comments inside using JavaScript's multi-line comment syntax /* */ , but single-line comments // are not supported inside.","title":"Writing Code"},{"location":"Core%20Concepts/writing-code/#writing-code","text":"You can use JavaScript inside {{ }} anywhere in Appsmith. You can reference every entity in Appsmith as a JavaScript variable and perform all JavaScript functions and operations on them. It means you can reference all Widgets, APIs, Queries, and their associated data and properties anywhere in an application in mustache syntax {{ }} . Appsmith currently supports two forms of JavaScript code for dynamically evaluated property values: Single line code or functions, such as ternary conditions {{ QueryName.data.filter((row) => row.id > 5 ) }} 2. Immediately-Invoked Function Expressions ( IIFE ) {{ (function() { const array = QueryName.data; const filterArray = array.filter((row) => row.id > 5); return filterArray; })() }} You can also write JavaScript code for event listeners. For JavaScript code inside an event listener, you can write multi-line JavaScript as below. {{ storeValue(\"userID\", 42); console.log(appsmith.store.userID); showAlert(\"userID saved\"); }}","title":"Writing Code"},{"location":"Core%20Concepts/writing-code/#reactive","text":"Appsmith is Reactive , not imperative, which means that code in Appsmith is declarative and describes the eventual state of a property. To update the property of a widget, a programmer using an imperative style would normally write a statement like this: // This imperative Style **incompatible** with appsmith if (Dropdown1.selectedOptionValue === \"John\") { nameInput.text = \"John Doe\"; // this does not work in Appsmith } Instead, we must write code in our widget's properties pane to define the property's value. To successfully set the nameInput widget's text value, we'll use the following snippet: // In the \"Text\" property field of the nameInput widget {{ Dropdown1.selectedOptionValue === \"John\" ? \"John Doe\" : \"\" }} This way, the properties of the nameInput widget are updated reactively any time the values of Dropdown1 change. When a user changes the Dropdown1 value, the nameInput widget's text will automatically update according to our expression. In general, any given widget on the canvas is automatically updated whenever its underlying values change or an API / Query returns with new data.","title":"Reactive"},{"location":"Core%20Concepts/writing-code/#single-line-javascript","text":"Appsmith primarily supports writing single-line javascript between mustache brackets {{ }} . Anything written between the brackets is evaluated as a javascript expression and its result is used as the given property's value. Sometimes, to achieve the intended result, it may require us to chain multiple operations (methods, ternary expressions, etc.) in a single line. If your expression becomes too complex to fit easily into a single line, consider writing a helper function in a JS Object to help keep your code readable!","title":"Single Line JavaScript"},{"location":"Core%20Concepts/writing-code/#valid-javascript","text":"Following are valid examples of JavaScript for property values. {{ QueryName.data.filter((row) => row.id > 5 ) }} {{ Dropdown.selectedOptionValue === \"1\" ? \"Option 1\" : \"Option 2\" }} Invalid JavaScript You cannot simply write multi-line javascript between the mustache brackets; the following two snippets are examples of invalid code. See the next section, \"Multi-Line Javascript,\" to see how we can structure properties that accept multiple lines of code. {{ const array = QueryName.data; const filterArray = array.filter((row) => row.id > 5); return filterArray; }} {{ if (Dropdown.selectedOptionValue === \"1\") { return \"Option 1\"; } else { return \"Option 2\"; } }}","title":"Valid JavaScript"},{"location":"Core%20Concepts/writing-code/#multi-line-javascript","text":"Appsmith supports multi-line JS if it is an IIFE (Immediately-Invoked Function Expression). The above invalid examples become valid if restructured and used as below. {{ (function() { const array = QueryName.data; const filterArray = array.filter((row) => row.id > 5); return filterArray; })() }} {{ (function() { if (Dropdown.selectedOptionValue === \"1\") { return \"Option 1\"; } else { return \"Option 2\"; } })() }} {% hint style=\"warning\" %} Writing comments inside : Note that you can write comments inside using JavaScript's multi-line comment syntax /* */ , but single-line comments // are not supported inside.","title":"Multi-Line JavaScript"},{"location":"Core%20Concepts/writing-code/ext-libraries/","text":"External libraries \u00b6 JavaScript Library Reference \u00b6 lodash moment btoa atob xmlParser {% embed url=\" https://youtu.be/tqJna718tj4 \" %} Using JavaScript libraries \u00b6 The external libraries can be used anywhere inside {{ }} just as JavaScript is used in the rest of the application. The signature of the JavaScript libraries are exactly the same as mentioned in their documentation Example: Lodash \u00b6 Following is an example of the Lodash _.map utility, in use. fetchFruits is the name of the API / Query {{ _.map(fetchFruits.data, (fruit) => { return { label: fruit.name, value: fruit.id } }) }} Example: moment \u00b6 An example of the moment.js format utility, in use in a query . insert into users (name, email, createdDate) values ('John', 'john@appsmith.com', {{moment().format(\"YYYY-MM-DD\")}})","title":"External libraries"},{"location":"Core%20Concepts/writing-code/ext-libraries/#external-libraries","text":"","title":"External libraries"},{"location":"Core%20Concepts/writing-code/ext-libraries/#javascript-library-reference","text":"lodash moment btoa atob xmlParser {% embed url=\" https://youtu.be/tqJna718tj4 \" %}","title":"JavaScript Library Reference"},{"location":"Core%20Concepts/writing-code/ext-libraries/#using-javascript-libraries","text":"The external libraries can be used anywhere inside {{ }} just as JavaScript is used in the rest of the application. The signature of the JavaScript libraries are exactly the same as mentioned in their documentation","title":"Using JavaScript libraries"},{"location":"Core%20Concepts/writing-code/ext-libraries/#example-lodash","text":"Following is an example of the Lodash _.map utility, in use. fetchFruits is the name of the API / Query {{ _.map(fetchFruits.data, (fruit) => { return { label: fruit.name, value: fruit.id } }) }}","title":"Example: Lodash"},{"location":"Core%20Concepts/writing-code/ext-libraries/#example-moment","text":"An example of the moment.js format utility, in use in a query . insert into users (name, email, createdDate) values ('John', 'john@appsmith.com', {{moment().format(\"YYYY-MM-DD\")}})","title":"Example: moment"},{"location":"Core%20Concepts/writing-code/javascript-promises/","text":"JavaScript Promises \u00b6 Previously, the only way to achieve asynchronous workflows in Appsmith was through callbacks, and dealing with callbacks was not easy. Appsmith now supports native JavaScript promises to make working with asynchronous workflows easier. {% embed url=\" https://youtu.be/VuBycqPJVug \" %} All Appsmith APIs like showAlert() , showModal() , storeValue() , navigateTo() etc., will return a promise, making asynchronous workflow's implementation easier and readable. To understand the difference between callbacks and Promise implementation, let's try to implement the logic where we run three APIs each after the success of the previous one and finally show an alert with a message as \"done.\" {% hint style=\"info\" %} MockApi is a query created inside Appsmith, which takes a name as a parameter. Old Callback implementation looks like this: {{ MockApi.run(() => { MockApi1.run(() => { MockApi2.run(() => { showAlert('done') }) }) }) }} However, using Promise for the same problem makes the implementation easier and readable. {{ MockApi.run() .then(() => MockApi1.run()) .then(() => MockApi2.run()) .then(() => showAlert('done')) }} Async/Await \u00b6 The async and await keywords enable the asynchronous workflow to be written in a cleaner style, avoiding the need to configure promise chains explicitly. Async \u00b6 Adding the async keyword before a function means one simple thing: a function always returns a promise. Other values are wrapped in a resolved promise automatically. Await \u00b6 The keyword await makes JavaScript wait until that Promise settles and returns its result. Let's take an example to understand these keywords. Refer to the code below: {{ (async function(){ const response = await MockApi.run({ name: 'Appsmith' }); await storeValue( \"name\", response.args.name ); await showAlert(appsmith.store.name); })() }} In the example above: We run MockApi with the parameter name as \"Appsmith\" and wait for the response. We store the response in the Appsmith store using storeValue when we get the response. On completion of storeValue , we show an alert with a message. Promise methods \u00b6 If you want only one action/promise to finish for further execution, you can use Promise.any() or Promise.race() methods. {% hint style=\"warning\" %} Please remember to always return the promise for .then or .catch blocks to work as expected. {{ (function() { \u274c MockApi.run().then(() => showAlert(`Success`)) \u2705 return MockApi.run().then(() => showAlert(`Success`)) })() }} {% endhint %} Promise.any() \u00b6 It takes an iterable of Promise objects. Once one of the promises is fulfilled it returns a single promise that resolves with that Promise's value. For example, refer to the code below: {{ (function(){ return Promise.any([ MockApi.run({ name: 1 }), // if name:1 finished early MockApi.run({ name: 2 }) ]).then((res) => { showAlert(`Winner: ${res.args.name}`) // Alert Message will be \"Winner: 1\" }); })() }} Here, We ran multiple MockApi with a parameter name as a unique number (e.g., 1, 2) and passed the returned Promise to Promise.any() . When any actions are fulfilled, we show an alert message containing the argument sent to API, which finished faster. Promise.race() \u00b6 It simply waits for the first settled Promise, fulfilled or rejected, to get its result. Let's take an example to understand Promise.race() . Refer to the code below: {{ (function(){ return Promise.race([ MockApi.run({ name: 1 }), MockApi.run({ name: 2 }) ]).then((res) => { showAlert(`Winner: ${res.args.name}`) }); })() }} In the example above: We run multiple MockApi with a parameter name as a unique number (e.g., 1, 2); We pass the returned Promise to Promise.race() ; We show an alert message containing the argument sent to API, which finishes faster. If you want all the actions to finish first, you can use Promise.all() or Promise.allSettled() for such cases. Promise.all() \u00b6 It takes an array of promises (technically any iterable but is usually an array) and returns a new Promise. The array of results of the Promises becomes the result of the new Promise. If any promises fail (reject state), the new Promise immediately rejects and returns the same error. For example, Refer to the code below: {{ (function(){ let employeeNames = [\"Employee 1\",\"Employee 2\"]; // Start a bunch of calls running in parallel and store returned promise const calls = employeeNames.map(employeeName => MockApi.run({ name: employeeName })); // Wait for all to finish (or any to reject). return Promise.all(calls) .then(() => showAlert('Promise.all - All successful')) .catch(() => showAlert('Promise.all - Something went wrong')) .finally(() => showAlert('Promise.all - finished')) })() }} In the example above: We have a list of employee names, and we run MockApi with parameter names as each employee name; We store the returned Promise for each MockApi.run() in the calls array; Then, we show an alert message according to the success or failure case in Promise.all() . Promise.allSettled() \u00b6 It just waits for all the promises to settle, regardless of the result (resolved or rejected). For example, Refer to the code below: {{ (function(){ let employeeNames = [\"Employee 1\",\"Employee 2\"]; // Start a bunch of calls running in parallel and store returned promise const calls = employeeNames.map(employeeName => MockApi.run({ name: employeeName })); // Wait for all to resolve / reject. return Promise.allSettled(calls) .then(() => showAlert('Promise.allSettled - All successful')) .catch(() => showAlert('Promise.allSettled - Something went wrong')) .finally(() => showAlert('Promise.allSettled - finished')) })() }} In the example above: We have a list of employee names, and we run MockApi with parameter names as each employee name; We store the returned Promise for each MockApi.run() in the calls array; Then, we show an alert message according to the success or failure case in Promise.allSettled() . Using Promises in Appsmith \u00b6 Here are some general guidelines for using Promises in Appsmith: Most action triggers in Appsmith now return promises so you can attach a .then / await to wait for the action before proceeding. All triggers are wrapped in a promise, so any missed error will result in an uncaught promise error. Return promise with .then attached to it. {{ (function() { // the .then will not run if the promise is not returned return MockApi.run() .then(() => showAlert('success')) })() }} Params are no longer passed in the .then() argument of the action.run . Only the response is passed. {{ (function() { // define params on top so that you can use them in the later calls const params = { name: \"Appsmith\" } return MockApi.run(params) .then((response) => { showAlert(`${response.length} users found in `${params.name}`) }) })() }} When passing a function to .then() or .catch() always remember to pass it as a callback function. {{ (function() { MockApi.run().then(showAlert(`Success`))\u274c return MockApi.run().then(() => showAlert(`Success`)) \u2705 })() }}","title":"JavaScript Promises"},{"location":"Core%20Concepts/writing-code/javascript-promises/#javascript-promises","text":"Previously, the only way to achieve asynchronous workflows in Appsmith was through callbacks, and dealing with callbacks was not easy. Appsmith now supports native JavaScript promises to make working with asynchronous workflows easier. {% embed url=\" https://youtu.be/VuBycqPJVug \" %} All Appsmith APIs like showAlert() , showModal() , storeValue() , navigateTo() etc., will return a promise, making asynchronous workflow's implementation easier and readable. To understand the difference between callbacks and Promise implementation, let's try to implement the logic where we run three APIs each after the success of the previous one and finally show an alert with a message as \"done.\" {% hint style=\"info\" %} MockApi is a query created inside Appsmith, which takes a name as a parameter. Old Callback implementation looks like this: {{ MockApi.run(() => { MockApi1.run(() => { MockApi2.run(() => { showAlert('done') }) }) }) }} However, using Promise for the same problem makes the implementation easier and readable. {{ MockApi.run() .then(() => MockApi1.run()) .then(() => MockApi2.run()) .then(() => showAlert('done')) }}","title":"JavaScript Promises"},{"location":"Core%20Concepts/writing-code/javascript-promises/#asyncawait","text":"The async and await keywords enable the asynchronous workflow to be written in a cleaner style, avoiding the need to configure promise chains explicitly.","title":"Async/Await"},{"location":"Core%20Concepts/writing-code/javascript-promises/#async","text":"Adding the async keyword before a function means one simple thing: a function always returns a promise. Other values are wrapped in a resolved promise automatically.","title":"Async"},{"location":"Core%20Concepts/writing-code/javascript-promises/#await","text":"The keyword await makes JavaScript wait until that Promise settles and returns its result. Let's take an example to understand these keywords. Refer to the code below: {{ (async function(){ const response = await MockApi.run({ name: 'Appsmith' }); await storeValue( \"name\", response.args.name ); await showAlert(appsmith.store.name); })() }} In the example above: We run MockApi with the parameter name as \"Appsmith\" and wait for the response. We store the response in the Appsmith store using storeValue when we get the response. On completion of storeValue , we show an alert with a message.","title":"Await"},{"location":"Core%20Concepts/writing-code/javascript-promises/#promise-methods","text":"If you want only one action/promise to finish for further execution, you can use Promise.any() or Promise.race() methods. {% hint style=\"warning\" %} Please remember to always return the promise for .then or .catch blocks to work as expected. {{ (function() { \u274c MockApi.run().then(() => showAlert(`Success`)) \u2705 return MockApi.run().then(() => showAlert(`Success`)) })() }} {% endhint %}","title":"Promise methods"},{"location":"Core%20Concepts/writing-code/javascript-promises/#promiseany","text":"It takes an iterable of Promise objects. Once one of the promises is fulfilled it returns a single promise that resolves with that Promise's value. For example, refer to the code below: {{ (function(){ return Promise.any([ MockApi.run({ name: 1 }), // if name:1 finished early MockApi.run({ name: 2 }) ]).then((res) => { showAlert(`Winner: ${res.args.name}`) // Alert Message will be \"Winner: 1\" }); })() }} Here, We ran multiple MockApi with a parameter name as a unique number (e.g., 1, 2) and passed the returned Promise to Promise.any() . When any actions are fulfilled, we show an alert message containing the argument sent to API, which finished faster.","title":"Promise.any()"},{"location":"Core%20Concepts/writing-code/javascript-promises/#promiserace","text":"It simply waits for the first settled Promise, fulfilled or rejected, to get its result. Let's take an example to understand Promise.race() . Refer to the code below: {{ (function(){ return Promise.race([ MockApi.run({ name: 1 }), MockApi.run({ name: 2 }) ]).then((res) => { showAlert(`Winner: ${res.args.name}`) }); })() }} In the example above: We run multiple MockApi with a parameter name as a unique number (e.g., 1, 2); We pass the returned Promise to Promise.race() ; We show an alert message containing the argument sent to API, which finishes faster. If you want all the actions to finish first, you can use Promise.all() or Promise.allSettled() for such cases.","title":"Promise.race()"},{"location":"Core%20Concepts/writing-code/javascript-promises/#promiseall","text":"It takes an array of promises (technically any iterable but is usually an array) and returns a new Promise. The array of results of the Promises becomes the result of the new Promise. If any promises fail (reject state), the new Promise immediately rejects and returns the same error. For example, Refer to the code below: {{ (function(){ let employeeNames = [\"Employee 1\",\"Employee 2\"]; // Start a bunch of calls running in parallel and store returned promise const calls = employeeNames.map(employeeName => MockApi.run({ name: employeeName })); // Wait for all to finish (or any to reject). return Promise.all(calls) .then(() => showAlert('Promise.all - All successful')) .catch(() => showAlert('Promise.all - Something went wrong')) .finally(() => showAlert('Promise.all - finished')) })() }} In the example above: We have a list of employee names, and we run MockApi with parameter names as each employee name; We store the returned Promise for each MockApi.run() in the calls array; Then, we show an alert message according to the success or failure case in Promise.all() .","title":"Promise.all()"},{"location":"Core%20Concepts/writing-code/javascript-promises/#promiseallsettled","text":"It just waits for all the promises to settle, regardless of the result (resolved or rejected). For example, Refer to the code below: {{ (function(){ let employeeNames = [\"Employee 1\",\"Employee 2\"]; // Start a bunch of calls running in parallel and store returned promise const calls = employeeNames.map(employeeName => MockApi.run({ name: employeeName })); // Wait for all to resolve / reject. return Promise.allSettled(calls) .then(() => showAlert('Promise.allSettled - All successful')) .catch(() => showAlert('Promise.allSettled - Something went wrong')) .finally(() => showAlert('Promise.allSettled - finished')) })() }} In the example above: We have a list of employee names, and we run MockApi with parameter names as each employee name; We store the returned Promise for each MockApi.run() in the calls array; Then, we show an alert message according to the success or failure case in Promise.allSettled() .","title":"Promise.allSettled()"},{"location":"Core%20Concepts/writing-code/javascript-promises/#using-promises-in-appsmith","text":"Here are some general guidelines for using Promises in Appsmith: Most action triggers in Appsmith now return promises so you can attach a .then / await to wait for the action before proceeding. All triggers are wrapped in a promise, so any missed error will result in an uncaught promise error. Return promise with .then attached to it. {{ (function() { // the .then will not run if the promise is not returned return MockApi.run() .then(() => showAlert('success')) })() }} Params are no longer passed in the .then() argument of the action.run . Only the response is passed. {{ (function() { // define params on top so that you can use them in the later calls const params = { name: \"Appsmith\" } return MockApi.run(params) .then((response) => { showAlert(`${response.length} users found in `${params.name}`) }) })() }} When passing a function to .then() or .catch() always remember to pass it as a callback function. {{ (function() { MockApi.run().then(showAlert(`Success`))\u274c return MockApi.run().then(() => showAlert(`Success`)) \u2705 })() }}","title":"Using Promises in Appsmith"},{"location":"Core%20Concepts/writing-code/workflows/","text":"Creating Workflows \u00b6 When you build an app on Appsmith, you manipulate data; add, update, delete and retrieve data, add actions and trigger them. You use Javascript functions, APIs, or Queries to build different workflows. {% hint style=\"info\" %} To create workflows, you should be familiar with triggering actions from widgets and expand on triggering more complex actions. Fields \u00b6 The widgets have fields you can use to bind data or trigger operations. Appsmith has segregated the fields into Sync and Async fields. Sync Fields \u00b6 Whenever you drag a widget on the canvas, you can select it and see the properties associated with it in the properties pane. The fields that expect input or data in the properties pane are called Sync Fields. For example, if you have added an Input widget to the canvas, the properties like MaxChars, Regex, Error Message, and so on expect some input and are Sync Fields. Async Fields \u00b6 The properties that can trigger an action or perform an operation are called Async Fields. For example, the properties like OnTextChanged and OnSubmit of an input widget are considered async fields. You can use these properties to define an action or perform an operation . Use an Async Function Response in a Sync Field \u00b6 {% embed url=\" https://youtu.be/yn_8gs5w04g \" %} Let's look at some examples to understand how you can use async functions in sync fields. Use case \u00b6 You are fetching all the users and displaying information like First Name, Last Name, Email, and more on a page. You have a table widget to display the data. Using an API You have an API that fetches Users. You want to trigger the API execution, so you bind the API call to the widget, and the response generated will be shown in the table. To add a Table widget; Navigate to Explorer >> Click on Widgets >> Search table >> Drag a table widget onto the canvas. {% embed url=\" https://youtu.be/iYZV9DPnugY \" %} How to call API in the Sync field? To read data by using an API: Create an API - getAllUsers on Appsmith by adding the API from Explorer >> Click (+) Query/JS >> Select New Blank API >> Rename to getAllUsers (or select an existing API) Add API call to the table data property of a table widget as shown in the code snippet below: {{getAllUsers.data}} {% hint style=\"info\" %} The table data property of a table requires a JSON Array so verify that your API returns a JSON Array . A {{API.run()}} method, if supplied to the Table data , will throw an error, as table data is a Sync field and cannot perform the execution. However, you can read the response generated by the API by accessing the data property {{API.data}} of an API. When you bound an API data property to a widget, Appsmith executes the API on page load . You can modify the API settings if you wish not to execute the API on page load . Using a JSObject You have a JSObject function that fetches all Users' information, filters data for firstname & email, and then returns the result so you can bind it to the table widget and display information. {% embed url=\" https://youtu.be/8mVQS6uaR6M \" %} How to call an async JSObject function from a Sync Field? To read the data by calling a JSObject function: Create a JSObject - getFilteredUsersList on Appsmith by adding a JSObject from Explorer >> Click (+) Query/JS >> Select New JS Object >> Rename to getFilteredUsersList (or select an existing JSObject) You can add your API or Query Call to the function call and filter the data for the required details as below: export default { userFilteredList: async () => { const listUser = await getAllUsers.run(); return listUser.map((user) => { return { \"firstname\" : user.name, \"email\" : user.email } }) } } A function call to the JSObject getFilteredUsersList.userFilteredList() will throw an error as table data is a sync field and cannot perform function execution. However, you can use the JSObject function response by adding {{<JSOBJECTNAME.FUNCTIONAME.data>}}( {{getFilteredUsersList.userList.data}}) by reading the function's response. Appsmith handles the JSObject function execution on page load . You can modify the async function settings from the settings tab if you wish not to execute the function on page load . Using a Query You have a query that fetches Users\u2019 information, returns the response, and binds it to the table widget to display data. {% embed url=\" https://youtu.be/hqkI0h7DQ-s \" %} How to trigger a query execution from a Sync field? To read data by calling a query: Click on the + icon next to the queries/js and create a new query. Select DatabaseName for which you want to add Query. Rename the query to fetchUsersList. Assuming that the table name is Users. Add the following code to the query editor. {% hint style=\"info\" %} Replace users with the table name in your database. SELECT * FROM users ORDER BY id LIMIT 10; An execution call to the query fetchUsersList.run() will throw an error as table data expects data and cannot perform query execution. However, you can read the query response and use it in the Table data to display records by using {{<QUERY_NAME.data>}}(fetchUsersList.data) . Appsmith handles the query execution on page load . You can modify the query settings from the settings tab if you wish not to execute the query on page load . Events \u00b6 You can trigger the actions by binding them with Async fields. For example, you want to show a success message on the submission of a button by using showAlert() . You'll have to bind the [ showAlert() ](Add a link to Actions - Show Alert method) function on the onClick() event. {% hint style=\"info\" %} You can only use the global actions provided out-of-the-box by Appsmith in the async fields , which are events or actions. {% embed url=\" https://youtu.be/tjJIDkoCyQE \" %} Execute a global function from an async field Handling Success / Error \u00b6 The property pane allows us to configure the action to take once a Query returns with a success or an error. The Success / Error returned by the API/Query can be determined by the HTTP status code or the query response status. We can decide to display a success or an error message by using the showAlert action . Complex Workflows \u00b6 The GUI is limited to a single onSuccess / onError callback, while the underlying framework has no limitation. To write complex workflows that cannot be accommodated in the GUI, click on the JS icon next to the event name & enable JavaScript. Now you can write conditional workflows and chain multiple Queries. {% hint style=\"success\" %} Once you have configured actions using the GUI, you can click on the JS icon next to the event to show the JavaScript equivalent of your configuration. It can help you learn to use JavaScript to configure workflows! Executing Queries in Parallel / Serial \u00b6 Each query object has a run method used to execute the query. To execute multiple queries, you have to separate the run statement in the buttons onClick handler with a semicolon (;) . The run method is asynchronous, and you can execute multiple queries in parallel as below: {{ API1.run(); Query2.run(); API2.run(); }} or chained to be called onSuccess / onError using the callback arguments in the Run Signature . {{ updateUsers.run() .then(() => fetchUsers.run() .then(() => { showAlert('User Updated'); closeModal('Modal1'); }) .catch(() => showAlert(\"Fetch Users Failed\")) ).catch(() => showAlert(\"Update User Failed\", \"error\")) }} The following example shows how you can run two queries on a single click event: {% embed url=\" https://youtu.be/flCSSNTwWc4 \" %} Example | Executing Queries in Parallel You'll see that Query 1 includes information about location, pin code, email address, and phone number, and Query 2 includes information about name, gender, and ID. To run both the queries: Drag and drop two table widgets into the canvas. In the Table Data section, call your query. {{Query1.data}} //For Table 1 {{Query2.data}} // For Table 2 Add a button widget to call both queries simultaneously. In the button's onClick event, toggle the JS option and paste the below code: {{Query1.run(); Query2.run()}} You can execute multiple queries simultaneously with this command. Conditional Execution \u00b6 Queries can also be chained to execute conditionally based on the value of a widget or the response of a Query {{ statusDropdown.selectedOptionValue === \"Pending\" ? fetchPendingUsers.run(() => { fetchPendingUsers.data.length === 0 ? showAlert(\"No Users Pending Approval\", \"info\") : showAlert(\"Fetched Users\", \"success\"); }) : fetchApprovedUsers.run(); }} {% hint style=\"success\" %} Use the Appsmith Framework and External Libraries to build logic into your applications quickly.","title":"Creating Workflows"},{"location":"Core%20Concepts/writing-code/workflows/#creating-workflows","text":"When you build an app on Appsmith, you manipulate data; add, update, delete and retrieve data, add actions and trigger them. You use Javascript functions, APIs, or Queries to build different workflows. {% hint style=\"info\" %} To create workflows, you should be familiar with triggering actions from widgets and expand on triggering more complex actions.","title":"Creating Workflows"},{"location":"Core%20Concepts/writing-code/workflows/#fields","text":"The widgets have fields you can use to bind data or trigger operations. Appsmith has segregated the fields into Sync and Async fields.","title":"Fields"},{"location":"Core%20Concepts/writing-code/workflows/#sync-fields","text":"Whenever you drag a widget on the canvas, you can select it and see the properties associated with it in the properties pane. The fields that expect input or data in the properties pane are called Sync Fields. For example, if you have added an Input widget to the canvas, the properties like MaxChars, Regex, Error Message, and so on expect some input and are Sync Fields.","title":"Sync Fields"},{"location":"Core%20Concepts/writing-code/workflows/#async-fields","text":"The properties that can trigger an action or perform an operation are called Async Fields. For example, the properties like OnTextChanged and OnSubmit of an input widget are considered async fields. You can use these properties to define an action or perform an operation .","title":"Async Fields"},{"location":"Core%20Concepts/writing-code/workflows/#use-an-async-function-response-in-a-sync-field","text":"{% embed url=\" https://youtu.be/yn_8gs5w04g \" %} Let's look at some examples to understand how you can use async functions in sync fields.","title":"Use an Async Function Response in a Sync Field"},{"location":"Core%20Concepts/writing-code/workflows/#use-case","text":"You are fetching all the users and displaying information like First Name, Last Name, Email, and more on a page. You have a table widget to display the data. Using an API You have an API that fetches Users. You want to trigger the API execution, so you bind the API call to the widget, and the response generated will be shown in the table. To add a Table widget; Navigate to Explorer >> Click on Widgets >> Search table >> Drag a table widget onto the canvas. {% embed url=\" https://youtu.be/iYZV9DPnugY \" %} How to call API in the Sync field? To read data by using an API: Create an API - getAllUsers on Appsmith by adding the API from Explorer >> Click (+) Query/JS >> Select New Blank API >> Rename to getAllUsers (or select an existing API) Add API call to the table data property of a table widget as shown in the code snippet below: {{getAllUsers.data}} {% hint style=\"info\" %} The table data property of a table requires a JSON Array so verify that your API returns a JSON Array . A {{API.run()}} method, if supplied to the Table data , will throw an error, as table data is a Sync field and cannot perform the execution. However, you can read the response generated by the API by accessing the data property {{API.data}} of an API. When you bound an API data property to a widget, Appsmith executes the API on page load . You can modify the API settings if you wish not to execute the API on page load . Using a JSObject You have a JSObject function that fetches all Users' information, filters data for firstname & email, and then returns the result so you can bind it to the table widget and display information. {% embed url=\" https://youtu.be/8mVQS6uaR6M \" %} How to call an async JSObject function from a Sync Field? To read the data by calling a JSObject function: Create a JSObject - getFilteredUsersList on Appsmith by adding a JSObject from Explorer >> Click (+) Query/JS >> Select New JS Object >> Rename to getFilteredUsersList (or select an existing JSObject) You can add your API or Query Call to the function call and filter the data for the required details as below: export default { userFilteredList: async () => { const listUser = await getAllUsers.run(); return listUser.map((user) => { return { \"firstname\" : user.name, \"email\" : user.email } }) } } A function call to the JSObject getFilteredUsersList.userFilteredList() will throw an error as table data is a sync field and cannot perform function execution. However, you can use the JSObject function response by adding {{<JSOBJECTNAME.FUNCTIONAME.data>}}( {{getFilteredUsersList.userList.data}}) by reading the function's response. Appsmith handles the JSObject function execution on page load . You can modify the async function settings from the settings tab if you wish not to execute the function on page load . Using a Query You have a query that fetches Users\u2019 information, returns the response, and binds it to the table widget to display data. {% embed url=\" https://youtu.be/hqkI0h7DQ-s \" %} How to trigger a query execution from a Sync field? To read data by calling a query: Click on the + icon next to the queries/js and create a new query. Select DatabaseName for which you want to add Query. Rename the query to fetchUsersList. Assuming that the table name is Users. Add the following code to the query editor. {% hint style=\"info\" %} Replace users with the table name in your database. SELECT * FROM users ORDER BY id LIMIT 10; An execution call to the query fetchUsersList.run() will throw an error as table data expects data and cannot perform query execution. However, you can read the query response and use it in the Table data to display records by using {{<QUERY_NAME.data>}}(fetchUsersList.data) . Appsmith handles the query execution on page load . You can modify the query settings from the settings tab if you wish not to execute the query on page load .","title":"Use case"},{"location":"Core%20Concepts/writing-code/workflows/#events","text":"You can trigger the actions by binding them with Async fields. For example, you want to show a success message on the submission of a button by using showAlert() . You'll have to bind the [ showAlert() ](Add a link to Actions - Show Alert method) function on the onClick() event. {% hint style=\"info\" %} You can only use the global actions provided out-of-the-box by Appsmith in the async fields , which are events or actions. {% embed url=\" https://youtu.be/tjJIDkoCyQE \" %} Execute a global function from an async field","title":"Events"},{"location":"Core%20Concepts/writing-code/workflows/#handling-success-error","text":"The property pane allows us to configure the action to take once a Query returns with a success or an error. The Success / Error returned by the API/Query can be determined by the HTTP status code or the query response status. We can decide to display a success or an error message by using the showAlert action .","title":"Handling Success / Error"},{"location":"Core%20Concepts/writing-code/workflows/#complex-workflows","text":"The GUI is limited to a single onSuccess / onError callback, while the underlying framework has no limitation. To write complex workflows that cannot be accommodated in the GUI, click on the JS icon next to the event name & enable JavaScript. Now you can write conditional workflows and chain multiple Queries. {% hint style=\"success\" %} Once you have configured actions using the GUI, you can click on the JS icon next to the event to show the JavaScript equivalent of your configuration. It can help you learn to use JavaScript to configure workflows!","title":"Complex Workflows"},{"location":"Core%20Concepts/writing-code/workflows/#executing-queries-in-parallel-serial","text":"Each query object has a run method used to execute the query. To execute multiple queries, you have to separate the run statement in the buttons onClick handler with a semicolon (;) . The run method is asynchronous, and you can execute multiple queries in parallel as below: {{ API1.run(); Query2.run(); API2.run(); }} or chained to be called onSuccess / onError using the callback arguments in the Run Signature . {{ updateUsers.run() .then(() => fetchUsers.run() .then(() => { showAlert('User Updated'); closeModal('Modal1'); }) .catch(() => showAlert(\"Fetch Users Failed\")) ).catch(() => showAlert(\"Update User Failed\", \"error\")) }} The following example shows how you can run two queries on a single click event: {% embed url=\" https://youtu.be/flCSSNTwWc4 \" %} Example | Executing Queries in Parallel You'll see that Query 1 includes information about location, pin code, email address, and phone number, and Query 2 includes information about name, gender, and ID. To run both the queries: Drag and drop two table widgets into the canvas. In the Table Data section, call your query. {{Query1.data}} //For Table 1 {{Query2.data}} // For Table 2 Add a button widget to call both queries simultaneously. In the button's onClick event, toggle the JS option and paste the below code: {{Query1.run(); Query2.run()}} You can execute multiple queries simultaneously with this command.","title":"Executing Queries in Parallel / Serial"},{"location":"Core%20Concepts/writing-code/workflows/#conditional-execution","text":"Queries can also be chained to execute conditionally based on the value of a widget or the response of a Query {{ statusDropdown.selectedOptionValue === \"Pending\" ? fetchPendingUsers.run(() => { fetchPendingUsers.data.length === 0 ? showAlert(\"No Users Pending Approval\", \"info\") : showAlert(\"Fetched Users\", \"success\"); }) : fetchApprovedUsers.run(); }} {% hint style=\"success\" %} Use the Appsmith Framework and External Libraries to build logic into your applications quickly.","title":"Conditional Execution"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/","text":"JS Objects \u00b6 Writing extensive code without a full-fledge editor could be challenging. The JavaScript Editor(beta) in Appsmith allows you to create a reusable set of JavaScript functions that you can call within JavaScript bindings across a Page\u2019s component to write complex code with ease. In Appsmith, it\u2019s referred to as JS Objects . {% embed url=\" https://www.youtube.com/watch?v=tpbY5Jti9d4 \" %} JS Object \u00b6 A JS Object is an entity comprised of multiple functions and variables. It is a reusable component you can refer to in other JS Objects, allowing you to create a neatly organized set of hierarchies. How to Create a JS Object? You can create new JS Objects from the Entity Explorer. Navigate to Entity Explorer >> Click (+) next to Queries/JS >> Select New JS Object . {% embed url=\" https://youtu.be/8kzyYaHnwPw \" %} How to add a JS Object? The screen below shows a JS Object added to the page. The default code template that supports export default . Give a meaningful name to the JSObject Code editor where you can write JavaScript Code Settings are available for Async functions only. Define variables Define functions Use the editor to do several jobs, to name a few: Write your code Call in-built or user-defined functions API calls Database query execution Add multiple functions to the JS Object Access JS Objects from Explorer available under JS Objects Group {% hint style=\"info\" %} The support for the named exports is not available for exporting functions. However, you can expose functions that are part of the JS Object using default export. Calling a JS Object Function \u00b6 You can call the functions defined in a JS Object by using the notation {{ JS_OBJECT_NAME.Function_Name }} embedded in a mustache sign as shown in the figure below: {% hint style=\"info\" %} The JS Objects defined are available across APIs, Queries, or other JS Objects defined for a particular page, i.e., the JS Objects have page-level access and are not accessible across pages . Types of JS Functions \u00b6 You can write different types of functions in a JS Object that can be Synchronous or Asynchronous . Synchronous \u00b6 As the name suggests, synchronous means to be in a sequence, i.e., every statement of the code gets executed one by one. So, a statement must wait for the earlier statement to complete its execution. For example, the below code snippet shows a data filter: Api.data.filter(() => {}); // filtering data Here data filtering is the process of selecting a subset of data you want to choose for viewing or analysis. To filter the data, you must traverse the whole dataset one after the other and segregate it if it matches the filter criteria. Thus, you need synchronous execution. Asynchronous \u00b6 The word asynchronous means not occurring at the same time. You may sometimes need to fetch data from the server or execute a function with a delay, something you do not anticipate occurring at the current time. For example, Promises , Api.run() , Query.Run() , Appsmith platform functions(eg. showModal ). It basically lets you delay the execution of code embedded in an async function and is executed when needed. You can configure additional settings for the asynchronous function and enhance the user experience. Working with JavaScript Editor \u00b6 JavaScript Editor is an extensive editor that provides additional functionalities while writing code. You can do a lot with it, like: {% embed url=\" https://youtu.be/agyvQNFGGIY \" %} A quick walkthrough of JavaScript Editor What do you get? Description Response Tab Execute each function at the time of development and view the output in the Response tab Linting Errors Get the linting errors caught right in the editor Errors Tab Check for the syntax errors in the Errors tab Logs Tab Check the function execution log in the Logs tab Snippets Insert ready-to-use snippets Debugger Statements Use debugger statements to pause the execution To understand how JavaScript Editor works, let\u2019s create a Hello World JS Object . Navigate to Explorer >> Click (+) for Queries/JS >> Select New JS Object. You\u2019ll see the default code template. Add the below code snippet: export default { hello: () => { return \u201cHello World\u201d; } } Response Tab \u00b6 The response tab displays the output generated by the functions defined in a JS Object. Execute Function \u00b6 You can click Run available on the top right corner to execute the JS function. If your JS object has only one function defined, the editor defaults the function name. But if your JS Object has more than one function defined, you can select the function you want to execute and then click Run . {% hint style=\"info\" %} If your code has syntax errors, the Run button is disabled and blocks the execution. You can resolve the errors and then execute the function using Run . You can verify the response generated by the hello() in the Response tab, as shown in the screenshot above. {% hint style=\"info\" %} You can execute the function by clicking the RUN button or by using a shortcut key ( CMD+ENTER or CTRL + ENTER ) Linting Errors \u00b6 The Javascript Editor automatically checks your source code for programmatic errors. If the code is not programmatically correct, it will highlight the error using a red-colored lint below the erroneous code. For example, the syntax error where the return is misspelled as retu is also captured by linting. {% hint style=\"info\" %} You can inspect the error in detail from the Errors tab. Errors Tab \u00b6 The errors tab displays all types of errors generated by the code execution. The errors could be comprised of Syntax Errors , Run time errors like Parsing Errors , and more. Logs Tab \u00b6 The Logs tab shows the execution of functions with a timestamp. You can also open the Logs Tab by clicking a debug icon at the right bottom of the console (as shown in the screenshot below). The logs tab gives you the flexibility to filter logs either by writing keywords in the Filter box or selecting the type of log from the dropdown . Snippets \u00b6 You\u2019ll see a Snippets button available on the right top side of the editor. Click on it to open the Appsmith Snippet Library. Appsmith Snippet Library \u00b6 You can search and copy the Snippets from the Appsmith Snippet Library and use them in the JavaScript Editor. You can then build on the code snippet to add your code or use it as is. {% hint style=\"info\" %} Appsmith is actively working on expanding the Snippets Library . Please reach out to us on Discord or Community Forms if you wish to contribute to the library. Debugger Statements \u00b6 The debugger statement in JavaScript will help you pause the code execution during the development phase. The debugger lets you visualize the data and operations when executed on runtime. You\u2019ll have to use the debugger keyword in the code snippet to pause the execution. {% hint style=\"info\" %} You must have the browser\u2019s developer console open to see the debugger in action. {% embed url=\" https://youtu.be/ZjleR7iM-xo \" %} How to use Debugger statements in JavaScript Editor? For example, you are returning user information fetched from the userDetailsAPI in the JS function, and you want to see the value returned by the API during execution. To get this working, you can use a debugger statement as below: export default { getUserDetails: async () => { const userInfo = await userDetailsAPI.run(); debugger; // the execution will be paused at this point // and you can check the value of the userInfo variable console.log(\u201cuser information: \u201c+userInfo); // the logs will be // printed in the browser // console. return userInfo; } } Writing Complex Code \u00b6 When you build applications, it\u2019s often more than just a CRUD operation from a single datasource. You might integrate with multiple APIs or want to have the dataset created by querying multiple tables, which leads to traversing data, filtering, or manipulating the response by calling different APIs. You can write complex logic with ease using JavaScript Editor. To understand it further, let\u2019s look at a use case and build different workflows. Use case \u00b6 You want to create a developer task tracker dashboard, update developer information, and add some permissions like making sure only admins can access the dashboard. Code Workflow \u00b6 Let\u2019s create a task tracker dashboard that gives you an overview of progress on tasks. You have a query called \u201c developers ,\u201d which fetches the developers\u2019 information like name, email, etc. You have an API getAllDeveloperTaskStatus that gives you a task list with the status for each developer. Task Tracker You want to display the developer details in a tabular format so that you can choose a table widget. You would want to show a total number of tasks like total tasks, no of completed tasks, no of to-do tasks, and no of in-progress tasks. You can achieve this by adding a JS Object and creating one function in it, \u201c getTaskList .\u201d Let\u2019s write the code for this function using the JavaScript Editor. In the Explorer tab, >> click (+) next to JS Objects >> Select New JS Object . It\u2019ll open a JS Editor. Rename the JS Object to Utils Add the below code snippet in the Code tab. export default { getAllDeveloperTaskStatus: () => { return developers.data.map((developer) => { const developerId = developer.id; const taskList = developerTaskStatus.data.filter((alltask) => alltask.userId === String(developerId)); // fetch all the tasks for the given developer const completedTaskList = taskList.filter((task) => task.status === \"Completed\"); // fetch tasks that are completed by the developer const todoTaskList = taskList.filter((task) => task.status === \"To-Do\"); // fetch tasks that are not yet started by the developer const inProgressTaskList = taskList.filter((task) => task.completed === \"In-Progress\"); // fetch tasks that are in progress by the developer return { \"Id\": developer.id, \"Name\": developer.name, \"Email\": developer.email, \"Total Tasks\": taskList.length, \"To-Do Tasks\": todoTaskList.length, \"In Progress Tasks\": inProgressTaskList.length, \"Completed Tasks\": completedTaskList.length }; }) } } The getAllDeveloperTaskStatus function does the following: Reads all the developers\u2019 data Iterates for each developer record Scans the tasklist to fetch the developer-related tasks Based on task status (TO-DO, In-Progress, and Completed) Generate a response that gives a cumulative task breakup for each task status for each developer To display the response generated by getAllDeveloperTaskStatus we'll bind it to a widget. Navigate to Page >> Select Table widget in Widgets Tab >> Drag it onto the canvas. Select the Table Widget on the canvas In the Property Pane on right side add the code {{Utils.getAllDeveloperTaskStatus()}} in Table Data property. {% embed url=\" https://youtu.be/HJGOf5ez4eY \" %} Add a Table Widget to display data The table widget will show the data as shown in the below screenshot. Update Developer Information Let\u2019s add another function where you\u2019ll be able to select a developer record and update the information. To achieve this, add a new column to the table widget and select the Column Type as an icon button type that will open a modal window. {% embed url=\" https://youtu.be/H85pm7Ae_U8 \" %} How to add an edit column to the table widget? Now that the Edit column is added to the table let\u2019s add a modal to fetch the developer information like Name and Email . {% embed url=\" https://youtu.be/lqC0MzK4s5g \" %} How to add a modal to edit a developer's details? Navigate to Explorer >> Select Utils >> Add the code snippet for updateUserData() after getAllDeveloperTaskStatus() . export default { getAllDeveloperTaskStatus: () => { ...// code block for getAllDeveloperTaskStatus }, updateUserData: () => { // Construct new user's data const newUserData = { ...Table1.selectedRow, name: devName.text, email: devEmail.text, } // Run updateDeveloperDetails query updateDeveloperDetails.run( // on successful execution of updateDeveloperDetails run developers to fetch updated data async () => { await developers.run(); closeModal(\"editModal\"); showAlert(\"Developer Details are updated successfully!\"); }, // On Error, close the modal and show an error toast (e) => { closeModal(\"editModal\") showAlert(\"An error occurred while updating the developer details!\"); if (e.statusCode === 401) { navigateTo(\"Page1\"); } }, // Params Object newUserData) } } The updateUserData function does the following: Create the dynamic data that is updated by the user in editModal in newUserData JSON Executes query updateDeveloperDetails On successful execution of the query: Calls developers query to fetch the updated developer details Shows a success toast to the user Closes the editModal On error or failed execution of the query Shows an error toast to the user Closes the editModal Rename the Confirm button to Update and bind the function updateUserData to its onClick() event. You can bind the function call by using {{Utils.updateUserData()}} . When you'll hit the Update button, the updateUserData function gets executed that updates the developer information and refreshes the developer table to fetch the updated information. Add Permissions As you want only the admins to access the Dashboard, let\u2019s create another function for access control. The function will contain a list of users\u2019 emails who will have access to update data in the table. Let\u2019s call this function isAdmin . Add the code snippet for isAdmin() and adminsList to the Utils JS Object. export default { adminsList: [\"admin1@yourdomain.com\", \"admin2@yourdomain.com\", \"admin3@yourdomain.com\"], getAllDeveloperTaskStatus() => { ... // code block for getAllDeveloperTaskStatus }, updateUsersData() => { ... // code block for updateUserData }, isAdmin: (email) => { if (this.adminList.indexOf(appsmith.user.email) > -1) { // check if the logged in user is an admin return true; } return false; } } The final function will look as below: export default { //the allowed list of admin's email adminsList: [\"admin1@yourdomain.com\", \"admin2@yourdomain.com\", \"admin3@yourdomain.com\"], getAllDeveloperTaskStatus: () => { return developers.data.map((developer) => { const developerId = developer.id; const taskList = developerTaskStatus.data.filter((alltask) => alltask.userId === String(developerId)); // fetch all the tasks for the given developer const completedTaskList = taskList.filter((task) => task.status === \"Completed\"); // fetch tasks that are completed by the developer const todoTaskList = taskList.filter((task) => task.status === \"To-Do\"); // fetch tasks that are not yet started by the developer const inProgressTaskList = taskList.filter((task) => task.completed === \"In-Progress\"); // fetch tasks that are in progress by the developer return { \"Id\": developer.id, \"Name\": developer.name, \"Email\": developer.email, \"Total Tasks\": taskList.length, \"To-Do Tasks\": todoTaskList.length, \"In Progress Tasks\": inProgressTaskList.length, \"Completed Tasks\": completedTaskList.length }; }) }, updateUserData: () => { // Construct new user's data const newUserData = { ...Table1.selectedRow, name: devName.text, email: devEmail.text, } // Run updateDeveloperDetails query updateDeveloperDetails.run( // on successful execution of updateDeveloperDetails run developers to fetch updated data async () => { await developers.run(); closeModal(\"editModal\"); showAlert(\"Developer Details are updated successfully!\"); }, // On Error, close the modal and show an error toast (e) => { closeModal(\"editModal\") showAlert(\"An error occurred while updating the developer details!\"); if (e.statusCode === 401) { navigateTo(\"Page1\"); } }, // Params Object newUserData) }, isAdmin: async () => { if (this.adminsList.indexOf(appsmith.user.email) > -1) { return true; } navigateTo(\"Page2\"); return false; } } {% embed url=\" https://youtu.be/cuoUVqzhCMo \" %} A user who is not an admin is taken to a no permissions page Only the users with email added to the adminList will be able to access the dashboard and do the updates. With the Async function settings , you can bind the isAdmin function to RUN ON PAGE LOAD . The execution of IsAdmin on Page load ensures the validation of the user\u2019s email against the adminList for the logged-in user should happen on the page load. If the logged-in user's email is present in the adminsList , the user can access the Dashboard. If not, the user navigates to the access denied page that shows a message: {% hint style=\"info\" %} You do not have permission to access the Dashboard. Current Limitations \u00b6 As the JavaScript Editor is in its BETA, there are a few limitations: At the moment, you cannot use JS Objects across pages. We are working to enable this functionality in the future. You can subscribe to the issue and follow the progress. You cannot define variables and functions outside of export default { }. In future iterations, we will allow you to write and export only selected variables/functions from a JS Object . If a function is async, i.e., if it returns a promise, it cannot be called on the fields incompatible with the return type, such as the default text property of the text widget. For example, in the above screenshot executeQuery returns Api1.run() promise and hence is an async function . You can call executeQuery or similar functions only from trigger or event properties such as OnClick .","title":"JS Objects"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#js-objects","text":"Writing extensive code without a full-fledge editor could be challenging. The JavaScript Editor(beta) in Appsmith allows you to create a reusable set of JavaScript functions that you can call within JavaScript bindings across a Page\u2019s component to write complex code with ease. In Appsmith, it\u2019s referred to as JS Objects . {% embed url=\" https://www.youtube.com/watch?v=tpbY5Jti9d4 \" %}","title":"JS Objects"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#js-object","text":"A JS Object is an entity comprised of multiple functions and variables. It is a reusable component you can refer to in other JS Objects, allowing you to create a neatly organized set of hierarchies. How to Create a JS Object? You can create new JS Objects from the Entity Explorer. Navigate to Entity Explorer >> Click (+) next to Queries/JS >> Select New JS Object . {% embed url=\" https://youtu.be/8kzyYaHnwPw \" %} How to add a JS Object? The screen below shows a JS Object added to the page. The default code template that supports export default . Give a meaningful name to the JSObject Code editor where you can write JavaScript Code Settings are available for Async functions only. Define variables Define functions Use the editor to do several jobs, to name a few: Write your code Call in-built or user-defined functions API calls Database query execution Add multiple functions to the JS Object Access JS Objects from Explorer available under JS Objects Group {% hint style=\"info\" %} The support for the named exports is not available for exporting functions. However, you can expose functions that are part of the JS Object using default export.","title":"JS Object"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#calling-a-js-object-function","text":"You can call the functions defined in a JS Object by using the notation {{ JS_OBJECT_NAME.Function_Name }} embedded in a mustache sign as shown in the figure below: {% hint style=\"info\" %} The JS Objects defined are available across APIs, Queries, or other JS Objects defined for a particular page, i.e., the JS Objects have page-level access and are not accessible across pages .","title":"Calling a JS Object Function"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#types-of-js-functions","text":"You can write different types of functions in a JS Object that can be Synchronous or Asynchronous .","title":"Types of JS Functions"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#synchronous","text":"As the name suggests, synchronous means to be in a sequence, i.e., every statement of the code gets executed one by one. So, a statement must wait for the earlier statement to complete its execution. For example, the below code snippet shows a data filter: Api.data.filter(() => {}); // filtering data Here data filtering is the process of selecting a subset of data you want to choose for viewing or analysis. To filter the data, you must traverse the whole dataset one after the other and segregate it if it matches the filter criteria. Thus, you need synchronous execution.","title":"Synchronous"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#asynchronous","text":"The word asynchronous means not occurring at the same time. You may sometimes need to fetch data from the server or execute a function with a delay, something you do not anticipate occurring at the current time. For example, Promises , Api.run() , Query.Run() , Appsmith platform functions(eg. showModal ). It basically lets you delay the execution of code embedded in an async function and is executed when needed. You can configure additional settings for the asynchronous function and enhance the user experience.","title":"Asynchronous"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#working-with-javascript-editor","text":"JavaScript Editor is an extensive editor that provides additional functionalities while writing code. You can do a lot with it, like: {% embed url=\" https://youtu.be/agyvQNFGGIY \" %} A quick walkthrough of JavaScript Editor What do you get? Description Response Tab Execute each function at the time of development and view the output in the Response tab Linting Errors Get the linting errors caught right in the editor Errors Tab Check for the syntax errors in the Errors tab Logs Tab Check the function execution log in the Logs tab Snippets Insert ready-to-use snippets Debugger Statements Use debugger statements to pause the execution To understand how JavaScript Editor works, let\u2019s create a Hello World JS Object . Navigate to Explorer >> Click (+) for Queries/JS >> Select New JS Object. You\u2019ll see the default code template. Add the below code snippet: export default { hello: () => { return \u201cHello World\u201d; } }","title":"Working with JavaScript Editor"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#response-tab","text":"The response tab displays the output generated by the functions defined in a JS Object.","title":"Response Tab"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#execute-function","text":"You can click Run available on the top right corner to execute the JS function. If your JS object has only one function defined, the editor defaults the function name. But if your JS Object has more than one function defined, you can select the function you want to execute and then click Run . {% hint style=\"info\" %} If your code has syntax errors, the Run button is disabled and blocks the execution. You can resolve the errors and then execute the function using Run . You can verify the response generated by the hello() in the Response tab, as shown in the screenshot above. {% hint style=\"info\" %} You can execute the function by clicking the RUN button or by using a shortcut key ( CMD+ENTER or CTRL + ENTER )","title":"Execute Function"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#linting-errors","text":"The Javascript Editor automatically checks your source code for programmatic errors. If the code is not programmatically correct, it will highlight the error using a red-colored lint below the erroneous code. For example, the syntax error where the return is misspelled as retu is also captured by linting. {% hint style=\"info\" %} You can inspect the error in detail from the Errors tab.","title":"Linting Errors"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#errors-tab","text":"The errors tab displays all types of errors generated by the code execution. The errors could be comprised of Syntax Errors , Run time errors like Parsing Errors , and more.","title":"Errors Tab "},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#logs-tab","text":"The Logs tab shows the execution of functions with a timestamp. You can also open the Logs Tab by clicking a debug icon at the right bottom of the console (as shown in the screenshot below). The logs tab gives you the flexibility to filter logs either by writing keywords in the Filter box or selecting the type of log from the dropdown .","title":"Logs Tab"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#snippets","text":"You\u2019ll see a Snippets button available on the right top side of the editor. Click on it to open the Appsmith Snippet Library.","title":"Snippets"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#appsmith-snippet-library","text":"You can search and copy the Snippets from the Appsmith Snippet Library and use them in the JavaScript Editor. You can then build on the code snippet to add your code or use it as is. {% hint style=\"info\" %} Appsmith is actively working on expanding the Snippets Library . Please reach out to us on Discord or Community Forms if you wish to contribute to the library.","title":"Appsmith Snippet Library"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#debugger-statements","text":"The debugger statement in JavaScript will help you pause the code execution during the development phase. The debugger lets you visualize the data and operations when executed on runtime. You\u2019ll have to use the debugger keyword in the code snippet to pause the execution. {% hint style=\"info\" %} You must have the browser\u2019s developer console open to see the debugger in action. {% embed url=\" https://youtu.be/ZjleR7iM-xo \" %} How to use Debugger statements in JavaScript Editor? For example, you are returning user information fetched from the userDetailsAPI in the JS function, and you want to see the value returned by the API during execution. To get this working, you can use a debugger statement as below: export default { getUserDetails: async () => { const userInfo = await userDetailsAPI.run(); debugger; // the execution will be paused at this point // and you can check the value of the userInfo variable console.log(\u201cuser information: \u201c+userInfo); // the logs will be // printed in the browser // console. return userInfo; } }","title":"Debugger Statements"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#writing-complex-code","text":"When you build applications, it\u2019s often more than just a CRUD operation from a single datasource. You might integrate with multiple APIs or want to have the dataset created by querying multiple tables, which leads to traversing data, filtering, or manipulating the response by calling different APIs. You can write complex logic with ease using JavaScript Editor. To understand it further, let\u2019s look at a use case and build different workflows.","title":"Writing Complex Code"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#use-case","text":"You want to create a developer task tracker dashboard, update developer information, and add some permissions like making sure only admins can access the dashboard.","title":"Use case"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#code-workflow","text":"Let\u2019s create a task tracker dashboard that gives you an overview of progress on tasks. You have a query called \u201c developers ,\u201d which fetches the developers\u2019 information like name, email, etc. You have an API getAllDeveloperTaskStatus that gives you a task list with the status for each developer. Task Tracker You want to display the developer details in a tabular format so that you can choose a table widget. You would want to show a total number of tasks like total tasks, no of completed tasks, no of to-do tasks, and no of in-progress tasks. You can achieve this by adding a JS Object and creating one function in it, \u201c getTaskList .\u201d Let\u2019s write the code for this function using the JavaScript Editor. In the Explorer tab, >> click (+) next to JS Objects >> Select New JS Object . It\u2019ll open a JS Editor. Rename the JS Object to Utils Add the below code snippet in the Code tab. export default { getAllDeveloperTaskStatus: () => { return developers.data.map((developer) => { const developerId = developer.id; const taskList = developerTaskStatus.data.filter((alltask) => alltask.userId === String(developerId)); // fetch all the tasks for the given developer const completedTaskList = taskList.filter((task) => task.status === \"Completed\"); // fetch tasks that are completed by the developer const todoTaskList = taskList.filter((task) => task.status === \"To-Do\"); // fetch tasks that are not yet started by the developer const inProgressTaskList = taskList.filter((task) => task.completed === \"In-Progress\"); // fetch tasks that are in progress by the developer return { \"Id\": developer.id, \"Name\": developer.name, \"Email\": developer.email, \"Total Tasks\": taskList.length, \"To-Do Tasks\": todoTaskList.length, \"In Progress Tasks\": inProgressTaskList.length, \"Completed Tasks\": completedTaskList.length }; }) } } The getAllDeveloperTaskStatus function does the following: Reads all the developers\u2019 data Iterates for each developer record Scans the tasklist to fetch the developer-related tasks Based on task status (TO-DO, In-Progress, and Completed) Generate a response that gives a cumulative task breakup for each task status for each developer To display the response generated by getAllDeveloperTaskStatus we'll bind it to a widget. Navigate to Page >> Select Table widget in Widgets Tab >> Drag it onto the canvas. Select the Table Widget on the canvas In the Property Pane on right side add the code {{Utils.getAllDeveloperTaskStatus()}} in Table Data property. {% embed url=\" https://youtu.be/HJGOf5ez4eY \" %} Add a Table Widget to display data The table widget will show the data as shown in the below screenshot. Update Developer Information Let\u2019s add another function where you\u2019ll be able to select a developer record and update the information. To achieve this, add a new column to the table widget and select the Column Type as an icon button type that will open a modal window. {% embed url=\" https://youtu.be/H85pm7Ae_U8 \" %} How to add an edit column to the table widget? Now that the Edit column is added to the table let\u2019s add a modal to fetch the developer information like Name and Email . {% embed url=\" https://youtu.be/lqC0MzK4s5g \" %} How to add a modal to edit a developer's details? Navigate to Explorer >> Select Utils >> Add the code snippet for updateUserData() after getAllDeveloperTaskStatus() . export default { getAllDeveloperTaskStatus: () => { ...// code block for getAllDeveloperTaskStatus }, updateUserData: () => { // Construct new user's data const newUserData = { ...Table1.selectedRow, name: devName.text, email: devEmail.text, } // Run updateDeveloperDetails query updateDeveloperDetails.run( // on successful execution of updateDeveloperDetails run developers to fetch updated data async () => { await developers.run(); closeModal(\"editModal\"); showAlert(\"Developer Details are updated successfully!\"); }, // On Error, close the modal and show an error toast (e) => { closeModal(\"editModal\") showAlert(\"An error occurred while updating the developer details!\"); if (e.statusCode === 401) { navigateTo(\"Page1\"); } }, // Params Object newUserData) } } The updateUserData function does the following: Create the dynamic data that is updated by the user in editModal in newUserData JSON Executes query updateDeveloperDetails On successful execution of the query: Calls developers query to fetch the updated developer details Shows a success toast to the user Closes the editModal On error or failed execution of the query Shows an error toast to the user Closes the editModal Rename the Confirm button to Update and bind the function updateUserData to its onClick() event. You can bind the function call by using {{Utils.updateUserData()}} . When you'll hit the Update button, the updateUserData function gets executed that updates the developer information and refreshes the developer table to fetch the updated information. Add Permissions As you want only the admins to access the Dashboard, let\u2019s create another function for access control. The function will contain a list of users\u2019 emails who will have access to update data in the table. Let\u2019s call this function isAdmin . Add the code snippet for isAdmin() and adminsList to the Utils JS Object. export default { adminsList: [\"admin1@yourdomain.com\", \"admin2@yourdomain.com\", \"admin3@yourdomain.com\"], getAllDeveloperTaskStatus() => { ... // code block for getAllDeveloperTaskStatus }, updateUsersData() => { ... // code block for updateUserData }, isAdmin: (email) => { if (this.adminList.indexOf(appsmith.user.email) > -1) { // check if the logged in user is an admin return true; } return false; } } The final function will look as below: export default { //the allowed list of admin's email adminsList: [\"admin1@yourdomain.com\", \"admin2@yourdomain.com\", \"admin3@yourdomain.com\"], getAllDeveloperTaskStatus: () => { return developers.data.map((developer) => { const developerId = developer.id; const taskList = developerTaskStatus.data.filter((alltask) => alltask.userId === String(developerId)); // fetch all the tasks for the given developer const completedTaskList = taskList.filter((task) => task.status === \"Completed\"); // fetch tasks that are completed by the developer const todoTaskList = taskList.filter((task) => task.status === \"To-Do\"); // fetch tasks that are not yet started by the developer const inProgressTaskList = taskList.filter((task) => task.completed === \"In-Progress\"); // fetch tasks that are in progress by the developer return { \"Id\": developer.id, \"Name\": developer.name, \"Email\": developer.email, \"Total Tasks\": taskList.length, \"To-Do Tasks\": todoTaskList.length, \"In Progress Tasks\": inProgressTaskList.length, \"Completed Tasks\": completedTaskList.length }; }) }, updateUserData: () => { // Construct new user's data const newUserData = { ...Table1.selectedRow, name: devName.text, email: devEmail.text, } // Run updateDeveloperDetails query updateDeveloperDetails.run( // on successful execution of updateDeveloperDetails run developers to fetch updated data async () => { await developers.run(); closeModal(\"editModal\"); showAlert(\"Developer Details are updated successfully!\"); }, // On Error, close the modal and show an error toast (e) => { closeModal(\"editModal\") showAlert(\"An error occurred while updating the developer details!\"); if (e.statusCode === 401) { navigateTo(\"Page1\"); } }, // Params Object newUserData) }, isAdmin: async () => { if (this.adminsList.indexOf(appsmith.user.email) > -1) { return true; } navigateTo(\"Page2\"); return false; } } {% embed url=\" https://youtu.be/cuoUVqzhCMo \" %} A user who is not an admin is taken to a no permissions page Only the users with email added to the adminList will be able to access the dashboard and do the updates. With the Async function settings , you can bind the isAdmin function to RUN ON PAGE LOAD . The execution of IsAdmin on Page load ensures the validation of the user\u2019s email against the adminList for the logged-in user should happen on the page load. If the logged-in user's email is present in the adminsList , the user can access the Dashboard. If not, the user navigates to the access denied page that shows a message: {% hint style=\"info\" %} You do not have permission to access the Dashboard.","title":"Code Workflow"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/#current-limitations","text":"As the JavaScript Editor is in its BETA, there are a few limitations: At the moment, you cannot use JS Objects across pages. We are working to enable this functionality in the future. You can subscribe to the issue and follow the progress. You cannot define variables and functions outside of export default { }. In future iterations, we will allow you to write and export only selected variables/functions from a JS Object . If a function is async, i.e., if it returns a promise, it cannot be called on the fields incompatible with the return type, such as the default text property of the text widget. For example, in the above screenshot executeQuery returns Api1.run() promise and hence is an async function . You can call executeQuery or similar functions only from trigger or event properties such as OnClick .","title":"Current Limitations"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/asynchronous-javascript-function-settings/","text":"Asynchronous JavaScript Function Settings \u00b6 The asynchronous function allows you to choose when you want to execute code. For example, you may want to delay the query execution or fetch the data on demand. How to Define an Asynchronous Function in Appsmith? \u00b6 In the Appsmith environment, a function is termed as async if you are performing one of the below actions: You have a keyword (async) that marks the asynchronous execution of the function. export default{ functionName: async() => { //use async-await or promises } } * You have any in-built Appsmith functions like showModal(), showAlert() , etc., added in the function block. * You want to execute a query or call an API on run time. For example, you have an API GetUsersList, and you want to call this API on runtime, that is, whenever the JS Object function callAPI() is executed. Your function may look as below: export default { callAPI: () => { GetUsersList.run(); } } The line of code GetUsersList.run() marks the function callAPI() for asynchronous execution and hence callAPI function is considered as async. A JavaScript Editor in Appsmith provides some additional settings for asynchronous functions that will help you add more configurations. You can specify the settings in the Settings tab on the Appsmith JS Editor. Settings \u00b6 You\u2019ll see the Settings tab next to Code whenever you have added an asynchronous function to the JS Object. Head to the Settings tab and click on it to reveal additional configurations. Let\u2019s quickly dive into these configurations to understand how they help you make your application behavior better. Navigate to JS Object \u2014> You\u2019ll see Settings next to Code Click on Settings to reveal configurations. You get two settings to configure for asynchronous functions: RUN ON PAGE LOAD CONFIRM BEFORE CALLING The settings are available at the function level. For every asynchronous function defined, you\u2019ll have a corresponding configuration available for a run on page load and confirm before calling. Refer to the screenshot below, where you can see that the functions - myFun2 and showData have configurations available that you can define for them individually. RUN ON PAGE LOAD \u00b6 As the name suggests, you can use the configuration to mark that your function will be executed whenever a page is loaded. For example, you have a page User Listing and have added a JS object with the function GetUserRole which fetches the user\u2019s role. You want that the query should be executed at the time of page load so that the logged-in user will be able to see the user listing. To get this working, you have to set the RUN ON PAGE LOAD configuration as YES for the GetUserRole function. Once the configuration is in place, the function GetUserRole will be executed whenever the app is loaded and the response generated by it will be displayed on the page. {% embed url=\" https://youtu.be/yo2-XEt_EuU \" %} {% hint style=\"info\" %} By default, RUN ON PAGE LOAD is turned ON ( Yes selected) for functions that display data on a widget. That is, the widget binds to the response generated by JSObjectName.asynFunctionName.data . In this case, the on-page load is automatically set as true. You can explicitly change this setting to suit your logic in the Settings tab. If you wish to delay the call of function on demand, then select No . It marks that the function will not be called on page load, and the execution will be deferred until called on demand by calling the function. Configure run on page load \u00b6 On Appsmith, you can bind execution of JS Objects on page load in either of two ways: Bind Response to Widget Whenever you bind a query or API response to a widget , Appsmith automatically sets the execution of the corresponding API or Query on page load. For example, you have a widget that refers to the data property of the JavaScript async function by adding {{JSObject.myFun.data}} , at that time Appsmith marks the execution of that query/API on page load. You can modify the same by navigating to JSObject \u2192 Settings \u2192 RUN ON PAGE LOAD \u2192 Select No . {% embed url=\" https://youtu.be/urnRIZ2xMJk \" %} RUN ON PAGE LOAD Set to Yes when you bind function data to a widget Here\u2019s a quick snapshot of how Appsmith triggers a query or API execution on page load: Add a table widget ( Table1 ), and add a function in JSObject5 that calls an API getUsers . The getUsers API call is embedded in the showData function and generates a user listing. Bind the response generated by showData to table widget Table1 by adding the below code in the Table Data property available on the property pane of the Table widget. {{JSObject5.showData.data}} // behind the scenes Appsmith // marks execution of showData on page load // to get the response and bind it to the table data Asynchronous Function Setting Especially for asynchronous functions , you can explicitly mark the execution of an async function on page load for the corresponding JS Object. Navigate to JS Object \u2014> Click on Settings \u2014> Select Yes for RUN ON PAGE LOAD next to the JS function. You are all set. Appsmith will take care of executing the async function on page load for you. As shown in the screenshot below, you can see that the showData function is called on page load , and Table1 displays the data. CONFIRM BEFORE CALLING \u00b6 With this setting, you can generate a confirmation pop-up and take the user\u2019s input for executing the function. For example, the JS object has the function deletePermission which calls an API that deletes the database\u2019s permission. You would want to ensure that the user wants to delete permission, in which case, you would like to show a confirmation dialogue. The confirmation dialog ensures that the user wants to perform a delete action. A user can choose Yes to delete or can decline the same by choosing No . Thus Confirm Before Calling comes in handy to protect against users accidentally running destructive operations. Configure confirm before calling \u00b6 Confirmation is like a nudge given to the user before executing a function. It ensures that the user is aware of the action that would be performed, and the same is not triggered by chance. A confirmation setting can only be defined explicitly from the Settings tab. Navigate to JS Object \u2014> Click on Settings \u2014> Select Yes for CONFIRM BEFORE CALLING next to the JS function. You are all set. Appsmith will take care of executing and showing the confirmation dialogue to the user whenever the action is triggered. When to use Asynchronous Settings? \u00b6 Asynchronous function settings enable users to create complex workflows by executing functions before the application loads, allowing the data manipulation logic to run and make the desired outcome \u2014 secure function execution with a confirmation before you want application users to execute any critical operations. Let\u2019s understand the settings deeper with examples. For example, you would want to apply restrictions in your application based on the user\u2019s domain. That is, anonymous users (users who are not a part of your domain) cannot access certain application pages. You can quickly implement this by creating a function that uses the asynchronous function setting- Run on page load. {% embed url=\" https://youtu.be/6wCD_fgd8TQ \" %} Appsmith users Vs Non-Appsmith users Here\u2019s a quick snapshot of steps that you can take to create this logic: Create an application and add two pages to it First Page (UserListingForAppsmithUsers)- Add a table, and rename it to UserListing which displays the data generated by the showUserListing function of the DataLoader JS object. The function generates a list of users. Second Page (AnonymousUser) - Displays a message to the user. Create a JS object DataLoader and add a function showUserListing that checks whether the user is logged in or not ._ The function will verify the below logic: If the user is logged in, then the GetUserList API will be called, and the response will be generated If the user is not logged in or is not an appsmith user, redirect the user to the AnonymousUser page. Mark function showUserListing of JS Object - DataLoader to run on page load by selecting Yes . UserListingForAppsmithUsers - DataLoader JS object Code. You can see that a function showUserListing is marked for asynchronous execution by defining the async keyword. export default { showUserListing: async () => { //use async-await or promises if(appsmith.user.isAnonymous) { navigateTo(\"AnonymousUser\"); } //verify if the logged-in user is from appsmith if(appsmith.user.email.match(\"appsmith\")){ return GetUserList.run(); }else{ navigateTo(\"AnonymousUser\"); } } } For logged-in appsmith users, a user listing is shown as the GetUserList API is executed: Anonymous users - Whenever the application renders, the showUserListing function is executed. The function determines whether the user is anonymous. You can use the property of a user object isAnonymous to check the user's logged-in status. appsmith.user.isAnonymous Suppose the user is not logged in, then appsmith.user.isAnonymous returns true and redirects the user to the AnonymousUser page and displays the message. {% hint style=\"info\" %} You are not authorized to view user data. If the user is logged in appsmith.user.isAnonymous returns false and the logic is executed to verify if the logged-in user is an Appsmith user. If the user is an Appsmith user, GetUserList API is called to fetch the user listing. The execution is completed, and the response is generated, displayed in the UserListing table. You can use authentication and authorization using the Async function settings. To get started; view and fork the authentication application , view and fork the authorization application . You can do authentication and authorization using the Async function settings. To get started, you can use one of the below applications: View and fork the authentication application View and fork the authorization application With the out-of-the-box settings provided for async functions, you can manage the execution of your asynchronous functions and create a better user experience.","title":"Asynchronous JavaScript Function Settings"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/asynchronous-javascript-function-settings/#asynchronous-javascript-function-settings","text":"The asynchronous function allows you to choose when you want to execute code. For example, you may want to delay the query execution or fetch the data on demand.","title":"Asynchronous JavaScript Function Settings"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/asynchronous-javascript-function-settings/#how-to-define-an-asynchronous-function-in-appsmith","text":"In the Appsmith environment, a function is termed as async if you are performing one of the below actions: You have a keyword (async) that marks the asynchronous execution of the function. export default{ functionName: async() => { //use async-await or promises } } * You have any in-built Appsmith functions like showModal(), showAlert() , etc., added in the function block. * You want to execute a query or call an API on run time. For example, you have an API GetUsersList, and you want to call this API on runtime, that is, whenever the JS Object function callAPI() is executed. Your function may look as below: export default { callAPI: () => { GetUsersList.run(); } } The line of code GetUsersList.run() marks the function callAPI() for asynchronous execution and hence callAPI function is considered as async. A JavaScript Editor in Appsmith provides some additional settings for asynchronous functions that will help you add more configurations. You can specify the settings in the Settings tab on the Appsmith JS Editor.","title":"How to Define an Asynchronous Function in Appsmith?"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/asynchronous-javascript-function-settings/#settings","text":"You\u2019ll see the Settings tab next to Code whenever you have added an asynchronous function to the JS Object. Head to the Settings tab and click on it to reveal additional configurations. Let\u2019s quickly dive into these configurations to understand how they help you make your application behavior better. Navigate to JS Object \u2014> You\u2019ll see Settings next to Code Click on Settings to reveal configurations. You get two settings to configure for asynchronous functions: RUN ON PAGE LOAD CONFIRM BEFORE CALLING The settings are available at the function level. For every asynchronous function defined, you\u2019ll have a corresponding configuration available for a run on page load and confirm before calling. Refer to the screenshot below, where you can see that the functions - myFun2 and showData have configurations available that you can define for them individually.","title":"Settings"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/asynchronous-javascript-function-settings/#run-on-page-load","text":"As the name suggests, you can use the configuration to mark that your function will be executed whenever a page is loaded. For example, you have a page User Listing and have added a JS object with the function GetUserRole which fetches the user\u2019s role. You want that the query should be executed at the time of page load so that the logged-in user will be able to see the user listing. To get this working, you have to set the RUN ON PAGE LOAD configuration as YES for the GetUserRole function. Once the configuration is in place, the function GetUserRole will be executed whenever the app is loaded and the response generated by it will be displayed on the page. {% embed url=\" https://youtu.be/yo2-XEt_EuU \" %} {% hint style=\"info\" %} By default, RUN ON PAGE LOAD is turned ON ( Yes selected) for functions that display data on a widget. That is, the widget binds to the response generated by JSObjectName.asynFunctionName.data . In this case, the on-page load is automatically set as true. You can explicitly change this setting to suit your logic in the Settings tab. If you wish to delay the call of function on demand, then select No . It marks that the function will not be called on page load, and the execution will be deferred until called on demand by calling the function.","title":"RUN ON PAGE LOAD"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/asynchronous-javascript-function-settings/#configure-run-on-page-load","text":"On Appsmith, you can bind execution of JS Objects on page load in either of two ways: Bind Response to Widget Whenever you bind a query or API response to a widget , Appsmith automatically sets the execution of the corresponding API or Query on page load. For example, you have a widget that refers to the data property of the JavaScript async function by adding {{JSObject.myFun.data}} , at that time Appsmith marks the execution of that query/API on page load. You can modify the same by navigating to JSObject \u2192 Settings \u2192 RUN ON PAGE LOAD \u2192 Select No . {% embed url=\" https://youtu.be/urnRIZ2xMJk \" %} RUN ON PAGE LOAD Set to Yes when you bind function data to a widget Here\u2019s a quick snapshot of how Appsmith triggers a query or API execution on page load: Add a table widget ( Table1 ), and add a function in JSObject5 that calls an API getUsers . The getUsers API call is embedded in the showData function and generates a user listing. Bind the response generated by showData to table widget Table1 by adding the below code in the Table Data property available on the property pane of the Table widget. {{JSObject5.showData.data}} // behind the scenes Appsmith // marks execution of showData on page load // to get the response and bind it to the table data Asynchronous Function Setting Especially for asynchronous functions , you can explicitly mark the execution of an async function on page load for the corresponding JS Object. Navigate to JS Object \u2014> Click on Settings \u2014> Select Yes for RUN ON PAGE LOAD next to the JS function. You are all set. Appsmith will take care of executing the async function on page load for you. As shown in the screenshot below, you can see that the showData function is called on page load , and Table1 displays the data.","title":"Configure run on page load"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/asynchronous-javascript-function-settings/#confirm-before-calling","text":"With this setting, you can generate a confirmation pop-up and take the user\u2019s input for executing the function. For example, the JS object has the function deletePermission which calls an API that deletes the database\u2019s permission. You would want to ensure that the user wants to delete permission, in which case, you would like to show a confirmation dialogue. The confirmation dialog ensures that the user wants to perform a delete action. A user can choose Yes to delete or can decline the same by choosing No . Thus Confirm Before Calling comes in handy to protect against users accidentally running destructive operations.","title":"CONFIRM BEFORE CALLING"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/asynchronous-javascript-function-settings/#configure-confirm-before-calling","text":"Confirmation is like a nudge given to the user before executing a function. It ensures that the user is aware of the action that would be performed, and the same is not triggered by chance. A confirmation setting can only be defined explicitly from the Settings tab. Navigate to JS Object \u2014> Click on Settings \u2014> Select Yes for CONFIRM BEFORE CALLING next to the JS function. You are all set. Appsmith will take care of executing and showing the confirmation dialogue to the user whenever the action is triggered.","title":"Configure confirm before calling"},{"location":"Core%20Concepts/writing-code/javascript-editor-beta/asynchronous-javascript-function-settings/#when-to-use-asynchronous-settings","text":"Asynchronous function settings enable users to create complex workflows by executing functions before the application loads, allowing the data manipulation logic to run and make the desired outcome \u2014 secure function execution with a confirmation before you want application users to execute any critical operations. Let\u2019s understand the settings deeper with examples. For example, you would want to apply restrictions in your application based on the user\u2019s domain. That is, anonymous users (users who are not a part of your domain) cannot access certain application pages. You can quickly implement this by creating a function that uses the asynchronous function setting- Run on page load. {% embed url=\" https://youtu.be/6wCD_fgd8TQ \" %} Appsmith users Vs Non-Appsmith users Here\u2019s a quick snapshot of steps that you can take to create this logic: Create an application and add two pages to it First Page (UserListingForAppsmithUsers)- Add a table, and rename it to UserListing which displays the data generated by the showUserListing function of the DataLoader JS object. The function generates a list of users. Second Page (AnonymousUser) - Displays a message to the user. Create a JS object DataLoader and add a function showUserListing that checks whether the user is logged in or not ._ The function will verify the below logic: If the user is logged in, then the GetUserList API will be called, and the response will be generated If the user is not logged in or is not an appsmith user, redirect the user to the AnonymousUser page. Mark function showUserListing of JS Object - DataLoader to run on page load by selecting Yes . UserListingForAppsmithUsers - DataLoader JS object Code. You can see that a function showUserListing is marked for asynchronous execution by defining the async keyword. export default { showUserListing: async () => { //use async-await or promises if(appsmith.user.isAnonymous) { navigateTo(\"AnonymousUser\"); } //verify if the logged-in user is from appsmith if(appsmith.user.email.match(\"appsmith\")){ return GetUserList.run(); }else{ navigateTo(\"AnonymousUser\"); } } } For logged-in appsmith users, a user listing is shown as the GetUserList API is executed: Anonymous users - Whenever the application renders, the showUserListing function is executed. The function determines whether the user is anonymous. You can use the property of a user object isAnonymous to check the user's logged-in status. appsmith.user.isAnonymous Suppose the user is not logged in, then appsmith.user.isAnonymous returns true and redirects the user to the AnonymousUser page and displays the message. {% hint style=\"info\" %} You are not authorized to view user data. If the user is logged in appsmith.user.isAnonymous returns false and the logic is executed to verify if the logged-in user is an Appsmith user. If the user is an Appsmith user, GetUserList API is called to fetch the user listing. The execution is completed, and the response is generated, displayed in the UserListing table. You can use authentication and authorization using the Async function settings. To get started; view and fork the authentication application , view and fork the authorization application . You can do authentication and authorization using the Async function settings. To get started, you can use one of the below applications: View and fork the authentication application View and fork the authorization application With the out-of-the-box settings provided for async functions, you can manage the execution of your asynchronous functions and create a better user experience.","title":"When to use Asynchronous Settings?"},{"location":"Getting%20Started/code_scan/","text":"Barcodes and QR codes are now found on a wide range of goods, including health bands, rental cars, checked baggage, and clothing purchased from supermarkets or retail stores. They each identify a thing or a person and encode significant information. The Code Scanner widget allows you to scan a variety of barcodes and QR codes. Using this widget, you'll be able to enhance internal business operations and provide excellent customer service. Usage \u00b6 QR/Barcodes have taken off because they offer a clear and fast return on investment. It eliminates manual entry of product information at receiving, meaning there are far fewer opportunities for error. Let's look at some scenarios where a code scanner can be helpful: Warehouse - Companies need to know not just their current inventory levels, but the location of those products, at all times. With the help of a code scanner widget, employees can easily keep track of their warehouse inventories. They can use a code scanner in their app to scan codes rather than manually entering them. Asset Management - The most widely used system by businesses for tracking the equipment, vehicles, and computers to support their everyday operations is the usage of barcodes. With the code scanner widget, you can keep track of equipment and the location of the assets and keep any pertinent maintenance and repair records. Logistics and Transportation industries - Effective track and trace methods offer logistics teams the ability to locate, track, and identify objects in real time, providing better business insight and quicker problem-solving. QR-based tracking eliminates paperwork, reduces errors and increases productivity. Supported QR/Barcode Formats \u00b6 We support the following formats for QR and barcodes: 1D product 1D industrial 2D UPC-A Code 39 QR Code UPC-E Code 128 Data Matrix EAN-8 ITF Aztec EAN-13 RSS-14 PDF 417 Properties \u00b6 Properties allow you to edit the widget, connect it with other widgets and customize the user actions. Property Type Description Code Snippet Text Formatting Sets the label text of the widget. - Visible Binding & Formatting Controls widget's visibility on the page. When turned off, the widget won't be visible when the app is published. Learn more about Visible Property {{CodeScanner1.isVisible}} Disabled Binding & Formatting Disables input to the widget. The widget will remain visible to the user but a user input won't be allowed. Learn more about Disable Property {{CodeScanner1.isDisabled}} Animate Loading Formatting Controls the loading of the widget. Learn more about Animate Loading - Tooltip Formatting It sets a tooltip for the widget. You can add hints or extra information about the required input from the user. Learn more about Tooltip - value Binding Fetches the value of scanned code {{CodeScanner1.value}} Text \u00b6 Text/Label is a widget property that lets you set the text inside the button, describing the function it performs. It displays static text on the button. For example, you can enter \"Scan Menu\" as the label for a button that scans the restaurant menu. Text Video Value \u00b6 Value is a binding property that fetches the response from the scanned code. To bind the value of the code scanner widget to another widget, open the property pane, and add the code snippet given below: {{<your_widget>.value}} For example, let's take a Code Scanner widget (CodeScanner1) and bind its value to a text widget. Drag a text widget onto the canvas and add the following code: {{CodeScanner1.value}} https://youtu.be/zfkpIzaiTX0 Events \u00b6 You can define functions that will be called when these events are triggered in the widget. For example, you can navigate to another page, show alert messages, open and close modals, and store data in local storage. Event Description onCodeDetected Triggers an action when a valid code is detected. See a list of supported actions . onCodeDetected \u00b6 When a valid barcode or QR code is detected, this event triggers an action. The Appsmith framework allows triggering actions for widget events and inside JS Objects. Let\u2019s take an example to understand how the onCodeDetected event works. In this example, we will use the Modal widget to display the code response. Set the onCodeDetected event to open a New Modal, and choose to Create New. This will open up a new modal; let's drag the text widget into the modal. In the property section, add the following code: {{CodeScanner1.value}} Whenever a valid code is detected, a modal window displaying the code response will show up. The video below demonstrates how to achieve that. https://youtu.be/_2p1bMbdk6U Styles \u00b6 Style properties allow you to change the look and feel of the widget. | Style | Description | |----------------|--------------------------------------------------------| | Icon | Sets an icon to be included in the input field. | | Position | Sets the label position of the widget. | | Placement | Sets the label alignment of the widget. | | Button Color | Allows you to set color for the button. | | Border Radius | Allows you to define curved corners. | | Box Shadow | Allows you to choose from the available shadow styles. | Cross Reference Section \u00b6 The following resources will come in handy as you need to learn new tricks: * Core Concepts * Appsmith Framework ## Troubleshooting If you encounter any errors during this process, check out our guide on debugging deployment errors . If you are still facing any issues, please reach out to support@appsmith.com or join our Discord Server to speak to the Appsmith team directly!","title":"Code scan"},{"location":"Getting%20Started/code_scan/#usage","text":"QR/Barcodes have taken off because they offer a clear and fast return on investment. It eliminates manual entry of product information at receiving, meaning there are far fewer opportunities for error. Let's look at some scenarios where a code scanner can be helpful: Warehouse - Companies need to know not just their current inventory levels, but the location of those products, at all times. With the help of a code scanner widget, employees can easily keep track of their warehouse inventories. They can use a code scanner in their app to scan codes rather than manually entering them. Asset Management - The most widely used system by businesses for tracking the equipment, vehicles, and computers to support their everyday operations is the usage of barcodes. With the code scanner widget, you can keep track of equipment and the location of the assets and keep any pertinent maintenance and repair records. Logistics and Transportation industries - Effective track and trace methods offer logistics teams the ability to locate, track, and identify objects in real time, providing better business insight and quicker problem-solving. QR-based tracking eliminates paperwork, reduces errors and increases productivity.","title":"Usage"},{"location":"Getting%20Started/code_scan/#supported-qrbarcode-formats","text":"We support the following formats for QR and barcodes: 1D product 1D industrial 2D UPC-A Code 39 QR Code UPC-E Code 128 Data Matrix EAN-8 ITF Aztec EAN-13 RSS-14 PDF 417","title":"Supported QR/Barcode Formats"},{"location":"Getting%20Started/code_scan/#properties","text":"Properties allow you to edit the widget, connect it with other widgets and customize the user actions. Property Type Description Code Snippet Text Formatting Sets the label text of the widget. - Visible Binding & Formatting Controls widget's visibility on the page. When turned off, the widget won't be visible when the app is published. Learn more about Visible Property {{CodeScanner1.isVisible}} Disabled Binding & Formatting Disables input to the widget. The widget will remain visible to the user but a user input won't be allowed. Learn more about Disable Property {{CodeScanner1.isDisabled}} Animate Loading Formatting Controls the loading of the widget. Learn more about Animate Loading - Tooltip Formatting It sets a tooltip for the widget. You can add hints or extra information about the required input from the user. Learn more about Tooltip - value Binding Fetches the value of scanned code {{CodeScanner1.value}}","title":"Properties"},{"location":"Getting%20Started/code_scan/#text","text":"Text/Label is a widget property that lets you set the text inside the button, describing the function it performs. It displays static text on the button. For example, you can enter \"Scan Menu\" as the label for a button that scans the restaurant menu. Text Video","title":"Text"},{"location":"Getting%20Started/code_scan/#value","text":"Value is a binding property that fetches the response from the scanned code. To bind the value of the code scanner widget to another widget, open the property pane, and add the code snippet given below: {{<your_widget>.value}} For example, let's take a Code Scanner widget (CodeScanner1) and bind its value to a text widget. Drag a text widget onto the canvas and add the following code: {{CodeScanner1.value}} https://youtu.be/zfkpIzaiTX0","title":"Value"},{"location":"Getting%20Started/code_scan/#events","text":"You can define functions that will be called when these events are triggered in the widget. For example, you can navigate to another page, show alert messages, open and close modals, and store data in local storage. Event Description onCodeDetected Triggers an action when a valid code is detected. See a list of supported actions .","title":"Events"},{"location":"Getting%20Started/code_scan/#oncodedetected","text":"When a valid barcode or QR code is detected, this event triggers an action. The Appsmith framework allows triggering actions for widget events and inside JS Objects. Let\u2019s take an example to understand how the onCodeDetected event works. In this example, we will use the Modal widget to display the code response. Set the onCodeDetected event to open a New Modal, and choose to Create New. This will open up a new modal; let's drag the text widget into the modal. In the property section, add the following code: {{CodeScanner1.value}} Whenever a valid code is detected, a modal window displaying the code response will show up. The video below demonstrates how to achieve that. https://youtu.be/_2p1bMbdk6U","title":"onCodeDetected"},{"location":"Getting%20Started/code_scan/#styles","text":"Style properties allow you to change the look and feel of the widget. | Style | Description | |----------------|--------------------------------------------------------| | Icon | Sets an icon to be included in the input field. | | Position | Sets the label position of the widget. | | Placement | Sets the label alignment of the widget. | | Button Color | Allows you to set color for the button. | | Border Radius | Allows you to define curved corners. | | Box Shadow | Allows you to choose from the available shadow styles. |","title":"Styles"},{"location":"Getting%20Started/code_scan/#cross-reference-section","text":"The following resources will come in handy as you need to learn new tricks: * Core Concepts * Appsmith Framework ## Troubleshooting If you encounter any errors during this process, check out our guide on debugging deployment errors . If you are still facing any issues, please reach out to support@appsmith.com or join our Discord Server to speak to the Appsmith team directly!","title":"Cross Reference Section"},{"location":"Getting%20Started/faq/","text":"FAQ \u00b6 What kind of apps can be built on Appsmith? \u00b6 You can use Appsmith to build custom forms, dashboards & workflows. Tools like Customer Support Dashboards, Offer Management Consoles & Product Cataloging Systems are all prime use cases for Appsmith. You can also use it as a clean UI layer over manually triggered scripts, confusing deployment pipelines & basic database CRUD operations. There's very little preventing you from using Appsmith to bring any idea to life but we've optimized the product to make building internal tools a hassle-free experience. Can I write code in Appsmith? \u00b6 Yes, absolutely. You can write JS code anywhere inside the product within {{ }} . We know how complex and intricate business logic can be and trying to build it without code can get excruciating. Appsmith bridges mundane API and UI configurations with powerful code expressions to let you build the apps the way you see them fit. What type of data security does appsmith provide? \u00b6 Appsmith safely encrypts all your database credentials and stores them securely. Appsmith also does not store any data returned from your data sources and acts only as a proxy layer to orchestrate the API / Query calls. Appsmith is an open-source platform and can be fully audited and deployed on-premise to ensure none of your data leaves your VPC. What if there is a missing feature that I need? \u00b6 We take all community feature requests very seriously and the best way to request for a missing feature is by raising a Github Issue . Alternatively, we welcome external contributions and would be happy to help you unblock yourself with a feature on the platform. This is our Contribution Guide . How do I get help building an app? \u00b6 We provide support via our active discord community and GitHub issues. We're also happy to get on a call and help you build your apps! Read our Getting Help Section How is Appsmith different from other app builders? \u00b6 Appsmith is the first open-source visual platform for building internal tools. Appsmith gives you building blocks (widgets, APIs, Queries) that you can configure and connect together using javascript. This ensures that you never get blocked trying to create a custom workflow and you don't spend time building repetitive components! What can't I do on Appsmith? \u00b6 Appsmith isn't built for complicated UI interactions that are common to e-commerce or other consumer-facing websites. It works great for tools & workflows internal to your team or organization but you wouldn't get very far trying to build an attractive consumer website. For those use cases, we'd recommend you try Wix , Squarespace , or Webflow . Does Appsmith support multi-user editing? \u00b6 Appsmith currently is built for a single user editor experience. If you try to update the same page/widget/action from two different places, it will overwrite each other and will lead to a loss of work. We recommend that at a given time, only one user is editing a page in a single open tab. Multi-user editing is on our product roadmap for 2022.","title":"FAQ"},{"location":"Getting%20Started/faq/#faq","text":"","title":"FAQ"},{"location":"Getting%20Started/faq/#what-kind-of-apps-can-be-built-on-appsmith","text":"You can use Appsmith to build custom forms, dashboards & workflows. Tools like Customer Support Dashboards, Offer Management Consoles & Product Cataloging Systems are all prime use cases for Appsmith. You can also use it as a clean UI layer over manually triggered scripts, confusing deployment pipelines & basic database CRUD operations. There's very little preventing you from using Appsmith to bring any idea to life but we've optimized the product to make building internal tools a hassle-free experience.","title":"What kind of apps can be built on Appsmith?"},{"location":"Getting%20Started/faq/#can-i-write-code-in-appsmith","text":"Yes, absolutely. You can write JS code anywhere inside the product within {{ }} . We know how complex and intricate business logic can be and trying to build it without code can get excruciating. Appsmith bridges mundane API and UI configurations with powerful code expressions to let you build the apps the way you see them fit.","title":"Can I write code in Appsmith?"},{"location":"Getting%20Started/faq/#what-type-of-data-security-does-appsmith-provide","text":"Appsmith safely encrypts all your database credentials and stores them securely. Appsmith also does not store any data returned from your data sources and acts only as a proxy layer to orchestrate the API / Query calls. Appsmith is an open-source platform and can be fully audited and deployed on-premise to ensure none of your data leaves your VPC.","title":"What type of data security does appsmith provide?"},{"location":"Getting%20Started/faq/#what-if-there-is-a-missing-feature-that-i-need","text":"We take all community feature requests very seriously and the best way to request for a missing feature is by raising a Github Issue . Alternatively, we welcome external contributions and would be happy to help you unblock yourself with a feature on the platform. This is our Contribution Guide .","title":"What if there is a missing feature that I need?"},{"location":"Getting%20Started/faq/#how-do-i-get-help-building-an-app","text":"We provide support via our active discord community and GitHub issues. We're also happy to get on a call and help you build your apps! Read our Getting Help Section","title":"How do I get help building an app?"},{"location":"Getting%20Started/faq/#how-is-appsmith-different-from-other-app-builders","text":"Appsmith is the first open-source visual platform for building internal tools. Appsmith gives you building blocks (widgets, APIs, Queries) that you can configure and connect together using javascript. This ensures that you never get blocked trying to create a custom workflow and you don't spend time building repetitive components!","title":"How is Appsmith different from other app builders?"},{"location":"Getting%20Started/faq/#what-cant-i-do-on-appsmith","text":"Appsmith isn't built for complicated UI interactions that are common to e-commerce or other consumer-facing websites. It works great for tools & workflows internal to your team or organization but you wouldn't get very far trying to build an attractive consumer website. For those use cases, we'd recommend you try Wix , Squarespace , or Webflow .","title":"What can't I do on Appsmith?"},{"location":"Getting%20Started/faq/#does-appsmith-support-multi-user-editing","text":"Appsmith currently is built for a single user editor experience. If you try to update the same page/widget/action from two different places, it will overwrite each other and will lead to a loss of work. We recommend that at a given time, only one user is editing a page in a single open tab. Multi-user editing is on our product roadmap for 2022.","title":"Does Appsmith support multi-user editing?"},{"location":"Getting%20Started/start-building/","text":"Build Your First App \u00b6 In this Quickstart guide, you will learn to Create a new application Connect to a database Build UI by dragging and dropping widgets onto the canvas Write queries to fetch data from the database Bind data to widgets Deploy and share the application Prerequisites \u00b6 Before you begin, you'll need to create an account on Appsmith Cloud , or you can self-host Appsmith locally or on a hosting platform of your choice. Create a New Application \u00b6 When creating a new Appsmith account , an application titled ' My first application' is automatically added under the default Workspace . You can use this application to build your first app or create a new one by clicking on the + New button under the Workspace. For this tutorial, we will use the default application. Hover over the ' My first application' card and click the Edit button to open the application. You'll land on the Appsmith editor. Select the Build with drag & drop option to start from scratch and create your custom UI. 'Page 1' is the default page on the application. To rename the page, click on the Kebab menu (three vertical dots) and select Edit Name . Label the page ' User Information '. Connect Database \u00b6 We'll use the mock PostgreSQL database named ' users' available on Appsmith. On the Explorer tab, click the + sign next to DATASOURCES . Under Sample Databases, select users. The ' users' database will be added under the Explorer tab -> DATASOURCES . Build UI \u00b6 Navigate to PAGES \u2192 User Information . Drag and drop a Table widget on the canvas. On the Property Pane to the right, rename the table to ' usersTable '. Drag and drop a Container widget to the right of the Table widget. Let's add a few widgets to display user details from the selected row on the table. Add a label titled ' User Details '. Add Input widgets for Name **** (nameInput), Email (emailInput) and Phone (phoneInput), a Datepicker widget for DOB (dobInput), an Image widget for the Image and finally a Button widget labelled ' Update '. Create Queries and Bind Data to Widgets \u00b6 On the Explorer tab, navigate to the database under DATASOURCES \u2192 users Click on the New Query + button next to the datasource. Rename the query to \u2018 getUsers \u2019 Write the below query to pull ten records from the ' users' table in the database. SELECT * FROM users ORDER BY id LIMIT 10; Click the Run button on the right of the Query Editor to confirm that the query returns data. Navigate to PAGES \u2192 User Information . Hover over the table and click on the table name 'usersTable' to open the property pane. On the Table Data property write this JS snippet {{getUsers.data}} to display the results from the 'getUsers**'** query on the table. {% hint style=\"info\" %} The {{mustache}} template is used to write JS inside widgets and queries. Similarly, to display information from a selected row on the table, refer below to bind the corresponding data to the widgets inside the Container. Widget Name Property Value Image - Image {{usersTable.selectedRow.image}} Name nameInput Default Text {{usersTable.selectedRow.name}} Email emailInput Default Text {{usersTable.selectedRow.email}} DOB dobInput Default Date * {{usersTable.selectedRow.dob}} Phone phoneInput Default Text {{usersTable.selectedRow.phone}} {% hint style=\"warning\" %} Turn on the JS toggle to bind data for the Default Date property Create another query on the ' users' database and rename it to ' updateUsers '. Use the below update command to write any modified data on the widgets back to the database. UPDATE users SET name = '{{nameInput.text}}', email = '{{emailInput.text}}', dob = '{{dobInput.selectedDate}}', phone = '{{phoneInput.text}}' WHERE id = {{usersTable.selectedRow.id}} On the property pane of the Update button execute this query on the onClick event. On the success of the update query, run the ' getusers' query to populate the table with updated data. Test the 'Update' button by modifying the phone number of the user. You\u2019ve completed your first app that can display information from the database and update data, all in just a few minutes. Deploy and Share \u00b6 Click the Deploy button on the top right of the Appsmith editor to deploy the app and test it as an App Viewer. Once deployed, you can share your application with users. Click the Share button on the top right of the Appsmith editor. Invite specific users using their email ID Select an appropriate role for the user Share the application's URL with the user You can also make the application public . In this case, anyone with the application URL can view the application without signing in. You can read more about access control here . {% hint style=\"info\" %} Congratulations , you have completed the Appsmith Quickstart tutorial. Now that you have created your first Appsmith application, you may be wondering what to learn next. The Quickstart covered only the basic concepts. There's so much more to explore, so head over to the next steps .","title":"Build Your First App"},{"location":"Getting%20Started/start-building/#build-your-first-app","text":"In this Quickstart guide, you will learn to Create a new application Connect to a database Build UI by dragging and dropping widgets onto the canvas Write queries to fetch data from the database Bind data to widgets Deploy and share the application","title":"Build Your First App"},{"location":"Getting%20Started/start-building/#prerequisites","text":"Before you begin, you'll need to create an account on Appsmith Cloud , or you can self-host Appsmith locally or on a hosting platform of your choice.","title":"Prerequisites"},{"location":"Getting%20Started/start-building/#create-a-new-application","text":"When creating a new Appsmith account , an application titled ' My first application' is automatically added under the default Workspace . You can use this application to build your first app or create a new one by clicking on the + New button under the Workspace. For this tutorial, we will use the default application. Hover over the ' My first application' card and click the Edit button to open the application. You'll land on the Appsmith editor. Select the Build with drag & drop option to start from scratch and create your custom UI. 'Page 1' is the default page on the application. To rename the page, click on the Kebab menu (three vertical dots) and select Edit Name . Label the page ' User Information '.","title":"Create a New Application"},{"location":"Getting%20Started/start-building/#connect-database","text":"We'll use the mock PostgreSQL database named ' users' available on Appsmith. On the Explorer tab, click the + sign next to DATASOURCES . Under Sample Databases, select users. The ' users' database will be added under the Explorer tab -> DATASOURCES .","title":"Connect Database"},{"location":"Getting%20Started/start-building/#build-ui","text":"Navigate to PAGES \u2192 User Information . Drag and drop a Table widget on the canvas. On the Property Pane to the right, rename the table to ' usersTable '. Drag and drop a Container widget to the right of the Table widget. Let's add a few widgets to display user details from the selected row on the table. Add a label titled ' User Details '. Add Input widgets for Name **** (nameInput), Email (emailInput) and Phone (phoneInput), a Datepicker widget for DOB (dobInput), an Image widget for the Image and finally a Button widget labelled ' Update '.","title":"Build UI"},{"location":"Getting%20Started/start-building/#create-queries-and-bind-data-to-widgets","text":"On the Explorer tab, navigate to the database under DATASOURCES \u2192 users Click on the New Query + button next to the datasource. Rename the query to \u2018 getUsers \u2019 Write the below query to pull ten records from the ' users' table in the database. SELECT * FROM users ORDER BY id LIMIT 10; Click the Run button on the right of the Query Editor to confirm that the query returns data. Navigate to PAGES \u2192 User Information . Hover over the table and click on the table name 'usersTable' to open the property pane. On the Table Data property write this JS snippet {{getUsers.data}} to display the results from the 'getUsers**'** query on the table. {% hint style=\"info\" %} The {{mustache}} template is used to write JS inside widgets and queries. Similarly, to display information from a selected row on the table, refer below to bind the corresponding data to the widgets inside the Container. Widget Name Property Value Image - Image {{usersTable.selectedRow.image}} Name nameInput Default Text {{usersTable.selectedRow.name}} Email emailInput Default Text {{usersTable.selectedRow.email}} DOB dobInput Default Date * {{usersTable.selectedRow.dob}} Phone phoneInput Default Text {{usersTable.selectedRow.phone}} {% hint style=\"warning\" %} Turn on the JS toggle to bind data for the Default Date property Create another query on the ' users' database and rename it to ' updateUsers '. Use the below update command to write any modified data on the widgets back to the database. UPDATE users SET name = '{{nameInput.text}}', email = '{{emailInput.text}}', dob = '{{dobInput.selectedDate}}', phone = '{{phoneInput.text}}' WHERE id = {{usersTable.selectedRow.id}} On the property pane of the Update button execute this query on the onClick event. On the success of the update query, run the ' getusers' query to populate the table with updated data. Test the 'Update' button by modifying the phone number of the user. You\u2019ve completed your first app that can display information from the database and update data, all in just a few minutes.","title":"Create Queries and Bind Data to Widgets"},{"location":"Getting%20Started/start-building/#deploy-and-share","text":"Click the Deploy button on the top right of the Appsmith editor to deploy the app and test it as an App Viewer. Once deployed, you can share your application with users. Click the Share button on the top right of the Appsmith editor. Invite specific users using their email ID Select an appropriate role for the user Share the application's URL with the user You can also make the application public . In this case, anyone with the application URL can view the application without signing in. You can read more about access control here . {% hint style=\"info\" %} Congratulations , you have completed the Appsmith Quickstart tutorial. Now that you have created your first Appsmith application, you may be wondering what to learn next. The Quickstart covered only the basic concepts. There's so much more to explore, so head over to the next steps .","title":"Deploy and Share"},{"location":"Getting%20Started/setup/","text":"Self Hosting \u00b6 \ud83d\udd14 The only officially supported installs of Appsmith are Docker based. You can follow one of our guides to deploy Appsmith via the technology you prefer Docker (Recommended) Kubernetes AWS AMI AWS ECS DigitalOcean Heroku Ansible {% hint style=\"info\" %} Minimum system requirements: We recommend 4 GB RAM with 2 CPUs (t3.medium on AWS). {% hint style=\"warning\" %} The self-hosted version is not air-gapped and pings a cloud service to fetch release notes about our product updates. It helps you stay up to date with the latest changes to your Appsmith deployment. If you would like a fully air-gapped deployment, please write to support@appsmith.com {% hint style=\"warning\" %} Please note that Appsmith's Docker image does not run on OpenShift platform today. Troubleshooting \u00b6 If you encounter an error while installing Appsmith on any platform, reach out to support@appsmith.com or join our Discord Server . If you know the error and want to reinstall Appsmith, delete the installation folder and the templates folder and execute the script again.","title":"Self Hosting"},{"location":"Getting%20Started/setup/#self-hosting","text":"\ud83d\udd14 The only officially supported installs of Appsmith are Docker based. You can follow one of our guides to deploy Appsmith via the technology you prefer Docker (Recommended) Kubernetes AWS AMI AWS ECS DigitalOcean Heroku Ansible {% hint style=\"info\" %} Minimum system requirements: We recommend 4 GB RAM with 2 CPUs (t3.medium on AWS). {% hint style=\"warning\" %} The self-hosted version is not air-gapped and pings a cloud service to fetch release notes about our product updates. It helps you stay up to date with the latest changes to your Appsmith deployment. If you would like a fully air-gapped deployment, please write to support@appsmith.com {% hint style=\"warning\" %} Please note that Appsmith's Docker image does not run on OpenShift platform today.","title":"Self Hosting"},{"location":"Getting%20Started/setup/#troubleshooting","text":"If you encounter an error while installing Appsmith on any platform, reach out to support@appsmith.com or join our Discord Server . If you know the error and want to reinstall Appsmith, delete the installation folder and the templates folder and execute the script again.","title":"Troubleshooting"},{"location":"Getting%20Started/setup/installation-guides/","text":"Installation Guides \u00b6 Docker Kubernetes AWS AMI AWS ECS Digital Ocean Heroku CloudJiffy Ansible","title":"Installation Guides"},{"location":"Getting%20Started/setup/installation-guides/#installation-guides","text":"Docker Kubernetes AWS AMI AWS ECS Digital Ocean Heroku CloudJiffy Ansible","title":"Installation Guides"},{"location":"Getting%20Started/setup/installation-guides/ansible/","text":"Ansible \u00b6 Deployment Steps: \u00b6 Install Ansible Ansible inventory setup Ansible configuration vars setup for Appsmith Run the Ansible playbook Step 1: Install Ansible \u00b6 You can skip this step if you already have ansible intalled. There are two options for installing Ansible: Option 1: Using OS specific Package Managers. To install on Ubuntu, you can run the following commands: $ sudo apt update $ sudo apt install software-properties-common $ sudo add-apt-repository --yes --update ppa:ansible/ansible $ sudo apt install ansible * Please refer to Ansible's official installation guide for other operating systems. * Option 2: Using pip : $ sudo pip install ansible If you do not have pip installed on your system, please refer to Ansible's official guide on installing with pip. Step 2: Ansible inventory setup \u00b6 Clone the Appsmith repository to your machine & move to the ansible playbook folder. $ git clone https://github.com/appsmithorg/appsmith.git $ cd ./appsmith/deploy/ansible/appsmith_playbook 2. Create the inventory file. $ touch inventory 3. To configure the inventory file, open it with your editor and add the hostname or FQDN of the server(s) you want to deploy Appsmith, along with the ansible port and ansible_user. The inventory file should follow the given format: appsmith ansible_host={{ SERVER_HOST }} ansible_port={{ SERVER_PORT }} ansible_user={{ SERVER_USER }} If you are using SSH keypairs for authenticating your SSH connections to your server. You can specify your ssh private key file in the inventory file using ansible_ssh_private_key_file appsmith ansible_host={{ SERVER_HOST }} ansible_port={{ SERVER_PORT }} ansible_user={{ SERVER_USER }} ansible_ssh_private_key_file={{ SSH_PRIVATE_KEY_FILE }} Step 3: Ansible configuration vars setup for Appsmith \u00b6 Open appsmith-vars.yml file with your editor.\\ There are some variables that will need input from you to get the application start correctly install_dir : The absolute path of your app's installation folder on the server (required). Default value: ~/appsmith Step 4: Run the Ansible playbook \u00b6 You can run the ansible playbook with the following command: $ ansible-playbook -i inventory appsmith-playbook.yml --extra-vars \"@appsmith-vars.yml\" The command above will use the host information from the inventory file & feed your configuration vars from appsmith-vars.yml before running the playbook When it's all done, provided all went well and no parameters were changed, you should be able to visit your app on browser using your custom_domain or by your SERVER_HOST (if you didn't provide value for custom_domain variable ) Note : You can put your inventory file in other folder and then specify its path with the -i flag, for more detail, please check Ansible Inventory documentation Troubleshooting \u00b6 If you encounter any errors during this process, check out our guide on debugging deployment errors , if you are still facing an issue please reach out to support@appsmith.com or join our Discord Server to directly speak to the Appsmith team!","title":"Ansible"},{"location":"Getting%20Started/setup/installation-guides/ansible/#ansible","text":"","title":"Ansible"},{"location":"Getting%20Started/setup/installation-guides/ansible/#deployment-steps","text":"Install Ansible Ansible inventory setup Ansible configuration vars setup for Appsmith Run the Ansible playbook","title":"Deployment Steps:"},{"location":"Getting%20Started/setup/installation-guides/ansible/#step-1-install-ansible","text":"You can skip this step if you already have ansible intalled. There are two options for installing Ansible: Option 1: Using OS specific Package Managers. To install on Ubuntu, you can run the following commands: $ sudo apt update $ sudo apt install software-properties-common $ sudo add-apt-repository --yes --update ppa:ansible/ansible $ sudo apt install ansible * Please refer to Ansible's official installation guide for other operating systems. * Option 2: Using pip : $ sudo pip install ansible If you do not have pip installed on your system, please refer to Ansible's official guide on installing with pip.","title":"Step 1: Install Ansible"},{"location":"Getting%20Started/setup/installation-guides/ansible/#step-2-ansible-inventory-setup","text":"Clone the Appsmith repository to your machine & move to the ansible playbook folder. $ git clone https://github.com/appsmithorg/appsmith.git $ cd ./appsmith/deploy/ansible/appsmith_playbook 2. Create the inventory file. $ touch inventory 3. To configure the inventory file, open it with your editor and add the hostname or FQDN of the server(s) you want to deploy Appsmith, along with the ansible port and ansible_user. The inventory file should follow the given format: appsmith ansible_host={{ SERVER_HOST }} ansible_port={{ SERVER_PORT }} ansible_user={{ SERVER_USER }} If you are using SSH keypairs for authenticating your SSH connections to your server. You can specify your ssh private key file in the inventory file using ansible_ssh_private_key_file appsmith ansible_host={{ SERVER_HOST }} ansible_port={{ SERVER_PORT }} ansible_user={{ SERVER_USER }} ansible_ssh_private_key_file={{ SSH_PRIVATE_KEY_FILE }}","title":"Step 2: Ansible inventory setup"},{"location":"Getting%20Started/setup/installation-guides/ansible/#step-3-ansible-configuration-vars-setup-for-appsmith","text":"Open appsmith-vars.yml file with your editor.\\ There are some variables that will need input from you to get the application start correctly install_dir : The absolute path of your app's installation folder on the server (required). Default value: ~/appsmith","title":"Step 3: Ansible configuration vars setup for Appsmith"},{"location":"Getting%20Started/setup/installation-guides/ansible/#step-4-run-the-ansible-playbook","text":"You can run the ansible playbook with the following command: $ ansible-playbook -i inventory appsmith-playbook.yml --extra-vars \"@appsmith-vars.yml\" The command above will use the host information from the inventory file & feed your configuration vars from appsmith-vars.yml before running the playbook When it's all done, provided all went well and no parameters were changed, you should be able to visit your app on browser using your custom_domain or by your SERVER_HOST (if you didn't provide value for custom_domain variable ) Note : You can put your inventory file in other folder and then specify its path with the -i flag, for more detail, please check Ansible Inventory documentation","title":"Step 4: Run the Ansible playbook"},{"location":"Getting%20Started/setup/installation-guides/ansible/#troubleshooting","text":"If you encounter any errors during this process, check out our guide on debugging deployment errors , if you are still facing an issue please reach out to support@appsmith.com or join our Discord Server to directly speak to the Appsmith team!","title":"Troubleshooting"},{"location":"Getting%20Started/setup/installation-guides/aws-ami/","text":"AWS AMI \u00b6 Tutorial Steps: \u00b6 Register with Amazon Web Services (AWS) Generate an SSH key pair Create an AWS Security Group Deploy Appsmith on an AWS cloud server Find Application Credentials Updating your Appsmith installation Step 1: Register With Amazon Web Services \u00b6 If you already have an Amazon Web Services account, you may skip this step. Please follow the steps detailed here in order to create an account on AWS. Step 2: Generate an SSH key pair \u00b6 If you already have an SSH key pair for the AWS region you are operating in, you can skip this step. Please follow the steps detailed here to generate a new key-pair. You need this key to SSH into your AWS EC2 instance. Step 3: Create an AWS Security Group \u00b6 If you already have an existing security group with ports 80, 443 and 22 open, you can skip this step. Appsmith is a web application that requires ports 80 and 443 for HTTP access. It also requires port 22 to be accessible for SSH access. Please follow the steps detailed here to create a new security group. While creating the the new security group, please follow the steps detailed here to edit the \"Inbound Rules\" and make ports 80, 443 and 22 accessible from anywhere. Step 4: Deploy Appsmith On AWS Cloud \u00b6 The next step is to launch a cloud server with the Appsmith Amazon Machine Image (AMI) running on it. The AWS Console lets you do this in just a couple of clicks. Follow these steps: Navigate to the \" Amazon EC2 dashboard\" , select the \u201c AMIs \u201d option in the \u201c Images \u201d menu. Search for the Appsmith Stack by entering the search term \" appsmith \" in the search bar at the top. Select the image in the list of search results and click the \u201c Launch \u201d button. On the resulting detail page, review the available server sizes. Select the server size you wish to use and click \u201c Review and Launch \u201d to proceed. On the review page, click the \u201c Edit security groups \u201d link. On the \u201c Configure Security Group \u201d page, choose the option to \u201c Select an existing security group \u201d. Find the security group you created in Step 3 and select it. Click the \u201cReview and Launch\u201d button to proceed. Verify that the correct key pair (created in Step 2 ) will be used for the server. Confirm your selection by hitting the \u201c Launch Instance \u201d button. The AWS Console will now begin spinning up the new server. The process usually takes a few minutes. Use the EC2 Dashboard to check the status of the server. Once the server has launched, you will be able to obtain its public IP address from the EC2 Dashboard, as shown below: At this point, you should be able to browse to the cloud server, by entering the cloud server IP address or DNS name directly into your browser\u2019s address bar. You should now see your web app home page as shown below: Application Credentials \u00b6 By default, Appsmith boots up with default user credentials that allow you to login without needing to sign up. The default username is: appsmith@example.com . There are two options for obtaining the password. Option 1: Find Credentials By Checking The System Log On The AWS Cloud Console (EC2) \u00b6 {% hint style=\"warning\" %} IMPORTANT: The application password is only available in the system log for the first 24 hours after you first start the instance. We strongly recommend that you note it down immediately on the first boot and save it in a safe place, as you will be unable to access the instance console without it. We also recommend that you change it as soon as possible for security reasons. Go to your EC2 instances dashboard on AWS Select the instance From the \u201cActions\u201d drop-down menu, select the \u201cGet System Log\u201d menu item. Review the system log until you find the application password. You will also find the default username printed in the logs. Option 2: Find Credentials By Connecting To Your Application Through SSH \u00b6 The default application credentials are stored in a standalone file. To obtain these credentials at any time, follow these instructions: SSH into your server using your private key Run the following command to see your application credentials: sudo cat /home/ubuntu/appsmith/credential Updating Your Appsmith Installation \u00b6 You can either choose to update the Appsmith installation manually or choose to enable auto-updates. Update Installation Manually \u00b6 To update Appsmith manually, ssh into the ec2 instance with the username appsmith and run the following command: cd appsmith && sudo docker-compose pull && sudo docker-compose rm -fsv appsmith && sudo docker-compose up -d Enable Auto-Updates \u00b6 If your Appsmith setup does not have auto-update enabled that is the Watchtower container is not running along with Appsmith in the host machine . Follow the steps below to enable auto-update: SSH into the ec2 instance with username appsmith Change directory to /appsmith Run the below command to stop and remove the container and its resources \u2028docker-compose down\u2028 Open the docker-compose.yml file with any text editor and uncomment the lines 13 to 23 Save the file Run the below command \u2028docker-compose up -d Troubleshooting \u00b6 If you encounter any errors during this process, check out our guide on debugging deployment errors , if you are still facing an issue please reach out to support@appsmith.com or join our Discord Server to directly speak to the Appsmith team! Further Reading \u00b6 Configuring Self Hosted Instances Managing the Appsmith instance Tutorials","title":"AWS AMI"},{"location":"Getting%20Started/setup/installation-guides/aws-ami/#aws-ami","text":"","title":"AWS AMI"},{"location":"Getting%20Started/setup/installation-guides/aws-ami/#tutorial-steps","text":"Register with Amazon Web Services (AWS) Generate an SSH key pair Create an AWS Security Group Deploy Appsmith on an AWS cloud server Find Application Credentials Updating your Appsmith installation","title":"Tutorial Steps:"},{"location":"Getting%20Started/setup/installation-guides/aws-ami/#step-1-register-with-amazon-web-services","text":"If you already have an Amazon Web Services account, you may skip this step. Please follow the steps detailed here in order to create an account on AWS.","title":"Step 1: Register With Amazon Web Services"},{"location":"Getting%20Started/setup/installation-guides/aws-ami/#step-2-generate-an-ssh-key-pair","text":"If you already have an SSH key pair for the AWS region you are operating in, you can skip this step. Please follow the steps detailed here to generate a new key-pair. You need this key to SSH into your AWS EC2 instance.","title":"Step 2: Generate an SSH key pair"},{"location":"Getting%20Started/setup/installation-guides/aws-ami/#step-3-create-an-aws-security-group","text":"If you already have an existing security group with ports 80, 443 and 22 open, you can skip this step. Appsmith is a web application that requires ports 80 and 443 for HTTP access. It also requires port 22 to be accessible for SSH access. Please follow the steps detailed here to create a new security group. While creating the the new security group, please follow the steps detailed here to edit the \"Inbound Rules\" and make ports 80, 443 and 22 accessible from anywhere.","title":"Step 3: Create an AWS Security Group"},{"location":"Getting%20Started/setup/installation-guides/aws-ami/#step-4-deploy-appsmith-on-aws-cloud","text":"The next step is to launch a cloud server with the Appsmith Amazon Machine Image (AMI) running on it. The AWS Console lets you do this in just a couple of clicks. Follow these steps: Navigate to the \" Amazon EC2 dashboard\" , select the \u201c AMIs \u201d option in the \u201c Images \u201d menu. Search for the Appsmith Stack by entering the search term \" appsmith \" in the search bar at the top. Select the image in the list of search results and click the \u201c Launch \u201d button. On the resulting detail page, review the available server sizes. Select the server size you wish to use and click \u201c Review and Launch \u201d to proceed. On the review page, click the \u201c Edit security groups \u201d link. On the \u201c Configure Security Group \u201d page, choose the option to \u201c Select an existing security group \u201d. Find the security group you created in Step 3 and select it. Click the \u201cReview and Launch\u201d button to proceed. Verify that the correct key pair (created in Step 2 ) will be used for the server. Confirm your selection by hitting the \u201c Launch Instance \u201d button. The AWS Console will now begin spinning up the new server. The process usually takes a few minutes. Use the EC2 Dashboard to check the status of the server. Once the server has launched, you will be able to obtain its public IP address from the EC2 Dashboard, as shown below: At this point, you should be able to browse to the cloud server, by entering the cloud server IP address or DNS name directly into your browser\u2019s address bar. You should now see your web app home page as shown below:","title":"Step 4: Deploy Appsmith On AWS Cloud"},{"location":"Getting%20Started/setup/installation-guides/aws-ami/#application-credentials","text":"By default, Appsmith boots up with default user credentials that allow you to login without needing to sign up. The default username is: appsmith@example.com . There are two options for obtaining the password.","title":"Application Credentials"},{"location":"Getting%20Started/setup/installation-guides/aws-ami/#option-1-find-credentials-by-checking-the-system-log-on-the-aws-cloud-console-ec2","text":"{% hint style=\"warning\" %} IMPORTANT: The application password is only available in the system log for the first 24 hours after you first start the instance. We strongly recommend that you note it down immediately on the first boot and save it in a safe place, as you will be unable to access the instance console without it. We also recommend that you change it as soon as possible for security reasons. Go to your EC2 instances dashboard on AWS Select the instance From the \u201cActions\u201d drop-down menu, select the \u201cGet System Log\u201d menu item. Review the system log until you find the application password. You will also find the default username printed in the logs.","title":"Option 1: Find Credentials By Checking The System Log On The AWS Cloud Console (EC2)"},{"location":"Getting%20Started/setup/installation-guides/aws-ami/#option-2-find-credentials-by-connecting-to-your-application-through-ssh","text":"The default application credentials are stored in a standalone file. To obtain these credentials at any time, follow these instructions: SSH into your server using your private key Run the following command to see your application credentials: sudo cat /home/ubuntu/appsmith/credential","title":"Option 2: Find Credentials By Connecting To Your Application Through SSH"},{"location":"Getting%20Started/setup/installation-guides/aws-ami/#updating-your-appsmith-installation","text":"You can either choose to update the Appsmith installation manually or choose to enable auto-updates.","title":"Updating Your Appsmith Installation"},{"location":"Getting%20Started/setup/installation-guides/aws-ami/#update-installation-manually","text":"To update Appsmith manually, ssh into the ec2 instance with the username appsmith and run the following command: cd appsmith && sudo docker-compose pull && sudo docker-compose rm -fsv appsmith && sudo docker-compose up -d","title":"Update Installation Manually"},{"location":"Getting%20Started/setup/installation-guides/aws-ami/#enable-auto-updates","text":"If your Appsmith setup does not have auto-update enabled that is the Watchtower container is not running along with Appsmith in the host machine . Follow the steps below to enable auto-update: SSH into the ec2 instance with username appsmith Change directory to /appsmith Run the below command to stop and remove the container and its resources \u2028docker-compose down\u2028 Open the docker-compose.yml file with any text editor and uncomment the lines 13 to 23 Save the file Run the below command \u2028docker-compose up -d","title":"Enable Auto-Updates"},{"location":"Getting%20Started/setup/installation-guides/aws-ami/#troubleshooting","text":"If you encounter any errors during this process, check out our guide on debugging deployment errors , if you are still facing an issue please reach out to support@appsmith.com or join our Discord Server to directly speak to the Appsmith team!","title":"Troubleshooting"},{"location":"Getting%20Started/setup/installation-guides/aws-ami/#further-reading","text":"Configuring Self Hosted Instances Managing the Appsmith instance Tutorials","title":"Further Reading"},{"location":"Getting%20Started/setup/installation-guides/aws-ecs/","text":"AWS ECS \u00b6 Prerequisites \u00b6 1: Register With Amazon Web Services \u00b6 If you already have an Amazon Web Services account, you may skip this step. Please follow the steps detailed here in order to create an account on AWS. 2: Generate an SSH key pair \u00b6 If you already have an SSH key pair for the AWS region you are operating in, you can skip this step. Please follow the steps detailed here to generate a new key pair. You need this key to SSH into your AWS EC2 instance. 3: Create an AWS Security Group \u00b6 If you already have an existing security group with ports 80, 443, 22 and 9001 open, you can skip this step. Appsmith is a web application that requires ports 80 and 443 for HTTP access, port 22 to be accessible for SSH access, it also requires port 9001 to be accessible for the supervisord UI. Please follow the steps detailed here to create a new security group. While creating the new security group, please follow the steps detailed here to edit the \"Inbound Rules\" and make ports 80, 443, 22 and 9001 accessible from anywhere. ECS Overview \u00b6 Steps to Deploy Appsmith on ECS (using EC2 Launch Type): \u00b6 Create an ECS Cluster Create Task and Container Definitions Create and Run an ECS Service Note: Please switch to the old AWS console UI to follow the steps in this tutorial. Step 1: Create an ECS Cluster \u00b6 Navigate to Amazon ECS and choose clusters on the side bar and select Create Cluster . 2. Choose EC2 Linux + Networking , and select the next step. 3. Enter your cluster name 4. I Instance configuration: Select the provisioning model as On-Demand Instance . Select the server size you wish to use, and set the Number of instances as 1 . Select the Amazon Linux2 AMI for the EC2 AMI ID dropdown, and enter the required EBS volume size. Select a Key pair . Please refer to Prerequisite 2 , if you have not already created one. 5. Networking Section Select the default VPC followed by selecting the first subnet from the drop-down. Select the security group created in Prerequisite 3 . 6. Enable container insights (this gives CloudWatch monitoring and helps to debug). 7. Leave the Container instance IAM role as default ( ecsInstanceRole ), if you do not have one AWS will create it for you. 8. Hit the Create button . It may take a minute for your cluster to be ready. Step 2: Create Task and Container Definitions \u00b6 Once the cluster is created, you will need to create a task that will be run on the cluster created in Step 1 . On the sidebar, choose Task Definitions and select Create new Task Definition . Choose EC2 as the launch type , and proceed to the next step. Configure task and definition Enter the task definition name. Leave the Task role blank . Select the default Network mode 4. Select the default Task execution IAM role ( ecsTaskExecutionRole ). AWS will create one for you if you do not have one. 5. Set the required task size (memory & CPU) 6. Go to the Volumes section and add a new volume. Enter the Name as appsmith_stack , set Volume type as Bind Mount, and set the Source path to /Appsmith/stacks . 7. Configure Appsmith container configuration . Hit Add container button. Enter the container name, and set the Image to appsmith/appsmith-ce Add port mappings for the ports 80->80,443->443, 9001->9001 Set the Mount points Source volume to appsmith_stack and set the Container path to /appsmith-stacks Enable Auto-configure CloudWatch Logs for log configuration. Hit Add. Finally, hit the Create button. Step 3: Create and Run an ECS Service. \u00b6 Navigate to the clusters dashboard and click on the ECS cluster created in Step 1 . On the cluster details, under the Services tab hit the create button. 3. Configure Service Select EC2 as Launch Type Select the Task Definition created in Step 2 with the latest revision. Select the Cluster created in Step 1 Enter the service name Select the REPLICA Service type Set the Number of tasks to 1 Leave the remaining fields and sections with the default values , and proceed to the next step. 4. Configure network - Proceed to the next step with the default configurations. 5. Set Auto Scaling - Proceed to the next step with the default configuration. 6. Review the Service configurations and hit the Create Service button. 7. The following screen will appear showing the launch status , click on the View Service button. 8. You will be directed to the service detail page. Your task is listed under the Tasks tab on the cluster. refresh the table until the status is RUNNING . 9. Click on the task to get the details of your running service. 10. Finally, click on the EC2 instance id to navigate to the EC2 console with your ECS instance (which is basically an EC2 instance running the container service) listed. 11. Find the public IP address or DNS name and enter it on your browser to see Appsmith's welcome page. Note: - In this guide, If you are using the embedded MongoDB, the container persistence is tied up with the EC2 instance lifecycle. Updating to the latest Appsmith release \u00b6 Navigate to the ECS cluster from the ECS dashboard. In the Services tab select the Appsmith service. On the Service page, hit the Update button. In the configure service page, set the Number of Tasks field to 0 with other configurations intact, and skip to review and launch. Wait until the new service is deployed, once done again go to the Service page and hit Update button. In the configure service page, set the Number of Tasks field to 1 and check the Force new deployment option (with other configurations intact), and skip to review and launch. Troubleshooting \u00b6 If you encounter any errors during this process, check out our guide on debugging deployment errors , if you are still facing an issue please reach out to support@appsmith.com or join our Discord Server to directly speak to the Appsmith team! Further Reading \u00b6 Configuring ECS Installations Managing the Appsmith instance Tutorials","title":"AWS ECS"},{"location":"Getting%20Started/setup/installation-guides/aws-ecs/#aws-ecs","text":"","title":"AWS ECS"},{"location":"Getting%20Started/setup/installation-guides/aws-ecs/#prerequisites","text":"","title":"Prerequisites"},{"location":"Getting%20Started/setup/installation-guides/aws-ecs/#1-register-with-amazon-web-services","text":"If you already have an Amazon Web Services account, you may skip this step. Please follow the steps detailed here in order to create an account on AWS.","title":"1: Register With Amazon Web Services"},{"location":"Getting%20Started/setup/installation-guides/aws-ecs/#2-generate-an-ssh-key-pair","text":"If you already have an SSH key pair for the AWS region you are operating in, you can skip this step. Please follow the steps detailed here to generate a new key pair. You need this key to SSH into your AWS EC2 instance.","title":"2: Generate an SSH key pair"},{"location":"Getting%20Started/setup/installation-guides/aws-ecs/#3-create-an-aws-security-group","text":"If you already have an existing security group with ports 80, 443, 22 and 9001 open, you can skip this step. Appsmith is a web application that requires ports 80 and 443 for HTTP access, port 22 to be accessible for SSH access, it also requires port 9001 to be accessible for the supervisord UI. Please follow the steps detailed here to create a new security group. While creating the new security group, please follow the steps detailed here to edit the \"Inbound Rules\" and make ports 80, 443, 22 and 9001 accessible from anywhere.","title":"3: Create an AWS Security Group"},{"location":"Getting%20Started/setup/installation-guides/aws-ecs/#ecs-overview","text":"","title":"ECS Overview"},{"location":"Getting%20Started/setup/installation-guides/aws-ecs/#steps-to-deploy-appsmith-on-ecs-using-ec2-launch-type","text":"Create an ECS Cluster Create Task and Container Definitions Create and Run an ECS Service Note: Please switch to the old AWS console UI to follow the steps in this tutorial.","title":"Steps to Deploy Appsmith on ECS (using EC2 Launch Type):"},{"location":"Getting%20Started/setup/installation-guides/aws-ecs/#step-1-create-an-ecs-cluster","text":"Navigate to Amazon ECS and choose clusters on the side bar and select Create Cluster . 2. Choose EC2 Linux + Networking , and select the next step. 3. Enter your cluster name 4. I Instance configuration: Select the provisioning model as On-Demand Instance . Select the server size you wish to use, and set the Number of instances as 1 . Select the Amazon Linux2 AMI for the EC2 AMI ID dropdown, and enter the required EBS volume size. Select a Key pair . Please refer to Prerequisite 2 , if you have not already created one. 5. Networking Section Select the default VPC followed by selecting the first subnet from the drop-down. Select the security group created in Prerequisite 3 . 6. Enable container insights (this gives CloudWatch monitoring and helps to debug). 7. Leave the Container instance IAM role as default ( ecsInstanceRole ), if you do not have one AWS will create it for you. 8. Hit the Create button . It may take a minute for your cluster to be ready.","title":"Step 1: Create an ECS Cluster"},{"location":"Getting%20Started/setup/installation-guides/aws-ecs/#step-2-create-task-and-container-definitions","text":"Once the cluster is created, you will need to create a task that will be run on the cluster created in Step 1 . On the sidebar, choose Task Definitions and select Create new Task Definition . Choose EC2 as the launch type , and proceed to the next step. Configure task and definition Enter the task definition name. Leave the Task role blank . Select the default Network mode 4. Select the default Task execution IAM role ( ecsTaskExecutionRole ). AWS will create one for you if you do not have one. 5. Set the required task size (memory & CPU) 6. Go to the Volumes section and add a new volume. Enter the Name as appsmith_stack , set Volume type as Bind Mount, and set the Source path to /Appsmith/stacks . 7. Configure Appsmith container configuration . Hit Add container button. Enter the container name, and set the Image to appsmith/appsmith-ce Add port mappings for the ports 80->80,443->443, 9001->9001 Set the Mount points Source volume to appsmith_stack and set the Container path to /appsmith-stacks Enable Auto-configure CloudWatch Logs for log configuration. Hit Add. Finally, hit the Create button.","title":"Step 2: Create Task and Container Definitions"},{"location":"Getting%20Started/setup/installation-guides/aws-ecs/#step-3-create-and-run-an-ecs-service","text":"Navigate to the clusters dashboard and click on the ECS cluster created in Step 1 . On the cluster details, under the Services tab hit the create button. 3. Configure Service Select EC2 as Launch Type Select the Task Definition created in Step 2 with the latest revision. Select the Cluster created in Step 1 Enter the service name Select the REPLICA Service type Set the Number of tasks to 1 Leave the remaining fields and sections with the default values , and proceed to the next step. 4. Configure network - Proceed to the next step with the default configurations. 5. Set Auto Scaling - Proceed to the next step with the default configuration. 6. Review the Service configurations and hit the Create Service button. 7. The following screen will appear showing the launch status , click on the View Service button. 8. You will be directed to the service detail page. Your task is listed under the Tasks tab on the cluster. refresh the table until the status is RUNNING . 9. Click on the task to get the details of your running service. 10. Finally, click on the EC2 instance id to navigate to the EC2 console with your ECS instance (which is basically an EC2 instance running the container service) listed. 11. Find the public IP address or DNS name and enter it on your browser to see Appsmith's welcome page. Note: - In this guide, If you are using the embedded MongoDB, the container persistence is tied up with the EC2 instance lifecycle.","title":"Step 3: Create and Run an ECS Service."},{"location":"Getting%20Started/setup/installation-guides/aws-ecs/#updating-to-the-latest-appsmith-release","text":"Navigate to the ECS cluster from the ECS dashboard. In the Services tab select the Appsmith service. On the Service page, hit the Update button. In the configure service page, set the Number of Tasks field to 0 with other configurations intact, and skip to review and launch. Wait until the new service is deployed, once done again go to the Service page and hit Update button. In the configure service page, set the Number of Tasks field to 1 and check the Force new deployment option (with other configurations intact), and skip to review and launch.","title":"Updating to the latest Appsmith release"},{"location":"Getting%20Started/setup/installation-guides/aws-ecs/#troubleshooting","text":"If you encounter any errors during this process, check out our guide on debugging deployment errors , if you are still facing an issue please reach out to support@appsmith.com or join our Discord Server to directly speak to the Appsmith team!","title":"Troubleshooting"},{"location":"Getting%20Started/setup/installation-guides/aws-ecs/#further-reading","text":"Configuring ECS Installations Managing the Appsmith instance Tutorials","title":"Further Reading"},{"location":"Getting%20Started/setup/installation-guides/cloudjiffy/","text":"CloudJiffy \u00b6 CloudJiffy is a Platform-as-a-Service (PaaS) provider. It provides auto-scalable, instant, and fully redundant deployment for your application. One-Click Deployment \u00b6 You can use one-click deployment to deploy Appsmith on the CloudJiffy platform. A quick and easy way to proceed is to navigate to the marketplace on CloudJiffy and search for Appsmith. Give a meaningful name to the environment where you\u2019ll want to deploy Appsmith, and then click install. Here\u2019s an exhaustive guide provided at CloudJiffy to deploy Appsmith on their platform. You can choose a wide range of deployment platforms for Appsmith. Go ahead and check the one that suits you best .","title":"CloudJiffy"},{"location":"Getting%20Started/setup/installation-guides/cloudjiffy/#cloudjiffy","text":"CloudJiffy is a Platform-as-a-Service (PaaS) provider. It provides auto-scalable, instant, and fully redundant deployment for your application.","title":"CloudJiffy"},{"location":"Getting%20Started/setup/installation-guides/cloudjiffy/#one-click-deployment","text":"You can use one-click deployment to deploy Appsmith on the CloudJiffy platform. A quick and easy way to proceed is to navigate to the marketplace on CloudJiffy and search for Appsmith. Give a meaningful name to the environment where you\u2019ll want to deploy Appsmith, and then click install. Here\u2019s an exhaustive guide provided at CloudJiffy to deploy Appsmith on their platform. You can choose a wide range of deployment platforms for Appsmith. Go ahead and check the one that suits you best .","title":"One-Click Deployment"},{"location":"Getting%20Started/setup/installation-guides/digitalocean/","text":"DigitalOcean \u00b6 {% embed url=\" https://youtu.be/6fitHGX2G4E \" %} You can deploy Appsmith on DigitalOcean using the Appsmith droplet from Digital Ocean\u2019s 1-Click Apps Marketplace and host it on our custom domain. Login to your DigitalOcean account to get started. If you are a new user, use this link and get a $25 credit on DigitalOcean! Deploying Appsmith on DigitalOcean \u00b6 Once logged in, follow the steps listed below: Find Appsmith from the DigitalOcean marketplace here . Click on the Create Appsmith Droplet button; this will redirect you to a new page where you can set up all your configurations. For a base configuration, use the following settings. Shared CPU: Basic CPU Options: Regular Intel with SSD (1 GB CPU / 25GB SSD / 1000GB Transfer ) Data Center Region: (Choose the nearest location to your place) Additional Options: IPV6 Enabled In the authentication section, you can either choose SSH or set up a password if you want to log in to your server. Lastly, click on the Create Droplet button. It will take a few minutes (approximately 3-4 minutes) to install Appsmith on the DigitalOcean droplet. You\u2019ll find the deployed droplet on your dashboard with all the details of the selected configuration. To use Appsmith, copy the IPv4 address from the settings and open it in a new tab. This will take you to Appsmith\u2019s login page. Since this is a new instance, click on sign up to create a new account on Appsmith. Updating to latest Appsmith release \u00b6 SSH into your droplet and run the following command: cd /root/appsmith && docker-compose pull && docker-compose rm -fsv appsmith && docker-compose up -d Troubleshooting \u00b6 If you encounter any errors during this process, check out our guide on debugging deployment errors , if you are still facing an issue please reach out to support@appsmith.com or join our Discord Server to directly speak to the Appsmith team! Further Reading \u00b6 Configuring Self Hosted Instances Managing the Appsmith instance Tutorials","title":"DigitalOcean"},{"location":"Getting%20Started/setup/installation-guides/digitalocean/#digitalocean","text":"{% embed url=\" https://youtu.be/6fitHGX2G4E \" %} You can deploy Appsmith on DigitalOcean using the Appsmith droplet from Digital Ocean\u2019s 1-Click Apps Marketplace and host it on our custom domain. Login to your DigitalOcean account to get started. If you are a new user, use this link and get a $25 credit on DigitalOcean!","title":"DigitalOcean"},{"location":"Getting%20Started/setup/installation-guides/digitalocean/#deploying-appsmith-on-digitalocean","text":"Once logged in, follow the steps listed below: Find Appsmith from the DigitalOcean marketplace here . Click on the Create Appsmith Droplet button; this will redirect you to a new page where you can set up all your configurations. For a base configuration, use the following settings. Shared CPU: Basic CPU Options: Regular Intel with SSD (1 GB CPU / 25GB SSD / 1000GB Transfer ) Data Center Region: (Choose the nearest location to your place) Additional Options: IPV6 Enabled In the authentication section, you can either choose SSH or set up a password if you want to log in to your server. Lastly, click on the Create Droplet button. It will take a few minutes (approximately 3-4 minutes) to install Appsmith on the DigitalOcean droplet. You\u2019ll find the deployed droplet on your dashboard with all the details of the selected configuration. To use Appsmith, copy the IPv4 address from the settings and open it in a new tab. This will take you to Appsmith\u2019s login page. Since this is a new instance, click on sign up to create a new account on Appsmith.","title":"Deploying Appsmith on DigitalOcean"},{"location":"Getting%20Started/setup/installation-guides/digitalocean/#updating-to-latest-appsmith-release","text":"SSH into your droplet and run the following command: cd /root/appsmith && docker-compose pull && docker-compose rm -fsv appsmith && docker-compose up -d","title":"Updating to latest Appsmith release"},{"location":"Getting%20Started/setup/installation-guides/digitalocean/#troubleshooting","text":"If you encounter any errors during this process, check out our guide on debugging deployment errors , if you are still facing an issue please reach out to support@appsmith.com or join our Discord Server to directly speak to the Appsmith team!","title":"Troubleshooting"},{"location":"Getting%20Started/setup/installation-guides/digitalocean/#further-reading","text":"Configuring Self Hosted Instances Managing the Appsmith instance Tutorials","title":"Further Reading"},{"location":"Getting%20Started/setup/installation-guides/heroku/","text":"Heroku \u00b6 Heroku is a platform that enables developers to build, run, and operate applications entirely in the cloud. Let's see how to self-host Appsmith on Heroku. {% embed url=\" https://www.youtube.com/watch?v=Bclt_VmDMpo \" %} {% hint style=\"info\" %} The administrative privileges (Admin settings) are not available due to deployment restrictions with the Heroku container (dynos). Deployment Steps \u00b6 Sign up for a free account on Heroku Click the button Fill in the required Config Variables including: APPSMITH_ENCRYPTION_PASSWORD : Encryption password to encrypt all credentials in the database. You can use any random string (Eg. abcd). The more random, the better. APPSMITH_ENCRYPTION_SALT : Encryption salt is used to encrypt all credentials in the database. You can use any random string (Eg. abcd). The more random, the better. APPSMITH_MONGODB_URI : Your Mongo Database URI. Since Heroku doesn't support a managed MongoDB instance, you'll have to create a Mongo DB instance on another service such as https://cloud.mongodb.com . Check out this link for steps on creating a free account with MongoDB Atlas and setting up your first cluster. (Optional) Customize the default settings in Heroku App Name : Optionally select a name for your application (it will be used in the application URL) Runtime Selection : Select which region your app should run in (the United States or Europe) Config Variables : Sign Up APPSMITH_SIGNUP_DISABLED : Set this value to true to disable allowing users to signup on your Appsmith instance. Users can only sign up if a workspace administrator invites them. Email Configuration: APPSMITH_MAIL_ENABLED : Set this value to true to enable email sending (value should be true/false only). APPSMITH_MAIL_FROM : Email ID using which emails will be sent from your installation. APPSMITH_REPLY_TO : Email ID to which all email replies will be sent. APPSMITH_MAIL_HOST : The host endpoint for the SMTP server. APPSMITH_MAIL_SMTP_TLS_ENABLED : Set this value to enable TLS for your SMTP server (value should be true/false only.) APPSMITH_MAIL_USERNAME : SMTP username. APPSMITH_MAIL_PASSWORD : SMTP password. OAuth Configuration: Google OAuth: APPSMITH_OAUTH2_GOOGLE_CLIENT_ID : Client ID provided by Google for OAuth2 login. APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET : Client secret provided by Google for OAuth2 login. Github OAuth2: APPSMITH_OAUTH2_GITHUB_CLIENT_ID : Client ID provided by Github for OAuth2 login. APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET : Client secret provided by Github for OAuth2 login. APPSMITH_GOOGLE_MAPS_API_KEY : Google Maps API key that is required if you wish to leverage Google Maps widget. Read more here . APPSMITH_DISABLE_TELEMETRY : We want to be transparent and request that you share anonymous usage data with us. This data is purely statistical and helps us understand your needs & provide better support to your self-hosted instance. You can read more about what information is collected in our documentation here . After Heroku finishes setting up the app, click \"View,\" and your Appsmith should be up and running. It will take you to the account creation page, where you can enter credentials to create an account and get started. {% hint style=\"warning\" %} * We use the Heroku Redis add-on for caching, which requires your account to have billing information, but we use the free plan of this add-on so that it will charge you nothing. Please make sure your account has already finished providing billing information. * You may need to wait 2-3 minutes before accessing the application as Heroku may take a while to spin up the dyno and start the Appsmith application. Custom Domain \u00b6 If you wish to link a custom domain (Eg: https://appsmith.yourcompany.com) to your Appsmith installation, please follow these steps below: Go to the Settings tab in your Heroku app. Click the Add domain button in the Domains section. Input your domain name & click Next . Heroku will provide you with a DNS target to which you can map your domain. Now, go to your DNS provider and make sure that your custom DNS Record ( Eg appsmith.yourcompany.com ) is updated to map to the DNS Target. //For example, Change the CNAME records of your domain like this: Host: www Points to: \"Paste the DNS Value\" TTL: 1 hour Once you finish, now you can access Appsmith from your custom domain. {% hint style=\"warning\" %} * Once you use a custom domain, You might want to set up SSL for your dyno. Please check the official document of Heroku on how to configure SSL . * Your dyno will need to be upgraded to at least a hobby type to use this feature of Heroku. Re-Deploy your App using Heroku CLI \u00b6 To re-deploy your app (re-build & re-run), make sure you have Docker & Heroku CLI setup locally. Docker is required to build the updated image locally before being pushed to the Heroku platform. Then follow the steps below: Pull the Appsmith repository from Github & move to the heroku folder: git clone --branch master https://github.com/appsmithorg/appsmith cd ./appsmith/deploy/heroku * Login to Heroku CLI. heroku login * Login to Container Registry. heroku container:login * Get your application name. heroku apps * Push your Docker-based app. heroku container:push web -a <Your App Name> * Deploy the changes. heroku container:release web -a <Your App Name> Please wait for a couple of minutes to let Heroku re-deploy Appsmith with the latest changes. You can check if Appsmith is running by visiting your Heroku URL (or custom domain if you've set one up).","title":"Heroku"},{"location":"Getting%20Started/setup/installation-guides/heroku/#heroku","text":"Heroku is a platform that enables developers to build, run, and operate applications entirely in the cloud. Let's see how to self-host Appsmith on Heroku. {% embed url=\" https://www.youtube.com/watch?v=Bclt_VmDMpo \" %} {% hint style=\"info\" %} The administrative privileges (Admin settings) are not available due to deployment restrictions with the Heroku container (dynos).","title":"Heroku"},{"location":"Getting%20Started/setup/installation-guides/heroku/#deployment-steps","text":"Sign up for a free account on Heroku Click the button Fill in the required Config Variables including: APPSMITH_ENCRYPTION_PASSWORD : Encryption password to encrypt all credentials in the database. You can use any random string (Eg. abcd). The more random, the better. APPSMITH_ENCRYPTION_SALT : Encryption salt is used to encrypt all credentials in the database. You can use any random string (Eg. abcd). The more random, the better. APPSMITH_MONGODB_URI : Your Mongo Database URI. Since Heroku doesn't support a managed MongoDB instance, you'll have to create a Mongo DB instance on another service such as https://cloud.mongodb.com . Check out this link for steps on creating a free account with MongoDB Atlas and setting up your first cluster. (Optional) Customize the default settings in Heroku App Name : Optionally select a name for your application (it will be used in the application URL) Runtime Selection : Select which region your app should run in (the United States or Europe) Config Variables : Sign Up APPSMITH_SIGNUP_DISABLED : Set this value to true to disable allowing users to signup on your Appsmith instance. Users can only sign up if a workspace administrator invites them. Email Configuration: APPSMITH_MAIL_ENABLED : Set this value to true to enable email sending (value should be true/false only). APPSMITH_MAIL_FROM : Email ID using which emails will be sent from your installation. APPSMITH_REPLY_TO : Email ID to which all email replies will be sent. APPSMITH_MAIL_HOST : The host endpoint for the SMTP server. APPSMITH_MAIL_SMTP_TLS_ENABLED : Set this value to enable TLS for your SMTP server (value should be true/false only.) APPSMITH_MAIL_USERNAME : SMTP username. APPSMITH_MAIL_PASSWORD : SMTP password. OAuth Configuration: Google OAuth: APPSMITH_OAUTH2_GOOGLE_CLIENT_ID : Client ID provided by Google for OAuth2 login. APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET : Client secret provided by Google for OAuth2 login. Github OAuth2: APPSMITH_OAUTH2_GITHUB_CLIENT_ID : Client ID provided by Github for OAuth2 login. APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET : Client secret provided by Github for OAuth2 login. APPSMITH_GOOGLE_MAPS_API_KEY : Google Maps API key that is required if you wish to leverage Google Maps widget. Read more here . APPSMITH_DISABLE_TELEMETRY : We want to be transparent and request that you share anonymous usage data with us. This data is purely statistical and helps us understand your needs & provide better support to your self-hosted instance. You can read more about what information is collected in our documentation here . After Heroku finishes setting up the app, click \"View,\" and your Appsmith should be up and running. It will take you to the account creation page, where you can enter credentials to create an account and get started. {% hint style=\"warning\" %} * We use the Heroku Redis add-on for caching, which requires your account to have billing information, but we use the free plan of this add-on so that it will charge you nothing. Please make sure your account has already finished providing billing information. * You may need to wait 2-3 minutes before accessing the application as Heroku may take a while to spin up the dyno and start the Appsmith application.","title":"Deployment Steps"},{"location":"Getting%20Started/setup/installation-guides/heroku/#custom-domain","text":"If you wish to link a custom domain (Eg: https://appsmith.yourcompany.com) to your Appsmith installation, please follow these steps below: Go to the Settings tab in your Heroku app. Click the Add domain button in the Domains section. Input your domain name & click Next . Heroku will provide you with a DNS target to which you can map your domain. Now, go to your DNS provider and make sure that your custom DNS Record ( Eg appsmith.yourcompany.com ) is updated to map to the DNS Target. //For example, Change the CNAME records of your domain like this: Host: www Points to: \"Paste the DNS Value\" TTL: 1 hour Once you finish, now you can access Appsmith from your custom domain. {% hint style=\"warning\" %} * Once you use a custom domain, You might want to set up SSL for your dyno. Please check the official document of Heroku on how to configure SSL . * Your dyno will need to be upgraded to at least a hobby type to use this feature of Heroku.","title":"Custom Domain"},{"location":"Getting%20Started/setup/installation-guides/heroku/#re-deploy-your-app-using-heroku-cli","text":"To re-deploy your app (re-build & re-run), make sure you have Docker & Heroku CLI setup locally. Docker is required to build the updated image locally before being pushed to the Heroku platform. Then follow the steps below: Pull the Appsmith repository from Github & move to the heroku folder: git clone --branch master https://github.com/appsmithorg/appsmith cd ./appsmith/deploy/heroku * Login to Heroku CLI. heroku login * Login to Container Registry. heroku container:login * Get your application name. heroku apps * Push your Docker-based app. heroku container:push web -a <Your App Name> * Deploy the changes. heroku container:release web -a <Your App Name> Please wait for a couple of minutes to let Heroku re-deploy Appsmith with the latest changes. You can check if Appsmith is running by visiting your Heroku URL (or custom domain if you've set one up).","title":"Re-Deploy your App using Heroku CLI"},{"location":"Getting%20Started/setup/installation-guides/docker/","text":"Docker \u00b6 Docker is an open-source containerization platform. It enables developers to package applications into containers\u2014standardized executable components combining application source code with the operating system (OS) libraries and dependencies required to run that code in any environment. {% embed url=\" https://www.youtube.com/watch?v=Tde7GqE6FQQ \" %} Prerequisites \u00b6 Docker (version 20.10.7 or later) Docker-Compose (version 1.29.2 or later) Create an installation folder called appsmith where you would like your Appsmith installation and data storage. cd into the installation folder. Quick Start (with docker-compose) \u00b6 The Appsmith Docker image is built with all the components required to run within a single Docker container. All these multiple processes are managed by a Supervisord instance, which is a lightweight process manager. {% hint style=\"warning\" %} You can expect one container running when using the docker-compose ps command. Something like: #Container appsmith Running Docker-compose configuration \u00b6 {% hint style=\"info\" %} Currently, auto-update is disabled on the docker-compose file. If you want to enable auto-update for Appsmith, please uncomment all the commented lines in the docker-compose file. Download the below docker-compose.yml file into the appsmith installation folder {% file src=\"../../../../.gitbook/assets/docker-compose (1).yml\" %} or run the following curl if you're on a remote machine: curl -L https://bit.ly/32jBNin -o $PWD/docker-compose.yml {% hint style=\"warning\" %} For the Business Edition - change the image name from appsmith-ce to appsmith-ee for the image: key in the docker-compose.yml file. This configuration runs an Appsmith instance and a Watchtower instance to keep Appsmith automatically up-to-date. {% hint style=\"warning\" %} For the Business Edition - add your license key ( APPSMITH_LICENSE_KEY ) to the environment: key in the docker-compose.yml file. Bring the docker container up by running the following command. (You may need to run as sudo if docker and docker-compose are not accessible by your user) docker-compose up -d If it is not available locally, the command above will download the Docker images and start the services. You can follow the logs with the following command: docker logs -f appsmith You should see a message Appsmith is Running! once the container is ready. If this is your first time using docker, you should expect a welcome page similar to the one below. {% hint style=\"success\" %} Congratulations! Your Appsmith server should be up and running now. You can access it at http://localhost . Updating Appsmith (with docker-compose) \u00b6 To update Appsmith (configured with docker-compose) manually, go to the root directory of your setup and run the following command: docker-compose pull && docker-compose rm -fsv appsmith && docker-compose up -d Enabling Appsmith Auto-updates (with docker-compose) \u00b6 If your Appsmith setup does not have auto-update enabled (i.e. it will not have the Watchtower container running along with Appsmith in the host machine). You can enable auto-update by following the following steps: Go to the root directory of your Appsmith set up and run: docker-compose down Open the docker-compose.yml file with any text editor and uncomment all the lines that are commented out (lines 13-23). Run the command: docker-compose up -d Explore Appsmith (without docker-compose) \u00b6 To quickly get Appsmith up and running, run the following command on your machine: Community Edition \u00b6 docker run -d --name appsmith -p 80:80 -v \"$PWD/stacks:/appsmith-stacks\" --pull always appsmith/appsmith-ce Business Edition \u00b6 docker run -d --name appsmith -p 80:80 -v \"$PWD/stacks:/appsmith-stacks\" -e APPSMITH_LICENSE_KEY=<Add_YOUR_LICENSE_KEY> --pull always appsmith/appsmith-ee This command will download the image and start Appsmith. Once the download is complete, the server should be up in under a minute. You can follow the logs with the following command: docker logs -f appsmith You should see the message Appsmith is Running! once the container is ready Restarting Containers \u00b6 If your containers are failing to restart, you can execute the below script to bring them up: {% file src=\"../../../../.gitbook/assets/restart-container.sh\" %} restart-containers.sh copy the script to your installation folder and make it executable chmod +x restart-containers.sh ./restart-containers.sh Updating Appsmith (without docker-compose) \u00b6 To update Appsmith manually, go to the root directory of your setup and run the following commands: Community Edition \u00b6 docker rmi appsmith/appsmith-ce -f docker pull appsmith/appsmith-ce docker rm -f appsmith docker run -d --name appsmith -p 80:80 -v \"$PWD/stacks:/appsmith-stacks\" appsmith/appsmith-ce Business Edition \u00b6 docker rmi appsmith/appsmith-ee -f docker pull appsmith/appsmith-ee docker rm -f appsmith docker run -d --name appsmith -p 80:80 -v \"$PWD/stacks:/appsmith-stacks\" -e APPSMITH_LICENSE_KEY=<YOUR_LICENSE_KEY> appsmith/appsmith-ee {% hint style=\"info\" %} Follow the instructions to upgrade your existing installation to a Business Edition. Troubleshooting \u00b6 If you encounter any errors during this process, check out our guide on debugging deployment errors . If you are still facing any issues, please reach out to support@appsmith.com or join our Discord Server to speak to the Appsmith team directly! Further Reading \u00b6 Configuring Self Hosted Instances Managing the Appsmith instance Tutorials","title":"Docker"},{"location":"Getting%20Started/setup/installation-guides/docker/#docker","text":"Docker is an open-source containerization platform. It enables developers to package applications into containers\u2014standardized executable components combining application source code with the operating system (OS) libraries and dependencies required to run that code in any environment. {% embed url=\" https://www.youtube.com/watch?v=Tde7GqE6FQQ \" %}","title":"Docker"},{"location":"Getting%20Started/setup/installation-guides/docker/#prerequisites","text":"Docker (version 20.10.7 or later) Docker-Compose (version 1.29.2 or later) Create an installation folder called appsmith where you would like your Appsmith installation and data storage. cd into the installation folder.","title":"Prerequisites"},{"location":"Getting%20Started/setup/installation-guides/docker/#quick-start-with-docker-compose","text":"The Appsmith Docker image is built with all the components required to run within a single Docker container. All these multiple processes are managed by a Supervisord instance, which is a lightweight process manager. {% hint style=\"warning\" %} You can expect one container running when using the docker-compose ps command. Something like: #Container appsmith Running","title":"Quick Start (with docker-compose)"},{"location":"Getting%20Started/setup/installation-guides/docker/#docker-compose-configuration","text":"{% hint style=\"info\" %} Currently, auto-update is disabled on the docker-compose file. If you want to enable auto-update for Appsmith, please uncomment all the commented lines in the docker-compose file. Download the below docker-compose.yml file into the appsmith installation folder {% file src=\"../../../../.gitbook/assets/docker-compose (1).yml\" %} or run the following curl if you're on a remote machine: curl -L https://bit.ly/32jBNin -o $PWD/docker-compose.yml {% hint style=\"warning\" %} For the Business Edition - change the image name from appsmith-ce to appsmith-ee for the image: key in the docker-compose.yml file. This configuration runs an Appsmith instance and a Watchtower instance to keep Appsmith automatically up-to-date. {% hint style=\"warning\" %} For the Business Edition - add your license key ( APPSMITH_LICENSE_KEY ) to the environment: key in the docker-compose.yml file. Bring the docker container up by running the following command. (You may need to run as sudo if docker and docker-compose are not accessible by your user) docker-compose up -d If it is not available locally, the command above will download the Docker images and start the services. You can follow the logs with the following command: docker logs -f appsmith You should see a message Appsmith is Running! once the container is ready. If this is your first time using docker, you should expect a welcome page similar to the one below. {% hint style=\"success\" %} Congratulations! Your Appsmith server should be up and running now. You can access it at http://localhost .","title":"Docker-compose configuration"},{"location":"Getting%20Started/setup/installation-guides/docker/#updating-appsmith-with-docker-compose","text":"To update Appsmith (configured with docker-compose) manually, go to the root directory of your setup and run the following command: docker-compose pull && docker-compose rm -fsv appsmith && docker-compose up -d","title":"Updating Appsmith (with docker-compose)"},{"location":"Getting%20Started/setup/installation-guides/docker/#enabling-appsmith-auto-updates-with-docker-compose","text":"If your Appsmith setup does not have auto-update enabled (i.e. it will not have the Watchtower container running along with Appsmith in the host machine). You can enable auto-update by following the following steps: Go to the root directory of your Appsmith set up and run: docker-compose down Open the docker-compose.yml file with any text editor and uncomment all the lines that are commented out (lines 13-23). Run the command: docker-compose up -d","title":"Enabling Appsmith Auto-updates (with docker-compose)"},{"location":"Getting%20Started/setup/installation-guides/docker/#explore-appsmith-without-docker-compose","text":"To quickly get Appsmith up and running, run the following command on your machine:","title":"Explore Appsmith (without docker-compose)"},{"location":"Getting%20Started/setup/installation-guides/docker/#community-edition","text":"docker run -d --name appsmith -p 80:80 -v \"$PWD/stacks:/appsmith-stacks\" --pull always appsmith/appsmith-ce","title":"Community Edition"},{"location":"Getting%20Started/setup/installation-guides/docker/#business-edition","text":"docker run -d --name appsmith -p 80:80 -v \"$PWD/stacks:/appsmith-stacks\" -e APPSMITH_LICENSE_KEY=<Add_YOUR_LICENSE_KEY> --pull always appsmith/appsmith-ee This command will download the image and start Appsmith. Once the download is complete, the server should be up in under a minute. You can follow the logs with the following command: docker logs -f appsmith You should see the message Appsmith is Running! once the container is ready","title":"Business Edition"},{"location":"Getting%20Started/setup/installation-guides/docker/#restarting-containers","text":"If your containers are failing to restart, you can execute the below script to bring them up: {% file src=\"../../../../.gitbook/assets/restart-container.sh\" %} restart-containers.sh copy the script to your installation folder and make it executable chmod +x restart-containers.sh ./restart-containers.sh","title":"Restarting Containers"},{"location":"Getting%20Started/setup/installation-guides/docker/#updating-appsmith-without-docker-compose","text":"To update Appsmith manually, go to the root directory of your setup and run the following commands:","title":"Updating Appsmith (without docker-compose)"},{"location":"Getting%20Started/setup/installation-guides/docker/#community-edition_1","text":"docker rmi appsmith/appsmith-ce -f docker pull appsmith/appsmith-ce docker rm -f appsmith docker run -d --name appsmith -p 80:80 -v \"$PWD/stacks:/appsmith-stacks\" appsmith/appsmith-ce","title":"Community Edition"},{"location":"Getting%20Started/setup/installation-guides/docker/#business-edition_1","text":"docker rmi appsmith/appsmith-ee -f docker pull appsmith/appsmith-ee docker rm -f appsmith docker run -d --name appsmith -p 80:80 -v \"$PWD/stacks:/appsmith-stacks\" -e APPSMITH_LICENSE_KEY=<YOUR_LICENSE_KEY> appsmith/appsmith-ee {% hint style=\"info\" %} Follow the instructions to upgrade your existing installation to a Business Edition.","title":"Business Edition"},{"location":"Getting%20Started/setup/installation-guides/docker/#troubleshooting","text":"If you encounter any errors during this process, check out our guide on debugging deployment errors . If you are still facing any issues, please reach out to support@appsmith.com or join our Discord Server to speak to the Appsmith team directly!","title":"Troubleshooting"},{"location":"Getting%20Started/setup/installation-guides/docker/#further-reading","text":"Configuring Self Hosted Instances Managing the Appsmith instance Tutorials","title":"Further Reading"},{"location":"Getting%20Started/setup/installation-guides/docker/migrate/","text":"Migrate from Multi-Container setup \u00b6 Let's say your current Appsmith instance is located in the folder ~/appsmith-old , and you'd like the new setup be at ~/appsmith-new . (This are just example folder names, please use what you prefer.) Then we can see a rough folder structure like this for ~/appsmith-old : ~/appsmith-old \u251c\u2500\u2500 data \u2502 \u251c\u2500\u2500 certbot \u2502 \u2502 \u251c\u2500\u2500 conf \u2502 \u2502 \u2514\u2500\u2500 www \u2502 \u251c\u2500\u2500 mongo \u2502 \u2502 \u251c\u2500\u2500 db \u2502 \u2502 \u2514\u2500\u2500 init.js \u2502 \u2514\u2500\u2500 nginx \u2502 \u2514\u2500\u2500 app.conf.template \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 docker.env \u2514\u2500\u2500 encryption.env And like this for ~/appsmith-new (after the steps in this document are done): ~/appsmith-new \u251c\u2500\u2500 docker-compose.yml \u2514\u2500\u2500 stacks \u251c\u2500\u2500 configuration \u2502 \u251c\u2500\u2500 docker.env \u2502 \u2514\u2500\u2500 mongo-init.js \u251c\u2500\u2500 data \u2502 \u251c\u2500\u2500 backup \u2502 \u251c\u2500\u2500 certificate \u2502 \u251c\u2500\u2500 mongodb \u2502 \u2514\u2500\u2500 restore \u2514\u2500\u2500 letsencrypt \u251c\u2500\u2500 accounts \u251c\u2500\u2500 archive \u251c\u2500\u2500 conf \u251c\u2500\u2500 csr \u251c\u2500\u2500 keys \u251c\u2500\u2500 live \u251c\u2500\u2500 options-ssl-nginx.conf \u251c\u2500\u2500 renewal \u251c\u2500\u2500 renewal-hooks \u251c\u2500\u2500 ssl-dhparams.pem \u2514\u2500\u2500 www Now let's go over the steps to be performed. 1. Shutdown old appsmith instance \u00b6 \ud83d\udea8 Please ensure you are aware of the following facts before proceeding: This whole migration should take under 25-30mins, usually less than that. All users who are currently logged-in, will be logged out. They can just log back in, once the new instance is up and running just fine. Depending on your configuration, any docker-compose and docker commands below might need to be run with a sudo at the start. Please check the output of commands to see if there's any errors, after running a command, and before proceeding to next steps. Let's first define a couple of variables that'll be useful during our migration. Please use the appropriate paths in place of ~/appsmith-old and ~/appsmith-new . old_path=~/appsmith-old new_path=~/appsmith-new Before we can start the migration, please stop the old server with the following command: cd \"$old_path\" docker-compose stop appsmith-internal-server 2. Export database \u00b6 To export data from the running MongoDB database, we use the mongodump command, which will create a gzip archive with all the data. This file will then be copied to the new setup and imported. Create backup folder to store dump file: cd \"$old_path\" docker-compose exec mongo mkdir -pv /data/db/backup Dumping MongoDB data and compressed into a gzip file: docker-compose exec mongo sh -c 'mongodump --uri=\"$APPSMITH_MONGODB_URI\" --archive=/data/db/backup/appsmith-data.archive --gzip' 3. Migrate Configuration \u00b6 The new setup uses a single docker.env file for all environment variable configuration. Let's create the folder structure needed: mkdir -pv \"$new_path\"/stacks/configuration Migrate configuration from old location: cat \"$old_path\"/docker.env \"$old_path\"/encryption.env >> \"$new_path\"/stacks/configuration/docker.env Now, in the file \"$new_path\"/stacks/configuration/docker.env : Unless you are using an external MongoDB database, in APPSMITH_MONGODB_URI , please change the @mongo part to @localhost , and remove the query params (the ? and everything after it). For example, if the current value is mongodb://root:rootpass@mongo/appsmith?retryWrites=true&authSource=admin , change it to be just mongodb://root:rootpass@localhost/appsmith . Unless you are using an external Redis instance, in APPSMITH_REDIS_URL , please change redis://redis:6379 to redis://localhost:6379 . That is, change the host from redis to localhost. At the end of this docker.env file, let's add the following new environment variables: APPSMITH_MONGODB_USER=<Your MongoDB User> APPSMITH_MONGODB_PASSWORD=<Your MongoDB Password> APPSMITH_API_BASE_URL=http://localhost:8080 Here, in place of <Your MongoDB User> and <Your MongoDB Password> , please use the same username and password that were given to APPSMITH_MONGODB_URI above. In the above example values, these would be root for user and rootpass for password. 4. Export https config & certificate (optional) \u00b6 If you are not using a custom domain with your Appsmith instance, please skip this step. If you don't have APPSMITH_CUSTOM_DOMAIN already configured in your docker.env , please add a line like below echo APPSMITH_CUSTOM_DOMAIN=appsmith.mycustomdomain.com >> \"$new_path\"/stacks/configuration/docker.env You can also move your certificate to the new container by running following commands: mkdir -pv \"$new_path\"/stacks/letsencrypt sudo cp -rfv \"$old_path\"/data/certbot/conf/* \"$new_path\"/stacks/letsencrypt 5. Setup new Appsmith with Fat container \u00b6 Let's bring down the old instance in-full now: docker-compose --file \"$old_path\"/docker-compose.yml down Follow the official guide to start with a new Appsmith deployment at Docker Compose Configuration , also shown here in brief for reference: cd \"$new_path\" curl -L https://bit.ly/32jBNin -o docker-compose.yml docker-compose up -d Please note that you must create a new docker-compose.yml in \"$new_path\" folder, like with the curl command above. Don't copy it from \"$old_path\" . 6. Import database \u00b6 After your new deployment comes up (usually takes ~30 seconds), we will import the data that was exported from the old instance: Create the folder to copy the archive file: mkdir -pv \"$new_path\"/stacks/data/restore Copy the archive file: cp \"$old_path\"/data/mongo/db/backup/appsmith-data.archive \"$new_path\"/stacks/data/restore/ Import data from this archive: docker-compose exec appsmith appsmithctl import_db Note that this will ask you Importing this DB will erase this data. Are you sure you want to proceed , where you can respond with y . It is safe in this situation since the new database in the new setup only contains initial data and should be safe to be overwritten. Once this is successful, we are ready to bring up our new instance! 7. Verify migration \u00b6 Navigate to your Appsmith instance, the same way you used to with your old instance, whether using IP address, or custom domain, and verify that your Appsmith instance is working well, and all your data is intact. After this, please designate a user as the superuser, to give them access to the Admin Settings page. You can follow the instructions at Configuring a superuser to apply this change. diff --git a/setting-up/migrate.md b/setting-up/migrate.md","title":"Migrate from Multi-Container setup"},{"location":"Getting%20Started/setup/installation-guides/docker/migrate/#migrate-from-multi-container-setup","text":"Let's say your current Appsmith instance is located in the folder ~/appsmith-old , and you'd like the new setup be at ~/appsmith-new . (This are just example folder names, please use what you prefer.) Then we can see a rough folder structure like this for ~/appsmith-old : ~/appsmith-old \u251c\u2500\u2500 data \u2502 \u251c\u2500\u2500 certbot \u2502 \u2502 \u251c\u2500\u2500 conf \u2502 \u2502 \u2514\u2500\u2500 www \u2502 \u251c\u2500\u2500 mongo \u2502 \u2502 \u251c\u2500\u2500 db \u2502 \u2502 \u2514\u2500\u2500 init.js \u2502 \u2514\u2500\u2500 nginx \u2502 \u2514\u2500\u2500 app.conf.template \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 docker.env \u2514\u2500\u2500 encryption.env And like this for ~/appsmith-new (after the steps in this document are done): ~/appsmith-new \u251c\u2500\u2500 docker-compose.yml \u2514\u2500\u2500 stacks \u251c\u2500\u2500 configuration \u2502 \u251c\u2500\u2500 docker.env \u2502 \u2514\u2500\u2500 mongo-init.js \u251c\u2500\u2500 data \u2502 \u251c\u2500\u2500 backup \u2502 \u251c\u2500\u2500 certificate \u2502 \u251c\u2500\u2500 mongodb \u2502 \u2514\u2500\u2500 restore \u2514\u2500\u2500 letsencrypt \u251c\u2500\u2500 accounts \u251c\u2500\u2500 archive \u251c\u2500\u2500 conf \u251c\u2500\u2500 csr \u251c\u2500\u2500 keys \u251c\u2500\u2500 live \u251c\u2500\u2500 options-ssl-nginx.conf \u251c\u2500\u2500 renewal \u251c\u2500\u2500 renewal-hooks \u251c\u2500\u2500 ssl-dhparams.pem \u2514\u2500\u2500 www Now let's go over the steps to be performed.","title":"Migrate from Multi-Container setup"},{"location":"Getting%20Started/setup/installation-guides/docker/migrate/#1-shutdown-old-appsmith-instance","text":"\ud83d\udea8 Please ensure you are aware of the following facts before proceeding: This whole migration should take under 25-30mins, usually less than that. All users who are currently logged-in, will be logged out. They can just log back in, once the new instance is up and running just fine. Depending on your configuration, any docker-compose and docker commands below might need to be run with a sudo at the start. Please check the output of commands to see if there's any errors, after running a command, and before proceeding to next steps. Let's first define a couple of variables that'll be useful during our migration. Please use the appropriate paths in place of ~/appsmith-old and ~/appsmith-new . old_path=~/appsmith-old new_path=~/appsmith-new Before we can start the migration, please stop the old server with the following command: cd \"$old_path\" docker-compose stop appsmith-internal-server","title":"1. Shutdown old appsmith instance"},{"location":"Getting%20Started/setup/installation-guides/docker/migrate/#2-export-database","text":"To export data from the running MongoDB database, we use the mongodump command, which will create a gzip archive with all the data. This file will then be copied to the new setup and imported. Create backup folder to store dump file: cd \"$old_path\" docker-compose exec mongo mkdir -pv /data/db/backup Dumping MongoDB data and compressed into a gzip file: docker-compose exec mongo sh -c 'mongodump --uri=\"$APPSMITH_MONGODB_URI\" --archive=/data/db/backup/appsmith-data.archive --gzip'","title":"2. Export database"},{"location":"Getting%20Started/setup/installation-guides/docker/migrate/#3-migrate-configuration","text":"The new setup uses a single docker.env file for all environment variable configuration. Let's create the folder structure needed: mkdir -pv \"$new_path\"/stacks/configuration Migrate configuration from old location: cat \"$old_path\"/docker.env \"$old_path\"/encryption.env >> \"$new_path\"/stacks/configuration/docker.env Now, in the file \"$new_path\"/stacks/configuration/docker.env : Unless you are using an external MongoDB database, in APPSMITH_MONGODB_URI , please change the @mongo part to @localhost , and remove the query params (the ? and everything after it). For example, if the current value is mongodb://root:rootpass@mongo/appsmith?retryWrites=true&authSource=admin , change it to be just mongodb://root:rootpass@localhost/appsmith . Unless you are using an external Redis instance, in APPSMITH_REDIS_URL , please change redis://redis:6379 to redis://localhost:6379 . That is, change the host from redis to localhost. At the end of this docker.env file, let's add the following new environment variables: APPSMITH_MONGODB_USER=<Your MongoDB User> APPSMITH_MONGODB_PASSWORD=<Your MongoDB Password> APPSMITH_API_BASE_URL=http://localhost:8080 Here, in place of <Your MongoDB User> and <Your MongoDB Password> , please use the same username and password that were given to APPSMITH_MONGODB_URI above. In the above example values, these would be root for user and rootpass for password.","title":"3. Migrate Configuration"},{"location":"Getting%20Started/setup/installation-guides/docker/migrate/#4-export-https-config-certificate-optional","text":"If you are not using a custom domain with your Appsmith instance, please skip this step. If you don't have APPSMITH_CUSTOM_DOMAIN already configured in your docker.env , please add a line like below echo APPSMITH_CUSTOM_DOMAIN=appsmith.mycustomdomain.com >> \"$new_path\"/stacks/configuration/docker.env You can also move your certificate to the new container by running following commands: mkdir -pv \"$new_path\"/stacks/letsencrypt sudo cp -rfv \"$old_path\"/data/certbot/conf/* \"$new_path\"/stacks/letsencrypt","title":"4. Export https config &amp; certificate (optional)"},{"location":"Getting%20Started/setup/installation-guides/docker/migrate/#5-setup-new-appsmith-with-fat-container","text":"Let's bring down the old instance in-full now: docker-compose --file \"$old_path\"/docker-compose.yml down Follow the official guide to start with a new Appsmith deployment at Docker Compose Configuration , also shown here in brief for reference: cd \"$new_path\" curl -L https://bit.ly/32jBNin -o docker-compose.yml docker-compose up -d Please note that you must create a new docker-compose.yml in \"$new_path\" folder, like with the curl command above. Don't copy it from \"$old_path\" .","title":"5. Setup new Appsmith with Fat container"},{"location":"Getting%20Started/setup/installation-guides/docker/migrate/#6-import-database","text":"After your new deployment comes up (usually takes ~30 seconds), we will import the data that was exported from the old instance: Create the folder to copy the archive file: mkdir -pv \"$new_path\"/stacks/data/restore Copy the archive file: cp \"$old_path\"/data/mongo/db/backup/appsmith-data.archive \"$new_path\"/stacks/data/restore/ Import data from this archive: docker-compose exec appsmith appsmithctl import_db Note that this will ask you Importing this DB will erase this data. Are you sure you want to proceed , where you can respond with y . It is safe in this situation since the new database in the new setup only contains initial data and should be safe to be overwritten. Once this is successful, we are ready to bring up our new instance!","title":"6. Import database"},{"location":"Getting%20Started/setup/installation-guides/docker/migrate/#7-verify-migration","text":"Navigate to your Appsmith instance, the same way you used to with your old instance, whether using IP address, or custom domain, and verify that your Appsmith instance is working well, and all your data is intact. After this, please designate a user as the superuser, to give them access to the Admin Settings page. You can follow the instructions at Configuring a superuser to apply this change. diff --git a/setting-up/migrate.md b/setting-up/migrate.md","title":"7. Verify migration"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/","text":"Kubernetes \u00b6 Installing Appsmith using Helm Charts \u00b6 This chart bootstraps an Appsmith deployment on a Kubernetes cluster using Helm package manager. Prerequisites \u00b6 Install the Helm package manager . Ensure kubectl is installed and configured to connect to your cluster. Install kubectl . Minikube: Setup Kubectl . Google Cloud Kubernetes: Configuring cluster access for kubectl AWS EKS: Create a kubeconfig for Amazon EKS Microk8s: Working with kubectl Please ensure you have a default storage class running on your cluster. Please follow one of the below guidelines to enable your default storage class - Minikube: Enable addon default-storageclass Google Cloud Kubernetes: Setting up default storage class on GKE AWS EKS: Create default storage class Microk8s: Enable storage Kubernetes NGINX Ingress Controller should be enabled on your cluster by default. Please make sure that you install the correct version for your cluster Minikube: Set up Ingress on Minikube with the NGINX Ingress Controller Google Cloud Kubernetes: Ingress with NGINX controller on Google Kubernetes Engine AWS EKS: Install NGINX Controller for AWS EKS Microk8s: Add on: Ingress {% hint style=\"warning\" %} Note: By default, the ingress controller will not have data compression enabled. You can enable it by following the steps listed in the Nginx ingress controller compression section. Installing the Chart \u00b6 Add Appsmith into your repository using Helm. helm repo add appsmith https://helm.appsmith.com helm repo update 2. Install the chart with the appsmith release. helm install appsmith/appsmith --generate-name The command deploys the Appsmith application on the Kubernetes cluster in the default configuration. The Parameters section lists the configurable parameters during installation. Uninstalling the Chart \u00b6 To uninstall the appsmith release: helm list NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION appsmith-1631069261 default 1 2021-09-09 11:24:40.152766 +0700 +07 deployed appsmith-1.3.0 1.16.0 helm uninstall appsmith-1631069261 The command uninstalls the release and removes all Kubernetes resources associated with the chart. Parameters \u00b6 Global parameters \u00b6 Name Description Value global.namespaceOverride Override the namespace for resource deployed by the chart \"\" global.storageClass Global StorageClass for Persistent Volume(s) \"\" Common parameters \u00b6 Name Description Value fullnameOverride String to fully override appsmith.name template \"\" containerName Specify container's name running in the pods \"appsmith\" commonLabels Labels to add to all deployed objects {} commonAnnotations Annotations to add to all deployed objects {} Appsmith Image parameters \u00b6 Name Description Value image.registry Appsmith image registry index.docker.io image.repository Appsmith image repository appsmith/appsmith-editor image.tag Appsmith image tag latest image.pullPolicy Appsmith image pull policy IfNotPresent Appsmith deployment parameters \u00b6 Name Description Value strategyType Appsmith deployment strategy type RollingUpdate schedulerName Alternate scheduler \"\" podAnnotations Annotations for Appsmith pods {} podSecurityContext Appsmith pods security context {} securityContext Set security context {} resources.limits The resources limits for the Appsmith container {} resources.requests The requested resources for the Appsmith container {} nodeSelector Node labels for pod assignment {} tolerations Tolerations for pod assignment [] affinity Affinity fod pod assignment {} Appsmith namespace parameters \u00b6 Name Description Value namespace.create Enable creation of Namespace true Appsmith service account parameters \u00b6 Name Description Value serviceAccount.create Enable creation of ServiceAccount for Appsmith pods true serviceAccount.name Name of the created ServiceAccount . If not set, a name is generated using the appsmith.fullname template \"\" serviceAccount.annotations Additional service account annotations {} Traffic Exposure Parameters \u00b6 Name Description Value service.type Appsmith service type ClusterIP service.port Appsmith service port 80 service.portName Appsmith service port name appsmith service.nodePort Appsmith service node port to expose to expose 8000 service.clusterIP Appsmith service Cluster \"\" service.loadBalancerIP Appsmith service Load Balancer IP \"\" service.loadBalancerSourceRanges Appsmith service Load Balancer sources [] service.annotations Additional custom annotations for Appsmith service {} ingress.enabled Enable ingress record generation for Appsmith false ingress.hosts An array of hosts to be covered with the ingress record [] ingress.tls Enable TLS configuration for the hosts defined at ingress.hosts parameter false ingress.secrets Custom TLS certificates as secrets [] ingress.certManager Enable ingress to use TLS certificates provided by Cert Manager false ingress.certManagerTls Specify TLS secret resources created by Cert Manager [] ingress.className Configure Ingress class that being used in ingress resource \"\" Persistence parameters \u00b6 Name Description Value persistence.enabled Enable persistence using Persistent Volume Claims true persistence.storageClass Persistent Volume storage class \"\" persistence.annotations Additional custom annotations for the PVC {} persistence.localStorage Enable persistent volume using local storage false persistence.storagePath Local storage path /tmp/hostpath_pv persistence.localCluster Local running cluster to provide storage space [minikube] persistence.accessModes Persistent Volume access modes [ReadWriteOnce] persistence.size Persistent Volume size 10Gi storageClass.enabled Enable Storage Class configuration false storageClass.defaultClass Create default Storage Class false storageClass.bindingMode Binding mode for Persistent Volume Claims using Storage Class Immediate storageClass.allowVolumeExpansion Allow expansion of Persistent Volume Claims using Storage Class true storageClass.reclaimPolicy Configure the retention of the dynamically created Persistent Volume Delete storageClass.provisioner Storage Class provisioner \"\" storageClass.annotations Additional storage class annotations {} storageClass.mountOptions Mount options used by Persistent Volumes {} storageClass.parameters Storage Class parameters {} Auto-update chart's image \u00b6 Name Description Value autoupdate.enabled Enable auto update Helm chart's image true autoupdate.scheduler Schedule time to run cron job to update image \"0 * * * *\" Specify each parameter using --set key=value[,key=value] argument to helm install. For example: helm install \\ --set persistence.storageClass=appsmith-pv \\ stable-appsmith/appsmith --generate-name The above command deploys the Appsmith application and configures the application to use the storage class name appsmith-pv . Alternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example: helm install -f values.yaml stable-appsmith/appsmith --generate-name Tip : You can use the default values.yaml as a starting point for configuring this way. Appsmith configuration \u00b6 To change Appsmith configurations, you can update the values.yaml file (the available configurations are listed below). Name Value applicationConfig.APPSMITH_OAUTH2_GOOGLE_CLIENT_ID \"\" applicationConfig.APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET \"\" applicationConfig.APPSMITH_OAUTH2_GITHUB_CLIENT_ID \"\" applicationConfig.APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET \"\" applicationConfig.APPSMITH_CLIENT_LOG_LEVEL \"\" applicationConfig.APPSMITH_GOOGLE_MAPS_API_KEY \"\" applicationConfig.APPSMITH_MAIL_ENABLED \"\" applicationConfig.APPSMITH_MAIL_HOST \"\" applicationConfig.APPSMITH_MAIL_PORT \"\" applicationConfig.APPSMITH_MAIL_USERNAME \"\" applicationConfig.APPSMITH_MAIL_PASSWORD \"\" applicationConfig.APPSMITH_MAIL_FROM \"\" applicationConfig.APPSMITH_REPLY_TO \"\" applicationConfig.APPSMITH_MAIL_SMTP_AUTH \"\" applicationConfig.APPSMITH_MAIL_SMTP_TLS_ENABLED \"\" applicationConfig.APPSMITH_DISABLE_TELEMETRY \"\" applicationConfig.APPSMITH_RECAPTCHA_SITE_KEY \"\" applicationConfig.APPSMITH_RECAPTCHA_SECRET_KEY \"\" applicationConfig.APPSMITH_RECAPTCHA_ENABLED \"\" applicationConfig.APPSMITH_MONGODB_URI \"\" applicationConfig.APPSMITH_REDIS_URL \"\" applicationConfig.APPSMITH_ENCRYPTION_PASSWORD \"\" applicationConfig.APPSMITH_ENCRYPTION_SALT \"\" applicationConfig.APPSMITH_CUSTOM_DOMAIN \"\" For example, to change the encryption salt configuration, you can run the following command: helm install \\ --set applicationConfig.APPSMITH_ENCRYPTION_SALT=123 \\ stable-appsmith/appsmith --generate-name Expose Appsmith \u00b6 If you wish to publish your Appsmith to the world through the Internet, you will need to setup the Ingress controller firstly. Please refer to the section Kubernetes NGINX Ingress Controller in the Prerequisites . In case of you have not install the Helm chart yet, you can run the below command to install it with exposing Appsmith: helm install appsmith/appsmith --generate-name \\ --set ingress.enabled=true \\ --set ingress.annotations.\"kubernetes\\.io/ingress\\.class\"=nginx \\ --set service.type=ClusterIP * If you have installed Appsmith Helm chart, please run the helm upgrade command to upgrade the existing installation ``` helm upgrade --set ingress.enabled=true appsmith appsmith/appsmith Or this command if you are using values.yaml file \u00b6 helm upgrade --values values.yaml appsmith appsmith/appsmith ``` Updating Appsmith \u00b6 Auto Update \u00b6 In the default Appsmith helm installation the auto-update is disabled (Recommended). You have the option to enable auto-update for your Appsmith helm deployment by either: Setting autoupdate.enabled to true in the values.yaml file, if you are using the values file. helm upgrade --values values.yaml appsmith appsmith/appsmith By passing the argument --set autoupdate.enabled=true to the helm install/upgrade command. helm install appsmith/appsmith --generate-name \\ --set ingress.enabled=true \\ --set ingress.annotations.\"kubernetes\\.io/ingress\\.class\"=nginx \\ --set service.type=ClusterIP \\ --set autoupdate.enabled=true Manual Update \u00b6 To manually update the Appsmith container image to the latest release, run the command: kubectl rollout restart statefulset appsmith Nginx ingress controller compression (Gzip) \u00b6 In the default installation, the Nginx ingress controller will not have the data compression configured. Please follow the following steps to enable it. Edit the configMap for ingress-nginx-controller by using the below command kubectl edit configmap -n ingress-nginx ingress-nginx-controller Add the following to the data section.\\ yaml data: # ADD IF NOT PRESENT use-gzip: \"true\" # ENABLE GZIP COMPRESSION gzip-types: \"*\" # SPECIFY MIME TYPES TO COMPRESS (\"*\" FOR ALL) {% hint style=\"warning\" %} The Nginx controller will automatically update after saving ( :wq! ) the above changes. Troubleshooting \u00b6 If you encounter any errors during this process, check out our guide on debugging deployment errors . If you are still facing any issues, please reach out to support@appsmith.com or join our Discord Server to speak to the Appsmith team directly! Further Reading \u00b6 Configuring Self Hosted Instances Managing the Appsmith instance Tutorials","title":"Kubernetes"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#kubernetes","text":"","title":"Kubernetes"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#installing-appsmith-using-helm-charts","text":"This chart bootstraps an Appsmith deployment on a Kubernetes cluster using Helm package manager.","title":"Installing Appsmith using Helm Charts"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#prerequisites","text":"Install the Helm package manager . Ensure kubectl is installed and configured to connect to your cluster. Install kubectl . Minikube: Setup Kubectl . Google Cloud Kubernetes: Configuring cluster access for kubectl AWS EKS: Create a kubeconfig for Amazon EKS Microk8s: Working with kubectl Please ensure you have a default storage class running on your cluster. Please follow one of the below guidelines to enable your default storage class - Minikube: Enable addon default-storageclass Google Cloud Kubernetes: Setting up default storage class on GKE AWS EKS: Create default storage class Microk8s: Enable storage Kubernetes NGINX Ingress Controller should be enabled on your cluster by default. Please make sure that you install the correct version for your cluster Minikube: Set up Ingress on Minikube with the NGINX Ingress Controller Google Cloud Kubernetes: Ingress with NGINX controller on Google Kubernetes Engine AWS EKS: Install NGINX Controller for AWS EKS Microk8s: Add on: Ingress {% hint style=\"warning\" %} Note: By default, the ingress controller will not have data compression enabled. You can enable it by following the steps listed in the Nginx ingress controller compression section.","title":"Prerequisites"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#installing-the-chart","text":"Add Appsmith into your repository using Helm. helm repo add appsmith https://helm.appsmith.com helm repo update 2. Install the chart with the appsmith release. helm install appsmith/appsmith --generate-name The command deploys the Appsmith application on the Kubernetes cluster in the default configuration. The Parameters section lists the configurable parameters during installation.","title":"Installing the Chart"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#uninstalling-the-chart","text":"To uninstall the appsmith release: helm list NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION appsmith-1631069261 default 1 2021-09-09 11:24:40.152766 +0700 +07 deployed appsmith-1.3.0 1.16.0 helm uninstall appsmith-1631069261 The command uninstalls the release and removes all Kubernetes resources associated with the chart.","title":"Uninstalling the Chart"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#parameters","text":"","title":"Parameters"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#global-parameters","text":"Name Description Value global.namespaceOverride Override the namespace for resource deployed by the chart \"\" global.storageClass Global StorageClass for Persistent Volume(s) \"\"","title":"Global parameters"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#common-parameters","text":"Name Description Value fullnameOverride String to fully override appsmith.name template \"\" containerName Specify container's name running in the pods \"appsmith\" commonLabels Labels to add to all deployed objects {} commonAnnotations Annotations to add to all deployed objects {}","title":"Common parameters"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#appsmith-image-parameters","text":"Name Description Value image.registry Appsmith image registry index.docker.io image.repository Appsmith image repository appsmith/appsmith-editor image.tag Appsmith image tag latest image.pullPolicy Appsmith image pull policy IfNotPresent","title":"Appsmith Image parameters"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#appsmith-deployment-parameters","text":"Name Description Value strategyType Appsmith deployment strategy type RollingUpdate schedulerName Alternate scheduler \"\" podAnnotations Annotations for Appsmith pods {} podSecurityContext Appsmith pods security context {} securityContext Set security context {} resources.limits The resources limits for the Appsmith container {} resources.requests The requested resources for the Appsmith container {} nodeSelector Node labels for pod assignment {} tolerations Tolerations for pod assignment [] affinity Affinity fod pod assignment {}","title":"Appsmith deployment parameters"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#appsmith-namespace-parameters","text":"Name Description Value namespace.create Enable creation of Namespace true","title":"Appsmith namespace parameters"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#appsmith-service-account-parameters","text":"Name Description Value serviceAccount.create Enable creation of ServiceAccount for Appsmith pods true serviceAccount.name Name of the created ServiceAccount . If not set, a name is generated using the appsmith.fullname template \"\" serviceAccount.annotations Additional service account annotations {}","title":"Appsmith service account parameters"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#traffic-exposure-parameters","text":"Name Description Value service.type Appsmith service type ClusterIP service.port Appsmith service port 80 service.portName Appsmith service port name appsmith service.nodePort Appsmith service node port to expose to expose 8000 service.clusterIP Appsmith service Cluster \"\" service.loadBalancerIP Appsmith service Load Balancer IP \"\" service.loadBalancerSourceRanges Appsmith service Load Balancer sources [] service.annotations Additional custom annotations for Appsmith service {} ingress.enabled Enable ingress record generation for Appsmith false ingress.hosts An array of hosts to be covered with the ingress record [] ingress.tls Enable TLS configuration for the hosts defined at ingress.hosts parameter false ingress.secrets Custom TLS certificates as secrets [] ingress.certManager Enable ingress to use TLS certificates provided by Cert Manager false ingress.certManagerTls Specify TLS secret resources created by Cert Manager [] ingress.className Configure Ingress class that being used in ingress resource \"\"","title":"Traffic Exposure Parameters"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#persistence-parameters","text":"Name Description Value persistence.enabled Enable persistence using Persistent Volume Claims true persistence.storageClass Persistent Volume storage class \"\" persistence.annotations Additional custom annotations for the PVC {} persistence.localStorage Enable persistent volume using local storage false persistence.storagePath Local storage path /tmp/hostpath_pv persistence.localCluster Local running cluster to provide storage space [minikube] persistence.accessModes Persistent Volume access modes [ReadWriteOnce] persistence.size Persistent Volume size 10Gi storageClass.enabled Enable Storage Class configuration false storageClass.defaultClass Create default Storage Class false storageClass.bindingMode Binding mode for Persistent Volume Claims using Storage Class Immediate storageClass.allowVolumeExpansion Allow expansion of Persistent Volume Claims using Storage Class true storageClass.reclaimPolicy Configure the retention of the dynamically created Persistent Volume Delete storageClass.provisioner Storage Class provisioner \"\" storageClass.annotations Additional storage class annotations {} storageClass.mountOptions Mount options used by Persistent Volumes {} storageClass.parameters Storage Class parameters {}","title":"Persistence parameters"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#auto-update-charts-image","text":"Name Description Value autoupdate.enabled Enable auto update Helm chart's image true autoupdate.scheduler Schedule time to run cron job to update image \"0 * * * *\" Specify each parameter using --set key=value[,key=value] argument to helm install. For example: helm install \\ --set persistence.storageClass=appsmith-pv \\ stable-appsmith/appsmith --generate-name The above command deploys the Appsmith application and configures the application to use the storage class name appsmith-pv . Alternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example: helm install -f values.yaml stable-appsmith/appsmith --generate-name Tip : You can use the default values.yaml as a starting point for configuring this way.","title":"Auto-update chart's image"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#appsmith-configuration","text":"To change Appsmith configurations, you can update the values.yaml file (the available configurations are listed below). Name Value applicationConfig.APPSMITH_OAUTH2_GOOGLE_CLIENT_ID \"\" applicationConfig.APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET \"\" applicationConfig.APPSMITH_OAUTH2_GITHUB_CLIENT_ID \"\" applicationConfig.APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET \"\" applicationConfig.APPSMITH_CLIENT_LOG_LEVEL \"\" applicationConfig.APPSMITH_GOOGLE_MAPS_API_KEY \"\" applicationConfig.APPSMITH_MAIL_ENABLED \"\" applicationConfig.APPSMITH_MAIL_HOST \"\" applicationConfig.APPSMITH_MAIL_PORT \"\" applicationConfig.APPSMITH_MAIL_USERNAME \"\" applicationConfig.APPSMITH_MAIL_PASSWORD \"\" applicationConfig.APPSMITH_MAIL_FROM \"\" applicationConfig.APPSMITH_REPLY_TO \"\" applicationConfig.APPSMITH_MAIL_SMTP_AUTH \"\" applicationConfig.APPSMITH_MAIL_SMTP_TLS_ENABLED \"\" applicationConfig.APPSMITH_DISABLE_TELEMETRY \"\" applicationConfig.APPSMITH_RECAPTCHA_SITE_KEY \"\" applicationConfig.APPSMITH_RECAPTCHA_SECRET_KEY \"\" applicationConfig.APPSMITH_RECAPTCHA_ENABLED \"\" applicationConfig.APPSMITH_MONGODB_URI \"\" applicationConfig.APPSMITH_REDIS_URL \"\" applicationConfig.APPSMITH_ENCRYPTION_PASSWORD \"\" applicationConfig.APPSMITH_ENCRYPTION_SALT \"\" applicationConfig.APPSMITH_CUSTOM_DOMAIN \"\" For example, to change the encryption salt configuration, you can run the following command: helm install \\ --set applicationConfig.APPSMITH_ENCRYPTION_SALT=123 \\ stable-appsmith/appsmith --generate-name","title":"Appsmith configuration"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#expose-appsmith","text":"If you wish to publish your Appsmith to the world through the Internet, you will need to setup the Ingress controller firstly. Please refer to the section Kubernetes NGINX Ingress Controller in the Prerequisites . In case of you have not install the Helm chart yet, you can run the below command to install it with exposing Appsmith: helm install appsmith/appsmith --generate-name \\ --set ingress.enabled=true \\ --set ingress.annotations.\"kubernetes\\.io/ingress\\.class\"=nginx \\ --set service.type=ClusterIP * If you have installed Appsmith Helm chart, please run the helm upgrade command to upgrade the existing installation ``` helm upgrade --set ingress.enabled=true appsmith appsmith/appsmith","title":"Expose Appsmith"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#or-this-command-if-you-are-using-valuesyaml-file","text":"helm upgrade --values values.yaml appsmith appsmith/appsmith ```","title":"Or this command if you are using values.yaml file"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#updating-appsmith","text":"","title":"Updating Appsmith"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#auto-update","text":"In the default Appsmith helm installation the auto-update is disabled (Recommended). You have the option to enable auto-update for your Appsmith helm deployment by either: Setting autoupdate.enabled to true in the values.yaml file, if you are using the values file. helm upgrade --values values.yaml appsmith appsmith/appsmith By passing the argument --set autoupdate.enabled=true to the helm install/upgrade command. helm install appsmith/appsmith --generate-name \\ --set ingress.enabled=true \\ --set ingress.annotations.\"kubernetes\\.io/ingress\\.class\"=nginx \\ --set service.type=ClusterIP \\ --set autoupdate.enabled=true","title":"Auto Update"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#manual-update","text":"To manually update the Appsmith container image to the latest release, run the command: kubectl rollout restart statefulset appsmith","title":"Manual Update"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#nginx-ingress-controller-compression-gzip","text":"In the default installation, the Nginx ingress controller will not have the data compression configured. Please follow the following steps to enable it. Edit the configMap for ingress-nginx-controller by using the below command kubectl edit configmap -n ingress-nginx ingress-nginx-controller Add the following to the data section.\\ yaml data: # ADD IF NOT PRESENT use-gzip: \"true\" # ENABLE GZIP COMPRESSION gzip-types: \"*\" # SPECIFY MIME TYPES TO COMPRESS (\"*\" FOR ALL) {% hint style=\"warning\" %} The Nginx controller will automatically update after saving ( :wq! ) the above changes.","title":"Nginx ingress controller compression (Gzip)"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#troubleshooting","text":"If you encounter any errors during this process, check out our guide on debugging deployment errors . If you are still facing any issues, please reach out to support@appsmith.com or join our Discord Server to speak to the Appsmith team directly!","title":"Troubleshooting"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/#further-reading","text":"Configuring Self Hosted Instances Managing the Appsmith instance Tutorials","title":"Further Reading"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/migrate-k8s/","text":"Migrate from multi-container setup (k8s) \u00b6 Appsmith is now supported on Helm and this guide will help you migrate the deployment on Kubernetes, running on the old stack (multiple pods/containers), to the Helm chart (with single container). This guide will work properly on the default Kubernetes installation with following resources: \u279c kubectl get all NAME READY STATUS RESTARTS AGE pod/appsmith-editor-995c974df-njtdh 1/1 Running 0 3d12h pod/appsmith-internal-server-dfd68b55b-8p5w8 1/1 Running 1 3d12h pod/imago-27473940-kwslt 0/1 Completed 0 12m pod/mongo-statefulset-0 1/1 Running 0 3d12h pod/redis-statefulset-0 1/1 Running 0 3d12h NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/appsmith-backend-service NodePort 10.100.247.245 <none> 8080:32694/TCP 3d12h service/appsmith-editor ClusterIP 10.100.236.17 <none> 80/TCP 3d12h service/kubernetes ClusterIP 10.100.0.1 <none> 443/TCP 3d12h service/mongo-service NodePort 10.100.2.162 <none> 27017:31766/TCP 3d12h service/redis-service NodePort 10.100.7.184 <none> 6379:30834/TCP 3d12h NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/appsmith-editor 1/1 1 1 3d12h deployment.apps/appsmith-internal-server 1/1 1 1 3d12h NAME DESIRED CURRENT READY AGE replicaset.apps/appsmith-editor-995c974df 1 1 1 3d12h replicaset.apps/appsmith-internal-server-dfd68b55b 1 1 1 3d12h NAME READY AGE statefulset.apps/mongo-statefulset 1/1 3d12h statefulset.apps/redis-statefulset 1/1 3d12h NAME SCHEDULE SUSPEND ACTIVE LAST SCHEDULE AGE cronjob.batch/imago 0 * * * * False 0 12m 3d12h NAME COMPLETIONS DURATION AGE job.batch/imago-27473940 1/1 16s 12m Before migrating \u00b6 1. Prerequisites \u00b6 kubectl must be installed and configured to connect your cluster: Install kubectl: kubernetes.io/vi/docs/tasks/tools/install-kubectl/ Minikube: Setup Kubectl Google Cloud Kubernetes: Configuring cluster access for kubectl Aws EKS: Create a kubeconfig for Amazon EKS During this guide, we will use yq package to format data from the ConfigMap resources into a .yaml file as reference in migrating configuration: Install yq package: https://github.com/mikefarah/yq#install 2. Not include in this document \u00b6 Based on the context of Kubernetes, there are two sections will not be covered in this guideline: Migrate existing SSL certificate: In both context of old Kubernetes stack & new Helm chart, Kubernetes cluster will use cert-manager ( https://cert-manager.io/ ) to provision the SSL certificate. By definition, cert-manager is an Automate certificate manager which provisions and manages the certificates itself => Backward incompatible if migrating certificate from one cert-manager to another one. Suggestion: We suggest that after migrating to the Helm chart, you can follow this document ( https://github.com/appsmithorg/appsmith/blob/release/deploy/helm/Setup-https.md ) to setup new cert-manager and provision new certificate. Remove old Kubernetes stack: During this guide, we will not mention about removing the old Kubernetes stacks due to it is not a required step in the migration and you can keep it as a back-up plan in case of having issue when migrating to new Helm chart. Migration steps \u00b6 1. Export database & configuration from old K8S \u00b6 Goal: Export data from the existing MongoDB pod and download the archive file to local. Steps Create backup directory in MongoDB pod. Execute mongodump command to export data from running MongoDB pod. Copy archive file from MongoDB pod to local. Commands Create backup directory: kubectl exec mongo-statefulset-0 -- mkdir -pv /data/db/backup Export MongoDB data: kubectl exec mongo-statefulset-0 o-statefulset-0 -- sh -c 'mongodump --uri=\"mongodb://$MONGO_INITDB_ROOT_USERNAME:$MONGO_INITDB_ROOT_PASSWORD@localhost/$MONGO_INITDB_DATABASE\" --authenticationDatabase admin --archive=/data/db/backup/appsmith-data.archive --gzip' Copy archive file to local: kubectl cp mongo-statefulset-0:data/db/backup/appsmith-data.archive appsmith-data.archive * Verify * Output of this step should be a local archive file which store all data of the existing MongoDB service in Kubernetes. We can verify by listing out local directory to check if the archive file has been stored in local. ``` ls | grep appsmith-data.archive appsmith-data.archive ``` 2. Export configuration from old K8S \u00b6 Goal: Export all existing configurations from the ConfigMap in the running Kubernetes system and migrate them into the values.yaml template of the Helm chart. Steps Retrieve all configurations data from ConfigMap and write into a file with yaml format ( configuration.yaml ). Download the values.yaml template of the Helm chart. Manually copy data from configuration.yaml to the section applicationConfig of the values.yaml . Commands Run following command to get and write data into configuration.yaml file: kubectl get cm application-config -o \"jsonpath={.data}\" | yq e -P -I 2 >> configuration.yaml \\ && kubectl get cm mongo-config -o \"jsonpath={.data}\" | yq e -P -I 2 >> configuration.yaml \\ && kubectl get cm encryption-config -o \"jsonpath={.data}\" | yq e -P -I 2 >> configuration.yaml * Download values.yaml template of Helm chart: curl -o values.yaml https://raw.githubusercontent.com/appsmithorg/appsmith/release/deploy/helm/values.yaml Manually copy values to values.yaml (put value in the quote \"\" is highly recommend): * Verify * After manually migrating configuration, the applicationConfig section in the values.yaml should be same as below: applicationConfig: APPSMITH_OAUTH2_GOOGLE_CLIENT_ID: \"\" APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET: \"\" APPSMITH_OAUTH2_GITHUB_CLIENT_ID: \"\" APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET: \"\" APPSMITH_FORM_LOGIN_DISABLED: \"false\" APPSMITH_SIGNUP_DISABLED: \"true\" APPSMITH_CLIENT_LOG_LEVEL: \"\" APPSMITH_GOOGLE_MAPS_API_KEY: \"false\" APPSMITH_MAIL_ENABLED: \"\" APPSMITH_MAIL_HOST: \"\" APPSMITH_MAIL_PORT: \"\" APPSMITH_MAIL_USERNAME: \"\" APPSMITH_MAIL_PASSWORD: \"\" APPSMITH_MAIL_FROM: \"\" APPSMITH_REPLY_TO: \"\" APPSMITH_MAIL_SMTP_AUTH: \"\" APPSMITH_MAIL_SMTP_TLS_ENABLED: \"\" APPSMITH_DISABLE_TELEMETRY: \"false\" APPSMITH_RECAPTCHA_SITE_KEY: \"\" APPSMITH_RECAPTCHA_SECRET_KEY: \"\" APPSMITH_RECAPTCHA_ENABLED: \"false\" APPSMITH_MONGODB_URI: \"mongodb://root:root@mongo-service/appsmith\" APPSMITH_REDIS_URL: \"redis://redis-service:6379\" APPSMITH_ENCRYPTION_PASSWORD: \"rmEOM1TxTRxit\" APPSMITH_ENCRYPTION_SALT: \"Jhj1IyFcpKYUK\" APPSMITH_CUSTOM_DOMAIN: \"\" 3. Change configurations for Helm context \u00b6 Goal: Change configurations in values.yaml after migrating from step 2, this will ensure that Helm chart can run properly with internal Redis & MongoDB service. Steps Change MongoDB URI with internal host. Add additional configuration for initial credential of MongoDB Replace Redis URL with local URL Action Change MongoDB URI with internal host: In the old Kubernetes stack, MongoDB has been deployed as a separated resource in the cluster. In the new Helm chart, we use the internal MongoDB service and configure it as ReplicaSet . Therefore, we will need to perform following action for Helm context: Change the host in the APPSMITH_MONGODB_URI from mongo-service to localhost . Remove query parameter in the URI if they exist. Add additional configuration for initial credential of MongoDB : You will need to add 2 new variables that are APPSMITH_MONGODB_USER & APPSMITH_MONGODB_PASSWORD with values of user & password of the MongoDB . Replace Redis URL with local URL: Same as MongoDB , in the new Helm chart, we also use the internal Redis service. Therefore, changing the host from redis-service to localhost (or 127.0.0.1 ) is necessary action here. Verify Take the example as in the Verify step in section 2, after changing configuration, we will have the section applicationConfig with values as below: applicationConfig: APPSMITH_OAUTH2_GOOGLE_CLIENT_ID: \"\" APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET: \"\" APPSMITH_OAUTH2_GITHUB_CLIENT_ID: \"\" APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET: \"\" APPSMITH_FORM_LOGIN_DISABLED: \"false\" APPSMITH_SIGNUP_DISABLED: \"true\" APPSMITH_CLIENT_LOG_LEVEL: \"\" APPSMITH_GOOGLE_MAPS_API_KEY: \"false\" APPSMITH_MAIL_ENABLED: \"\" APPSMITH_MAIL_HOST: \"\" APPSMITH_MAIL_PORT: \"\" APPSMITH_MAIL_USERNAME: \"\" APPSMITH_MAIL_PASSWORD: \"\" APPSMITH_MAIL_FROM: \"\" APPSMITH_REPLY_TO: \"\" APPSMITH_MAIL_SMTP_AUTH: \"\" APPSMITH_MAIL_SMTP_TLS_ENABLED: \"\" APPSMITH_DISABLE_TELEMETRY: \"false\" APPSMITH_RECAPTCHA_SITE_KEY: \"\" APPSMITH_RECAPTCHA_SECRET_KEY: \"\" APPSMITH_RECAPTCHA_ENABLED: \"false\" APPSMITH_MONGODB_URI: \"mongodb://root:root@localhost/appsmith\" APPSMITH_REDIS_URL: \"redis://127.0.0.1:6379\" APPSMITH_ENCRYPTION_PASSWORD: \"rmEOM1TxTRxit\" APPSMITH_ENCRYPTION_SALT: \"Jhj1IyFcpKYUK\" APPSMITH_CUSTOM_DOMAIN: \"\" APPSMITH_MONGODB_USER: \"root\" APPSMITH_MONGODB_PASSWORD: \"root\" 4. Install Helm chart \u00b6 Goal: Guide to install new Helm chart with old configuration Steps Add Helm repository. Update repository. Remove Imago resources. Install Appsmith Helm chart. Command Add Helm repository: helm repo add appsmith https://helm.appsmith.com Update repository: helm repo update Remove Imago resources: Imago is a auto-update tool for Kubernetes, this tool is set up in both context of old Kubernetes stack & Helm chart. Therefore, it may occur a conflict in deploying Helm chart with existing Imago service account & cronjob. Removing it from old Kubernetes context is necessary: kubectl delete sa,cronjob imago Install Appsmith Helm chart helm install appsmith appsmith/appsmith --values values.yaml * Verify * After installation, you can check running pods with below command and should see new pod which created by the Helm chart: kubectl get pods NAME READY STATUS RESTARTS AGE appsmith-0 1/1 Running 0 2m48s appsmith-editor-566f7b547f-lb9n8 1/1 Running 0 55m appsmith-internal-server-5c78944b64-fs7jm 1/1 Running 0 44m mongo-statefulset-0 1/1 Running 0 55m redis-statefulset-0 1/1 Running 0 55m 5. Import database \u00b6 Goal: Importing data from archive file into new Helm chart Steps Create restore directory in new pod. Copy archive file from local to new pod. Run import_db command. Command Create restore directory in new pod kubectl exec appsmith-0 -- mkdir -p /appsmith-stacks/data/restore * Copy archive file from local to new pod: kubectl cp appsmith-data.archive appsmith-0:/appsmith-stacks/data/restore Run import_db command: kubectl exec -it appsmith-0 -- appsmithctl import_db Note that this will ask you Importing this DB will erase this data. Are you sure you want to proceed , where you can respond with y . It is safe in this situation since the new database in the new setup only contains initial data and should be safe to be overwritten. * Verify * Expected output in this step is Helm chart still works properly after importing and the data from old Kubernetes stack also comes up in the Helm chart","title":"Migrate from multi-container setup (k8s)"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/migrate-k8s/#migrate-from-multi-container-setup-k8s","text":"Appsmith is now supported on Helm and this guide will help you migrate the deployment on Kubernetes, running on the old stack (multiple pods/containers), to the Helm chart (with single container). This guide will work properly on the default Kubernetes installation with following resources: \u279c kubectl get all NAME READY STATUS RESTARTS AGE pod/appsmith-editor-995c974df-njtdh 1/1 Running 0 3d12h pod/appsmith-internal-server-dfd68b55b-8p5w8 1/1 Running 1 3d12h pod/imago-27473940-kwslt 0/1 Completed 0 12m pod/mongo-statefulset-0 1/1 Running 0 3d12h pod/redis-statefulset-0 1/1 Running 0 3d12h NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/appsmith-backend-service NodePort 10.100.247.245 <none> 8080:32694/TCP 3d12h service/appsmith-editor ClusterIP 10.100.236.17 <none> 80/TCP 3d12h service/kubernetes ClusterIP 10.100.0.1 <none> 443/TCP 3d12h service/mongo-service NodePort 10.100.2.162 <none> 27017:31766/TCP 3d12h service/redis-service NodePort 10.100.7.184 <none> 6379:30834/TCP 3d12h NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/appsmith-editor 1/1 1 1 3d12h deployment.apps/appsmith-internal-server 1/1 1 1 3d12h NAME DESIRED CURRENT READY AGE replicaset.apps/appsmith-editor-995c974df 1 1 1 3d12h replicaset.apps/appsmith-internal-server-dfd68b55b 1 1 1 3d12h NAME READY AGE statefulset.apps/mongo-statefulset 1/1 3d12h statefulset.apps/redis-statefulset 1/1 3d12h NAME SCHEDULE SUSPEND ACTIVE LAST SCHEDULE AGE cronjob.batch/imago 0 * * * * False 0 12m 3d12h NAME COMPLETIONS DURATION AGE job.batch/imago-27473940 1/1 16s 12m","title":"Migrate from multi-container setup (k8s)"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/migrate-k8s/#before-migrating","text":"","title":"Before migrating"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/migrate-k8s/#1-prerequisites","text":"kubectl must be installed and configured to connect your cluster: Install kubectl: kubernetes.io/vi/docs/tasks/tools/install-kubectl/ Minikube: Setup Kubectl Google Cloud Kubernetes: Configuring cluster access for kubectl Aws EKS: Create a kubeconfig for Amazon EKS During this guide, we will use yq package to format data from the ConfigMap resources into a .yaml file as reference in migrating configuration: Install yq package: https://github.com/mikefarah/yq#install","title":"1. Prerequisites"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/migrate-k8s/#2-not-include-in-this-document","text":"Based on the context of Kubernetes, there are two sections will not be covered in this guideline: Migrate existing SSL certificate: In both context of old Kubernetes stack & new Helm chart, Kubernetes cluster will use cert-manager ( https://cert-manager.io/ ) to provision the SSL certificate. By definition, cert-manager is an Automate certificate manager which provisions and manages the certificates itself => Backward incompatible if migrating certificate from one cert-manager to another one. Suggestion: We suggest that after migrating to the Helm chart, you can follow this document ( https://github.com/appsmithorg/appsmith/blob/release/deploy/helm/Setup-https.md ) to setup new cert-manager and provision new certificate. Remove old Kubernetes stack: During this guide, we will not mention about removing the old Kubernetes stacks due to it is not a required step in the migration and you can keep it as a back-up plan in case of having issue when migrating to new Helm chart.","title":"2. Not include in this document"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/migrate-k8s/#migration-steps","text":"","title":"Migration steps"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/migrate-k8s/#1-export-database-configuration-from-old-k8s","text":"Goal: Export data from the existing MongoDB pod and download the archive file to local. Steps Create backup directory in MongoDB pod. Execute mongodump command to export data from running MongoDB pod. Copy archive file from MongoDB pod to local. Commands Create backup directory: kubectl exec mongo-statefulset-0 -- mkdir -pv /data/db/backup Export MongoDB data: kubectl exec mongo-statefulset-0 o-statefulset-0 -- sh -c 'mongodump --uri=\"mongodb://$MONGO_INITDB_ROOT_USERNAME:$MONGO_INITDB_ROOT_PASSWORD@localhost/$MONGO_INITDB_DATABASE\" --authenticationDatabase admin --archive=/data/db/backup/appsmith-data.archive --gzip' Copy archive file to local: kubectl cp mongo-statefulset-0:data/db/backup/appsmith-data.archive appsmith-data.archive * Verify * Output of this step should be a local archive file which store all data of the existing MongoDB service in Kubernetes. We can verify by listing out local directory to check if the archive file has been stored in local. ``` ls | grep appsmith-data.archive appsmith-data.archive ```","title":"1. Export database &amp; configuration from old K8S"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/migrate-k8s/#2-export-configuration-from-old-k8s","text":"Goal: Export all existing configurations from the ConfigMap in the running Kubernetes system and migrate them into the values.yaml template of the Helm chart. Steps Retrieve all configurations data from ConfigMap and write into a file with yaml format ( configuration.yaml ). Download the values.yaml template of the Helm chart. Manually copy data from configuration.yaml to the section applicationConfig of the values.yaml . Commands Run following command to get and write data into configuration.yaml file: kubectl get cm application-config -o \"jsonpath={.data}\" | yq e -P -I 2 >> configuration.yaml \\ && kubectl get cm mongo-config -o \"jsonpath={.data}\" | yq e -P -I 2 >> configuration.yaml \\ && kubectl get cm encryption-config -o \"jsonpath={.data}\" | yq e -P -I 2 >> configuration.yaml * Download values.yaml template of Helm chart: curl -o values.yaml https://raw.githubusercontent.com/appsmithorg/appsmith/release/deploy/helm/values.yaml Manually copy values to values.yaml (put value in the quote \"\" is highly recommend): * Verify * After manually migrating configuration, the applicationConfig section in the values.yaml should be same as below: applicationConfig: APPSMITH_OAUTH2_GOOGLE_CLIENT_ID: \"\" APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET: \"\" APPSMITH_OAUTH2_GITHUB_CLIENT_ID: \"\" APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET: \"\" APPSMITH_FORM_LOGIN_DISABLED: \"false\" APPSMITH_SIGNUP_DISABLED: \"true\" APPSMITH_CLIENT_LOG_LEVEL: \"\" APPSMITH_GOOGLE_MAPS_API_KEY: \"false\" APPSMITH_MAIL_ENABLED: \"\" APPSMITH_MAIL_HOST: \"\" APPSMITH_MAIL_PORT: \"\" APPSMITH_MAIL_USERNAME: \"\" APPSMITH_MAIL_PASSWORD: \"\" APPSMITH_MAIL_FROM: \"\" APPSMITH_REPLY_TO: \"\" APPSMITH_MAIL_SMTP_AUTH: \"\" APPSMITH_MAIL_SMTP_TLS_ENABLED: \"\" APPSMITH_DISABLE_TELEMETRY: \"false\" APPSMITH_RECAPTCHA_SITE_KEY: \"\" APPSMITH_RECAPTCHA_SECRET_KEY: \"\" APPSMITH_RECAPTCHA_ENABLED: \"false\" APPSMITH_MONGODB_URI: \"mongodb://root:root@mongo-service/appsmith\" APPSMITH_REDIS_URL: \"redis://redis-service:6379\" APPSMITH_ENCRYPTION_PASSWORD: \"rmEOM1TxTRxit\" APPSMITH_ENCRYPTION_SALT: \"Jhj1IyFcpKYUK\" APPSMITH_CUSTOM_DOMAIN: \"\"","title":"2. Export configuration from old K8S"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/migrate-k8s/#3-change-configurations-for-helm-context","text":"Goal: Change configurations in values.yaml after migrating from step 2, this will ensure that Helm chart can run properly with internal Redis & MongoDB service. Steps Change MongoDB URI with internal host. Add additional configuration for initial credential of MongoDB Replace Redis URL with local URL Action Change MongoDB URI with internal host: In the old Kubernetes stack, MongoDB has been deployed as a separated resource in the cluster. In the new Helm chart, we use the internal MongoDB service and configure it as ReplicaSet . Therefore, we will need to perform following action for Helm context: Change the host in the APPSMITH_MONGODB_URI from mongo-service to localhost . Remove query parameter in the URI if they exist. Add additional configuration for initial credential of MongoDB : You will need to add 2 new variables that are APPSMITH_MONGODB_USER & APPSMITH_MONGODB_PASSWORD with values of user & password of the MongoDB . Replace Redis URL with local URL: Same as MongoDB , in the new Helm chart, we also use the internal Redis service. Therefore, changing the host from redis-service to localhost (or 127.0.0.1 ) is necessary action here. Verify Take the example as in the Verify step in section 2, after changing configuration, we will have the section applicationConfig with values as below: applicationConfig: APPSMITH_OAUTH2_GOOGLE_CLIENT_ID: \"\" APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET: \"\" APPSMITH_OAUTH2_GITHUB_CLIENT_ID: \"\" APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET: \"\" APPSMITH_FORM_LOGIN_DISABLED: \"false\" APPSMITH_SIGNUP_DISABLED: \"true\" APPSMITH_CLIENT_LOG_LEVEL: \"\" APPSMITH_GOOGLE_MAPS_API_KEY: \"false\" APPSMITH_MAIL_ENABLED: \"\" APPSMITH_MAIL_HOST: \"\" APPSMITH_MAIL_PORT: \"\" APPSMITH_MAIL_USERNAME: \"\" APPSMITH_MAIL_PASSWORD: \"\" APPSMITH_MAIL_FROM: \"\" APPSMITH_REPLY_TO: \"\" APPSMITH_MAIL_SMTP_AUTH: \"\" APPSMITH_MAIL_SMTP_TLS_ENABLED: \"\" APPSMITH_DISABLE_TELEMETRY: \"false\" APPSMITH_RECAPTCHA_SITE_KEY: \"\" APPSMITH_RECAPTCHA_SECRET_KEY: \"\" APPSMITH_RECAPTCHA_ENABLED: \"false\" APPSMITH_MONGODB_URI: \"mongodb://root:root@localhost/appsmith\" APPSMITH_REDIS_URL: \"redis://127.0.0.1:6379\" APPSMITH_ENCRYPTION_PASSWORD: \"rmEOM1TxTRxit\" APPSMITH_ENCRYPTION_SALT: \"Jhj1IyFcpKYUK\" APPSMITH_CUSTOM_DOMAIN: \"\" APPSMITH_MONGODB_USER: \"root\" APPSMITH_MONGODB_PASSWORD: \"root\"","title":"3. Change configurations for Helm context"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/migrate-k8s/#4-install-helm-chart","text":"Goal: Guide to install new Helm chart with old configuration Steps Add Helm repository. Update repository. Remove Imago resources. Install Appsmith Helm chart. Command Add Helm repository: helm repo add appsmith https://helm.appsmith.com Update repository: helm repo update Remove Imago resources: Imago is a auto-update tool for Kubernetes, this tool is set up in both context of old Kubernetes stack & Helm chart. Therefore, it may occur a conflict in deploying Helm chart with existing Imago service account & cronjob. Removing it from old Kubernetes context is necessary: kubectl delete sa,cronjob imago Install Appsmith Helm chart helm install appsmith appsmith/appsmith --values values.yaml * Verify * After installation, you can check running pods with below command and should see new pod which created by the Helm chart: kubectl get pods NAME READY STATUS RESTARTS AGE appsmith-0 1/1 Running 0 2m48s appsmith-editor-566f7b547f-lb9n8 1/1 Running 0 55m appsmith-internal-server-5c78944b64-fs7jm 1/1 Running 0 44m mongo-statefulset-0 1/1 Running 0 55m redis-statefulset-0 1/1 Running 0 55m","title":"4. Install Helm chart"},{"location":"Getting%20Started/setup/installation-guides/kubernetes/migrate-k8s/#5-import-database","text":"Goal: Importing data from archive file into new Helm chart Steps Create restore directory in new pod. Copy archive file from local to new pod. Run import_db command. Command Create restore directory in new pod kubectl exec appsmith-0 -- mkdir -p /appsmith-stacks/data/restore * Copy archive file from local to new pod: kubectl cp appsmith-data.archive appsmith-0:/appsmith-stacks/data/restore Run import_db command: kubectl exec -it appsmith-0 -- appsmithctl import_db Note that this will ask you Importing this DB will erase this data. Are you sure you want to proceed , where you can respond with y . It is safe in this situation since the new database in the new setup only contains initial data and should be safe to be overwritten. * Verify * Expected output in this step is Helm chart still works properly after importing and the data from old Kubernetes stack also comes up in the Helm chart","title":"5. Import database"},{"location":"Getting%20Started/setup/instance-configuration/","text":"Instance Configuration \u00b6 Configuring Docker Installations \u00b6 To configure a docker installation, simply open the folder of your installation and edit the stacks/configuration/docker.env file with the environment variables for the service. Remove # before the variables to ensure they are not commented // Example variable configuration format APPSMITH_GOOGLE_MAPS_API_KEY=YOUR_API_KEY After making any changes, remember to restart the docker containers for the changes to take affect. // To restart Appsmith using docker docker restart appsmith // To restart Appsmith using docker compose docker-compose restart appsmith Configuring Kubernetes Installations \u00b6 To configure a k8s installation, simply open the folder of your installation and edit the config-template/appsmith-configmap.yaml file. Remove # before the variables to ensure they are not commented // Example variable configuration format APPSMITH_GOOGLE_MAPS_API_KEY: \"YOUR_API_KEY\" After making any changes, remember to restart the pods for the changes to take affect // commands to restart k8s pods kubectl apply -f appsmith-configmap.yaml kubectl scale deployment appsmith-internal-server --replicas=0 kubectl scale deployment appsmith-internal-server --replicas=1 Configuring ECS Installations \u00b6 To configure a ECS installation, follow these steps: Navigate to the ECS console and select Task Definitions on the side bar. Click on the Task Definition used by your ECS instance, and hit Create new revision . On the Task Definition config page click on the Appsmith container definition to edit it. In the Environment Section , enter the environment configuration as key value pairs as show below. For sensitive information we recommend using AWS Secrets , please follow the steps detailed here to create a secret. Use the ARN of the secret as the Environment value and set the option to ValueFrom . Hit the Update button, and hit Create to make a new task definition. Navigate back to the ECS console and select you cluster. Click on your service to open the service details . Click on Update , and select the latest revision of the Task Definition. Hit Skip to review and then Update Service. A screen showing the status will show up. It may take a minute for the new ECS Task to start running. Available Configurations \u00b6 Email Custom Domain Signup Restrictions Google Maps Disable Intercom Single Sign-On (SSO) Frame Ancestors","title":"Instance Configuration"},{"location":"Getting%20Started/setup/instance-configuration/#instance-configuration","text":"","title":"Instance Configuration"},{"location":"Getting%20Started/setup/instance-configuration/#configuring-docker-installations","text":"To configure a docker installation, simply open the folder of your installation and edit the stacks/configuration/docker.env file with the environment variables for the service. Remove # before the variables to ensure they are not commented // Example variable configuration format APPSMITH_GOOGLE_MAPS_API_KEY=YOUR_API_KEY After making any changes, remember to restart the docker containers for the changes to take affect. // To restart Appsmith using docker docker restart appsmith // To restart Appsmith using docker compose docker-compose restart appsmith","title":"Configuring Docker Installations"},{"location":"Getting%20Started/setup/instance-configuration/#configuring-kubernetes-installations","text":"To configure a k8s installation, simply open the folder of your installation and edit the config-template/appsmith-configmap.yaml file. Remove # before the variables to ensure they are not commented // Example variable configuration format APPSMITH_GOOGLE_MAPS_API_KEY: \"YOUR_API_KEY\" After making any changes, remember to restart the pods for the changes to take affect // commands to restart k8s pods kubectl apply -f appsmith-configmap.yaml kubectl scale deployment appsmith-internal-server --replicas=0 kubectl scale deployment appsmith-internal-server --replicas=1","title":"Configuring Kubernetes Installations"},{"location":"Getting%20Started/setup/instance-configuration/#configuring-ecs-installations","text":"To configure a ECS installation, follow these steps: Navigate to the ECS console and select Task Definitions on the side bar. Click on the Task Definition used by your ECS instance, and hit Create new revision . On the Task Definition config page click on the Appsmith container definition to edit it. In the Environment Section , enter the environment configuration as key value pairs as show below. For sensitive information we recommend using AWS Secrets , please follow the steps detailed here to create a secret. Use the ARN of the secret as the Environment value and set the option to ValueFrom . Hit the Update button, and hit Create to make a new task definition. Navigate back to the ECS console and select you cluster. Click on your service to open the service details . Click on Update , and select the latest revision of the Task Definition. Hit Skip to review and then Update Service. A screen showing the status will show up. It may take a minute for the new ECS Task to start running.","title":"Configuring ECS Installations"},{"location":"Getting%20Started/setup/instance-configuration/#available-configurations","text":"Email Custom Domain Signup Restrictions Google Maps Disable Intercom Single Sign-On (SSO) Frame Ancestors","title":"Available Configurations"},{"location":"Getting%20Started/setup/instance-configuration/admin-settings/","text":"Super Admin \u00b6 Admin settings menu option is an alternative to updating env variables by editing the env file from the UI. This new UI makes it easy for the superuser to change instance configuration without moving away from the comfort of your instance UI. The admin settings page is a UI available only to superusers on all self-hosted instances. Using the Admin Settings UI \u00b6 Once you log in as a superuser, you can find the Admin settings option in the profile dropdown. You can update all the instance configurations listed here in the Admin settings. The Admin settings are segregated based on the area they affect. Pick the desired category from the left panel. you can update any setting and click save & restart (The UI will show a restart modal while the instance restarts.) Once it restarts, your instance will have new settings. Configuring a Superuser \u00b6 If you don\u2019t see the \u201cAdmin Settings\u201d option in the Profile dropdown, you\u2019re likely not the super admin of this instance. However, you can give superuser privileges to any user signed up in your instance. Docker Setup \u00b6 If you have a typical docker-compose.yml based setup, then you can run the following single shell command that will do this for you in a single go: email='<EMAIL OF USER TO MAKE SUPER ADMIN>'; sudo docker-compose exec appsmith mongo \"$(awk -F= '$1 == \"APPSMITH_MONGODB_URI\" {print $2}' stacks/configuration/docker.env | cut -d '?' -f1)\" --eval \"db.user.updateOne({email: '$email'}, {\\$addToSet: {policies: {permission: 'manage:instanceEnv', users: ['$email'], groups: []}}})\" Please change <EMAIL OF USER TO MAKE SUPER ADMIN> with the email of the user that should become the superuser. Other Instances \u00b6 For other instances, please connect to your database (the database that is in use with the Appsmith instance) and run the following query: db.user.updateOne({email: '<EMAIL OF SUPER ADMIN>'}, {$addToSet: {policies: {permission: 'manage:instanceEnv', users: ['<EMAIL OF SUPER ADMIN>'], groups: []}}}) After replacing <EMAIL OF SUPER ADMIN> with the email address of the user that should become a superuser. Please note that this email occurs twice in the above command. {% hint style=\"info\" %} This change doesn\u2019t need a restart of any server. Refreshing the browser page is enough. The \u201cAdmin Settings\u201d entry should now be available in the profile menu.","title":"Super Admin"},{"location":"Getting%20Started/setup/instance-configuration/admin-settings/#super-admin","text":"Admin settings menu option is an alternative to updating env variables by editing the env file from the UI. This new UI makes it easy for the superuser to change instance configuration without moving away from the comfort of your instance UI. The admin settings page is a UI available only to superusers on all self-hosted instances.","title":"Super Admin"},{"location":"Getting%20Started/setup/instance-configuration/admin-settings/#using-the-admin-settings-ui","text":"Once you log in as a superuser, you can find the Admin settings option in the profile dropdown. You can update all the instance configurations listed here in the Admin settings. The Admin settings are segregated based on the area they affect. Pick the desired category from the left panel. you can update any setting and click save & restart (The UI will show a restart modal while the instance restarts.) Once it restarts, your instance will have new settings.","title":"Using the Admin Settings UI"},{"location":"Getting%20Started/setup/instance-configuration/admin-settings/#configuring-a-superuser","text":"If you don\u2019t see the \u201cAdmin Settings\u201d option in the Profile dropdown, you\u2019re likely not the super admin of this instance. However, you can give superuser privileges to any user signed up in your instance.","title":"Configuring a Superuser"},{"location":"Getting%20Started/setup/instance-configuration/admin-settings/#docker-setup","text":"If you have a typical docker-compose.yml based setup, then you can run the following single shell command that will do this for you in a single go: email='<EMAIL OF USER TO MAKE SUPER ADMIN>'; sudo docker-compose exec appsmith mongo \"$(awk -F= '$1 == \"APPSMITH_MONGODB_URI\" {print $2}' stacks/configuration/docker.env | cut -d '?' -f1)\" --eval \"db.user.updateOne({email: '$email'}, {\\$addToSet: {policies: {permission: 'manage:instanceEnv', users: ['$email'], groups: []}}})\" Please change <EMAIL OF USER TO MAKE SUPER ADMIN> with the email of the user that should become the superuser.","title":"Docker Setup"},{"location":"Getting%20Started/setup/instance-configuration/admin-settings/#other-instances","text":"For other instances, please connect to your database (the database that is in use with the Appsmith instance) and run the following query: db.user.updateOne({email: '<EMAIL OF SUPER ADMIN>'}, {$addToSet: {policies: {permission: 'manage:instanceEnv', users: ['<EMAIL OF SUPER ADMIN>'], groups: []}}}) After replacing <EMAIL OF SUPER ADMIN> with the email address of the user that should become a superuser. Please note that this email occurs twice in the above command. {% hint style=\"info\" %} This change doesn\u2019t need a restart of any server. Refreshing the browser page is enough. The \u201cAdmin Settings\u201d entry should now be available in the profile menu.","title":"Other Instances"},{"location":"Getting%20Started/setup/instance-configuration/custom-mongodb-redis/","text":"Custom MongoDB & Redis \u00b6 Appsmith runs it's own instances of MongoDB database for storing all application data, and Redis for storing session information. It's easy to switch to externally running instances of these services, by just changing the relevant environment variables. Custom MongoDB \u00b6 To point to a custom MongoDB, update the env variable called APPSMITH_MONGODB_URI to point to your custom MongoDB server. For example, if you are using MongoDB Cloud , you can change this to something like the following: APPSMITH_MONGODB_URI=mongodb+srv://<username>:<password>@mongo.host.name/databasename The exact URI to be set here can be obtained from MongoDB Cloud's web interface. Note that to use a MongoDB database with Appsmith, replicaSet needs to be configured on the database. This can be done by connecting to the database as admin, and running rs.initiate() . If you are using MongoDB Cloud, this is always done for you. Custom Redis \u00b6 To use a custom Redis with Appsmith, please change the env variable APPSMITH_REDIS_URL . For example, APPSMITH_REDIS_URL=redis://hostname:6379 Applying Changes \u00b6 Please remember to restart the Appsmith instance to apply the changes.","title":"Custom MongoDB & Redis"},{"location":"Getting%20Started/setup/instance-configuration/custom-mongodb-redis/#custom-mongodb-redis","text":"Appsmith runs it's own instances of MongoDB database for storing all application data, and Redis for storing session information. It's easy to switch to externally running instances of these services, by just changing the relevant environment variables.","title":"Custom MongoDB &amp; Redis"},{"location":"Getting%20Started/setup/instance-configuration/custom-mongodb-redis/#custom-mongodb","text":"To point to a custom MongoDB, update the env variable called APPSMITH_MONGODB_URI to point to your custom MongoDB server. For example, if you are using MongoDB Cloud , you can change this to something like the following: APPSMITH_MONGODB_URI=mongodb+srv://<username>:<password>@mongo.host.name/databasename The exact URI to be set here can be obtained from MongoDB Cloud's web interface. Note that to use a MongoDB database with Appsmith, replicaSet needs to be configured on the database. This can be done by connecting to the database as admin, and running rs.initiate() . If you are using MongoDB Cloud, this is always done for you.","title":"Custom MongoDB"},{"location":"Getting%20Started/setup/instance-configuration/custom-mongodb-redis/#custom-redis","text":"To use a custom Redis with Appsmith, please change the env variable APPSMITH_REDIS_URL . For example, APPSMITH_REDIS_URL=redis://hostname:6379","title":"Custom Redis"},{"location":"Getting%20Started/setup/instance-configuration/custom-mongodb-redis/#applying-changes","text":"Please remember to restart the Appsmith instance to apply the changes.","title":"Applying Changes"},{"location":"Getting%20Started/setup/instance-configuration/disable-intercom/","text":"Disable Intercom \u00b6 To disable Intercom on your instance, please set the key APPSMITH_INTERCOM_APP_ID in your docker.env file to an empty string and restart your instance. Example: APPSMITH_DISABLE_INTERCOM=true","title":"Disable Intercom"},{"location":"Getting%20Started/setup/instance-configuration/disable-intercom/#disable-intercom","text":"To disable Intercom on your instance, please set the key APPSMITH_INTERCOM_APP_ID in your docker.env file to an empty string and restart your instance. Example: APPSMITH_DISABLE_INTERCOM=true","title":"Disable Intercom"},{"location":"Getting%20Started/setup/instance-configuration/disable-user-signup/","text":"Signup Restriction \u00b6 This document describes ways to restrict users from signing up on your self-hosted Appsmith instance. This configuration is done by editing the Instance configuration . Disable Sign-up \u00b6 The environment variable APPSMITH_SIGNUP_DISABLED should be set to true to disable signing up of new users. When set, the following facts hold: New, uninvited users cannot signup using the signup form or the OAuth buttons. Both modes of signing up are disallowed. New, invited users can still signup using either the form or the OAuth buttons. {% hint style=\"success\" %} The signup page will continue to show up but will throw an error when a user tries to sign up. This environment variable's value does not affect the login behavior of existing users. {% hint style=\"warning\" %} The user email IDs entered on the form login or signup is not verified by email or otherwise. This can lead to a breach while giving or receiving access to applications, resetting your password, using the email ID in any of your applications, etc. Make sure the user email IDs used exist to avoid issues like these. Email domains white-list \u00b6 The environment variable APPSMITH_SIGNUP_ALLOWED_DOMAINS can be used to restrict signups to emails belonging to only a specific set of domains. This field takes a comma-separated set of values. Setting APPSMITH_SIGNUP_ALLOWED_DOMAINS=appsmith.com will allow homer@appsmith.com to sign up, but not bart@gmail.com . Setting APPSMITH_SIGNUP_ALLOWED_DOMAINS=appsmith.com,gmail.com will allow both homer@appsmith.com and bart@gmail.com to sign up, but not lisa@outlook.com . When this environment variable is set to one or more domains, the following facts hold: New, uninvited users cannot signup using the signup form or the OAuth buttons unless the email they use has a domain that's present in this environment variable. New, but invited users can still signup using the signup form or the OAuth buttons, even if their email ** does not ** have a domain in the environment variable. {% hint style=\"success\" %} This environment variable's value does not affect the login behavior of existing users {% hint style=\"danger\" %} Accounts created via form signup are not validated via an email Administrator emails \u00b6 The environment variable APPSMITH_ADMIN_EMAILS can be set to a comma-separated list of email addresses, that will always be allowed to sign up, irrespective of the above two environment variables. # Example docker configuration APPSMITH_ADMIN_EMAILS=homer@appsmith.com,marge@yahoo.com These two email addresses will be able to sign up on the Appsmith instance irrespective of the APPSMITH_SIGNUP_ALLOWED_DOMAINS and APPSMITH_SIGNUP_DISABLED configurations","title":"Signup Restriction"},{"location":"Getting%20Started/setup/instance-configuration/disable-user-signup/#signup-restriction","text":"This document describes ways to restrict users from signing up on your self-hosted Appsmith instance. This configuration is done by editing the Instance configuration .","title":"Signup Restriction"},{"location":"Getting%20Started/setup/instance-configuration/disable-user-signup/#disable-sign-up","text":"The environment variable APPSMITH_SIGNUP_DISABLED should be set to true to disable signing up of new users. When set, the following facts hold: New, uninvited users cannot signup using the signup form or the OAuth buttons. Both modes of signing up are disallowed. New, invited users can still signup using either the form or the OAuth buttons. {% hint style=\"success\" %} The signup page will continue to show up but will throw an error when a user tries to sign up. This environment variable's value does not affect the login behavior of existing users. {% hint style=\"warning\" %} The user email IDs entered on the form login or signup is not verified by email or otherwise. This can lead to a breach while giving or receiving access to applications, resetting your password, using the email ID in any of your applications, etc. Make sure the user email IDs used exist to avoid issues like these.","title":"Disable Sign-up"},{"location":"Getting%20Started/setup/instance-configuration/disable-user-signup/#email-domains-white-list","text":"The environment variable APPSMITH_SIGNUP_ALLOWED_DOMAINS can be used to restrict signups to emails belonging to only a specific set of domains. This field takes a comma-separated set of values. Setting APPSMITH_SIGNUP_ALLOWED_DOMAINS=appsmith.com will allow homer@appsmith.com to sign up, but not bart@gmail.com . Setting APPSMITH_SIGNUP_ALLOWED_DOMAINS=appsmith.com,gmail.com will allow both homer@appsmith.com and bart@gmail.com to sign up, but not lisa@outlook.com . When this environment variable is set to one or more domains, the following facts hold: New, uninvited users cannot signup using the signup form or the OAuth buttons unless the email they use has a domain that's present in this environment variable. New, but invited users can still signup using the signup form or the OAuth buttons, even if their email ** does not ** have a domain in the environment variable. {% hint style=\"success\" %} This environment variable's value does not affect the login behavior of existing users {% hint style=\"danger\" %} Accounts created via form signup are not validated via an email","title":"Email domains white-list"},{"location":"Getting%20Started/setup/instance-configuration/disable-user-signup/#administrator-emails","text":"The environment variable APPSMITH_ADMIN_EMAILS can be set to a comma-separated list of email addresses, that will always be allowed to sign up, irrespective of the above two environment variables. # Example docker configuration APPSMITH_ADMIN_EMAILS=homer@appsmith.com,marge@yahoo.com These two email addresses will be able to sign up on the Appsmith instance irrespective of the APPSMITH_SIGNUP_ALLOWED_DOMAINS and APPSMITH_SIGNUP_DISABLED configurations","title":"Administrator emails"},{"location":"Getting%20Started/setup/instance-configuration/frame-ancestors/","text":"Frame Ancestors \u00b6 Starting with Appsmith v1.7.10 , you can control where your apps can be loaded in a frame. Why should I control this? \u00b6 Allowing your Appsmith apps to be embedded on any website makes them susceptible to clickjacking attacks. Controlling this is one of the simplest ways to avoid these attacks. By default, starting Appsmith v1.7.10 , apps cannot be loaded in a frame/iframe on domains other than the app's domain. That is, if your Appsmith is available at http://mydomain.com , then only pages on http://mydomain.com will be able to embed apps. To change/customize this, we've introduced the APPSMITH_ALLOWED_FRAME_ANCESTORS environment variable. To allow another domain like http://trusted-other.com to also embed apps from your Appsmith, use: APPSMITH_ALLOWED_FRAME_ANCESTORS=\"'self' http://trusted-other.com\" Or, to allow all subdomains on mycompany.com , use: APPSMITH_ALLOWED_FRAME_ANCESTORS=\"'self' http://*.mycompany.com\" You can add multiple entries by separating them with spaces. For example: APPSMITH_ALLOWED_FRAME_ANCESTORS=\"'self' http://trusted-other.com http://*.mycompany.com\" Under the covers, this feature uses a Content-Security-Policy header with the frame-ancestors directive. You can read more on the same here .","title":"Frame Ancestors"},{"location":"Getting%20Started/setup/instance-configuration/frame-ancestors/#frame-ancestors","text":"Starting with Appsmith v1.7.10 , you can control where your apps can be loaded in a frame.","title":"Frame Ancestors"},{"location":"Getting%20Started/setup/instance-configuration/frame-ancestors/#why-should-i-control-this","text":"Allowing your Appsmith apps to be embedded on any website makes them susceptible to clickjacking attacks. Controlling this is one of the simplest ways to avoid these attacks. By default, starting Appsmith v1.7.10 , apps cannot be loaded in a frame/iframe on domains other than the app's domain. That is, if your Appsmith is available at http://mydomain.com , then only pages on http://mydomain.com will be able to embed apps. To change/customize this, we've introduced the APPSMITH_ALLOWED_FRAME_ANCESTORS environment variable. To allow another domain like http://trusted-other.com to also embed apps from your Appsmith, use: APPSMITH_ALLOWED_FRAME_ANCESTORS=\"'self' http://trusted-other.com\" Or, to allow all subdomains on mycompany.com , use: APPSMITH_ALLOWED_FRAME_ANCESTORS=\"'self' http://*.mycompany.com\" You can add multiple entries by separating them with spaces. For example: APPSMITH_ALLOWED_FRAME_ANCESTORS=\"'self' http://trusted-other.com http://*.mycompany.com\" Under the covers, this feature uses a Content-Security-Policy header with the frame-ancestors directive. You can read more on the same here .","title":"Why should I control this?&#x20;"},{"location":"Getting%20Started/setup/instance-configuration/google-maps/","text":"Google Maps \u00b6 To enable the maps widget, login to your google cloud console 1. Navigate to the credentials section under APIs & Services 2. Create a new API Key Credential 3. Restrict the API Key 4. Enable the following APIs Maps Embed API Maps JavaScript API Places API Geolocation API 5. Update the instance configuration with the below fields # Example Docker Configuration # ******** Google Maps *********** APPSMITH_GOOGLE_MAPS_API_KEY=YOUR_API_KEY # ******************************** 6. Restart the Appsmith Instance {% hint style=\"success\" %} The maps widget should now be enabled on your installation. Read more about Obtaining a google API key","title":"Google Maps"},{"location":"Getting%20Started/setup/instance-configuration/google-maps/#google-maps","text":"To enable the maps widget, login to your google cloud console 1. Navigate to the credentials section under APIs & Services 2. Create a new API Key Credential 3. Restrict the API Key 4. Enable the following APIs Maps Embed API Maps JavaScript API Places API Geolocation API 5. Update the instance configuration with the below fields # Example Docker Configuration # ******** Google Maps *********** APPSMITH_GOOGLE_MAPS_API_KEY=YOUR_API_KEY # ******************************** 6. Restart the Appsmith Instance {% hint style=\"success\" %} The maps widget should now be enabled on your installation. Read more about Obtaining a google API key","title":"Google Maps"},{"location":"Getting%20Started/setup/instance-configuration/authentication/","text":"Authentication \u00b6 This section covers different authentication methods available on Appsmith. The default form login allows users to sign in using their email address and password. Besides, you can authorize users into Appsmith apps using Google OAuth , GitHub OAuth and popular SSO authentication protocols like SAML (enterprise version) and OpenID Connect (enterprise version). Single Sign-On (SSO) is a session and user authentication service that permits users to use one set of login credentials. For example, you can use a single ID(email) to log in to any related or independent software applications. SSO lets you get your users quickly and securely into your apps, using an authentication system they are already using and trust. You can configure SSO in Appsmith to use custom authentication. {% content-ref url=\"google-login.md\" %} google-login.md {% content-ref url=\"github-login.md\" %} github-login.md {% content-ref url=\"security-assertion-markup-language-saml/\" %} security-assertion-markup-language-saml {% content-ref url=\"openid-connect-oidc/\" %} openid-connect-oidc","title":"Authentication"},{"location":"Getting%20Started/setup/instance-configuration/authentication/#authentication","text":"This section covers different authentication methods available on Appsmith. The default form login allows users to sign in using their email address and password. Besides, you can authorize users into Appsmith apps using Google OAuth , GitHub OAuth and popular SSO authentication protocols like SAML (enterprise version) and OpenID Connect (enterprise version). Single Sign-On (SSO) is a session and user authentication service that permits users to use one set of login credentials. For example, you can use a single ID(email) to log in to any related or independent software applications. SSO lets you get your users quickly and securely into your apps, using an authentication system they are already using and trust. You can configure SSO in Appsmith to use custom authentication. {% content-ref url=\"google-login.md\" %} google-login.md {% content-ref url=\"github-login.md\" %} github-login.md {% content-ref url=\"security-assertion-markup-language-saml/\" %} security-assertion-markup-language-saml {% content-ref url=\"openid-connect-oidc/\" %} openid-connect-oidc","title":"Authentication"},{"location":"Getting%20Started/setup/instance-configuration/authentication/github-login/","text":"GitHub OAuth \u00b6 GitHub allows the integration of third-party applications using your GitHub Identity. Follow the below guide to configure GitHub OAuth. To enable GitHub Sign in, login to your GitHub Account 1. Navigate to the Organizations section of your profile and the settings of the organization under which you want to create an OAuth App 2. Navigate to the OAuth Apps section of the organization settings page 3. Create a new OAuth App 4. Configure the OAuth Credentials for a web application Homepage URL: The domain on which you are hosting Appsmith with https (ex: https://app.appsmith.com) Authorization Callback URL: Append /login/oauth2/code/github to the Homepage URL (ex: https://app.appsmith.com/login/oauth2/code/github) 5. Update the instance configuration with the below fields # Example Docker Configuration # ********* Github OAUth ********** APPSMITH_OAUTH2_GITHUB_CLIENT_ID=YOUR_GITHUB_CLIENT_ID APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET=YOUR_GITHUB_CLIENT_SECRET 18,61 28% # ****************************** {% hint style=\"warning\" %} The Client ID and Client Secret entered are not verified by any means. Please test it out manually before disabling the Form login authentication method. If Form login is disabled before testing the GitHub authentication config setup, it may lead to the user getting stuck on the login screen if the GitHub config is invalid. To fix this, you\u2019ll have to update the ENV variables manually by adding a valid Client ID and Client Secret or enabling the form login. You won\u2019t be able to do this via the Admin settings page since you won\u2019t be logged in anymore. 6. Restart the Appsmith instance {% hint style=\"success\" %} GitHub Login should now be enabled for your Appsmith installation. If you are running Appsmith behind an ELB / Proxy, please configure Nginx following this guide","title":"GitHub OAuth"},{"location":"Getting%20Started/setup/instance-configuration/authentication/github-login/#github-oauth","text":"GitHub allows the integration of third-party applications using your GitHub Identity. Follow the below guide to configure GitHub OAuth. To enable GitHub Sign in, login to your GitHub Account 1. Navigate to the Organizations section of your profile and the settings of the organization under which you want to create an OAuth App 2. Navigate to the OAuth Apps section of the organization settings page 3. Create a new OAuth App 4. Configure the OAuth Credentials for a web application Homepage URL: The domain on which you are hosting Appsmith with https (ex: https://app.appsmith.com) Authorization Callback URL: Append /login/oauth2/code/github to the Homepage URL (ex: https://app.appsmith.com/login/oauth2/code/github) 5. Update the instance configuration with the below fields # Example Docker Configuration # ********* Github OAUth ********** APPSMITH_OAUTH2_GITHUB_CLIENT_ID=YOUR_GITHUB_CLIENT_ID APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET=YOUR_GITHUB_CLIENT_SECRET 18,61 28% # ****************************** {% hint style=\"warning\" %} The Client ID and Client Secret entered are not verified by any means. Please test it out manually before disabling the Form login authentication method. If Form login is disabled before testing the GitHub authentication config setup, it may lead to the user getting stuck on the login screen if the GitHub config is invalid. To fix this, you\u2019ll have to update the ENV variables manually by adding a valid Client ID and Client Secret or enabling the form login. You won\u2019t be able to do this via the Admin settings page since you won\u2019t be logged in anymore. 6. Restart the Appsmith instance {% hint style=\"success\" %} GitHub Login should now be enabled for your Appsmith installation. If you are running Appsmith behind an ELB / Proxy, please configure Nginx following this guide","title":"GitHub OAuth"},{"location":"Getting%20Started/setup/instance-configuration/authentication/google-login/","text":"Google OAuth \u00b6 Google OAuth is one of the most widely used custom authentication integrations. Appsmith allows you to integrate with Google for authenticating users to your apps. To enable Google Sign in, login to your google cloud console 1. Navigate to the OAuth consent section under APIs & Services 2. Configure the consent screen with the domain on which you want to host Appsmith 3. Navigate to the credentials section and create new OAuth Credentials 4. Configure the OAuth Credentials for a web application Javascript Origins: The domain on which you are hosting Appsmith with https (ex: https://app.appsmith.com) Redirect URIs: Append /login/oauth2/code/google to your Javascript origins (ex: https://app.appsmith.com/login/oauth2/code/google) 5. Update the instance configuration with the following fields # Example docker configuration # ******** Google OAuth ******** APPSMITH_OAUTH2_GOOGLE_CLIENT_ID=YOUR_CLIENT_ID APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET=YOUR_CLIENT_SECRET APPSMITH_SIGNUP_ALLOWED_DOMAINS=exampledomain.com # ****************************** Configure the APPSMITH_OAUTH2_GOOGLE_CLIENT_ID and APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET fields with the client ID and client secret generated in the step above Configre APPSMITH_SIGNUP_ALLOWED_DOMAINS with a second-level domain name (ex: abc.com) , to only allow users with an email address from that domain name to log in (ex: john@abc.com) Note : you can provide several domain names using a comma-separated list {% hint style=\"warning\" %} The Client ID and Client Secret entered are not verified by any means. Please test it out manually before disabling the Form login authentication method. If Form login is disabled before testing the Google authentication config setup, it may lead to the user getting stuck on the login screen if the Google config is incorrect. You\u2019ll have to update the env variables manually to fix this, as you cannot update it via the Admin settings page since you won\u2019t be logged in anymore 6. Restart the Appsmith instance {% hint style=\"success\" %} Google Login should now be enabled for your Appsmith installation. If you are running appsmith behind an ELB / Proxy, please configure Nginx following this guide","title":"Google OAuth"},{"location":"Getting%20Started/setup/instance-configuration/authentication/google-login/#google-oauth","text":"Google OAuth is one of the most widely used custom authentication integrations. Appsmith allows you to integrate with Google for authenticating users to your apps. To enable Google Sign in, login to your google cloud console 1. Navigate to the OAuth consent section under APIs & Services 2. Configure the consent screen with the domain on which you want to host Appsmith 3. Navigate to the credentials section and create new OAuth Credentials 4. Configure the OAuth Credentials for a web application Javascript Origins: The domain on which you are hosting Appsmith with https (ex: https://app.appsmith.com) Redirect URIs: Append /login/oauth2/code/google to your Javascript origins (ex: https://app.appsmith.com/login/oauth2/code/google) 5. Update the instance configuration with the following fields # Example docker configuration # ******** Google OAuth ******** APPSMITH_OAUTH2_GOOGLE_CLIENT_ID=YOUR_CLIENT_ID APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET=YOUR_CLIENT_SECRET APPSMITH_SIGNUP_ALLOWED_DOMAINS=exampledomain.com # ****************************** Configure the APPSMITH_OAUTH2_GOOGLE_CLIENT_ID and APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET fields with the client ID and client secret generated in the step above Configre APPSMITH_SIGNUP_ALLOWED_DOMAINS with a second-level domain name (ex: abc.com) , to only allow users with an email address from that domain name to log in (ex: john@abc.com) Note : you can provide several domain names using a comma-separated list {% hint style=\"warning\" %} The Client ID and Client Secret entered are not verified by any means. Please test it out manually before disabling the Form login authentication method. If Form login is disabled before testing the Google authentication config setup, it may lead to the user getting stuck on the login screen if the Google config is incorrect. You\u2019ll have to update the env variables manually to fix this, as you cannot update it via the Admin settings page since you won\u2019t be logged in anymore 6. Restart the Appsmith instance {% hint style=\"success\" %} Google Login should now be enabled for your Appsmith installation. If you are running appsmith behind an ELB / Proxy, please configure Nginx following this guide","title":"Google OAuth"},{"location":"Getting%20Started/setup/instance-configuration/authentication/json-web-tokens-jwt/","text":"JSON Web Tokens (JWT) \u00b6 JSON Web Token(JWT) is an open standard ( RFC 7519 ) for securely transmitting information between parties in the form of a JSON object. {% hint style=\"info\" %} JSON Web Tokens (JWT) can be accessed as part of OpenID Connect (OIDC), available only in the enterprise edition for self-hosted instances . When to Use JSON Web Tokens? \u00b6 Following are some common scenarios where JSON Web Tokens are used: {% hint style=\"info\" %} If you are aware of JSON Web Tokens, move directly to How to Use JSON Web Tokens in Appsmith? . Authentication \u00b6 For an authenticated user, whenever a user requests to access resources or services, or routes, the application passes the information in the form of an access token that follows a JWT format. Single Sign-On (SSO) commonly uses JWTs to communicate with different systems residing on similar or other domains. Information Exchange \u00b6 JSON Web Tokens are a secure way of transmitting information between different applications. JWTs can also be signed. Tokens can have a timestamp associated with them, and once the timestamp is expired, you can block the information exchange for the expired token. You can also verify that the content of the token has not been tampered with. For example, using public/private keypairs, you can ensure that the sender is an authorized sender. This provides an additional layer of security for data or information exchange. How Does JSON Web Token Work? \u00b6 For instance, you are authenticating a user. Your SSO Provider shares a JSON Web Token(JWT) on the successful authentication. {% hint style=\"info\" %} As a best practice, you should only store the token for the time it is needed. Whenever a user requests access to a resource, the user agent should send the JWT, usually in the Authorization header using Bearer. Authorization: Bearer <followed by the token value> The server\u2019s validation mechanism will verify the token in the Authorization header and grant access to the resources or allow the user to perform an action. {% hint style=\"info\" %} Sending a token as a part of the Authorization header eliminates the Cross-Origin Resource Sharing(CORS) usually faced while sharing through cookies. JSON Web Token Structure \u00b6 A JSON Web Token has three main parts separated with a dot(.) - Header, Payload, and Signature. For example, your header is HEADER1, Payload is PAYLOAD1, and Signature is SIGNATURE1, then the JWT structure will be: HEADER1 . PAYLOAD1 . SIGNATURE1 Header \u00b6 A JWT header stores information about the type of token that is JWT and the algorithm used for signing, like SHA256 or RSA, etc. So, the header is represented as: { \u201calg\u201d:\u201dHS256\u201d, \u201ctyp\u201d:\u201dJWT\u201d } Here alg stands for the algorithm used for signing, and typ stands for the token type. The JSON is then encoded as a Base64Url to form the first part of the JSON Web Token, the header. Payload \u00b6 The second part of the token, a payload, comprises claims. Claims are information about the entity usually associated with the user and the metadata. There are three types of claims - public, private, and reserved. Public \u00b6 If you create public claims , you must define them in IANA JSON Web Token Registry or define them as a URI with a collision-resistant namespace. {% hint style=\"info\" %} The public claims should be validated and agreed upon by Issuer and Consumer. Private \u00b6 The parties communicating with each other might want to have some custom claims identified. You can define these custom claims under private claims . These claims are neither registered nor public. {% hint style=\"info\" %} The public/private claims should not have similar names as reserved claims as it will break the interoperability between the systems exchanging information. Registered \u00b6 A set of pre-defined claims that are not mandatory but are deemed recommended are defined as registered claims . Such claims provide useful information like expiration time, issuer details, the intended audience, etc. {% hint style=\"info\" %} The claim names are only three characters long to ensure compact JWT. A sample payload could be: { \u201csub\u201d: \u201cSSOProvider\u201d, \u201cemail_verified\u201d: true, \u201cupdated_at\u201d: 1646310160264 } The payload is then encoded to form a Base64Url and forms the second part of the token. Signature \u00b6 To create a signature, you have to encode the header, payload, a secret, use the algorithm defined in the header and sign it. For example, you are using HMAC SHA-256(HS256) algorithm. Then the generated signature is as follows: \u200b\u200bHMACSHA256( base64UrlEncode(header) + \".\" + base64UrlEncode(payload), secret) You can use the signature to validate the sender's authenticity, check if the message is tampered with or not, and can sign with a private key. The signature is encoded as Base64Url and appended to form a complete JSON Web Token. For example, an encoded JWT with header, payload, and signature could be as follows: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9**.**eyJzdWIiOiJTU09Qcm92aWRlciIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJ1cGRhdGVkX2F0IjoxNjQ2MzEwMTYwMjY0fQ**.**qUwYZqYbtfCjhODEEF9M6B3JFN4WtUSg37MixYVN1h0 You can see that the three parts of the JWT are separated by a dot(.). {% hint style=\"info\" %} You can use the JWT Debugger to encode, decode, or verify the generated JWTs. Why use JSON Web Tokens? \u00b6 The key benefits of using a JWT are that it is more compact and thus smaller in size. It is secured and can use a shared secret between an issuer and a consumer. It uses JSON format; almost every programming language has a JSON parser, so you don\u2019t have to reinvent the wheel. How to Use JSON Web Tokens in Appsmith? \u00b6 Let\u2019s take an example. You have integrated your Single Sign On(SSO) provider with Appsmith using OpenID Connect . You are using Appsmith to log in and your SSO provider to authenticate the request. Let\u2019s take a closer look at how this interaction happens from Appsmith. In the above diagram, you can see that: A user requests for login using Appsmith. Behind the scenes, Appsmith is integrated with the SSO provider. SSO Provider authorizes the request. The SSO provider generates a token for authenticated users and shares them with Appsmith. Appsmith has the token accessible on the platform. You can pass it on in your APIs to provide access to the resources or perform desired operations. Types of Token \u00b6 Appsmith provides two types of JSON Web Tokens that your application can integrate with: ID Token and Access Token. ID Token \u00b6 An ID token is a signed assurance of a user\u2019s identity and contains basic information like the name, picture, email address, etc. When a user logs in successfully, an ID token is shared as per the Open ID Connect (OIDC) specification. How to read ID token on Appsmith? Once the SSO provider successfully authenticates a user, the ID token is available on the Appsmith platform. {% hint style=\"info\" %} Appsmith exposes the idToken parameter on the client-side. It thus is available to be embedded in any operation that you would like to perform either in JavaScript functions, APIs, or queries. You can read the value of an id token in your APIs/Queries by using a mustache sign {{}}. {{appsmith.user.idToken}} Access Token \u00b6 An access token is an object that stores information about an entity in the form of claims. When you want to use token-based authentication, an access token comes in handy. Access tokens are self-contained. You don\u2019t have to call a server to validate a token. How to read Access token on Appsmith? After successful user authentication through an SSO Provider, you can use the access tokens on Appsmith. The access token is available as an environment variable. {% hint style=\"info\" %} The environment variable is not accessible on the client-side as per security norms. The environment variable APPSMITH_USER_OAUTH2_ACCESS_TOKEN stores access token. You can read the value of the access token by using it in between the angular braces <<>>. <<APPSMITH_USER_OAUTH2_ACCESS_TOKEN >> With the JSON Web Tokens available on Appsmith, you can securely exchange data or information between Appsmith and your apps or APIs.","title":"JSON Web Tokens (JWT)"},{"location":"Getting%20Started/setup/instance-configuration/authentication/json-web-tokens-jwt/#json-web-tokens-jwt","text":"JSON Web Token(JWT) is an open standard ( RFC 7519 ) for securely transmitting information between parties in the form of a JSON object. {% hint style=\"info\" %} JSON Web Tokens (JWT) can be accessed as part of OpenID Connect (OIDC), available only in the enterprise edition for self-hosted instances .","title":"JSON Web Tokens (JWT)"},{"location":"Getting%20Started/setup/instance-configuration/authentication/json-web-tokens-jwt/#when-to-use-json-web-tokens","text":"Following are some common scenarios where JSON Web Tokens are used: {% hint style=\"info\" %} If you are aware of JSON Web Tokens, move directly to How to Use JSON Web Tokens in Appsmith? .","title":"When to Use JSON Web Tokens?"},{"location":"Getting%20Started/setup/instance-configuration/authentication/json-web-tokens-jwt/#authentication","text":"For an authenticated user, whenever a user requests to access resources or services, or routes, the application passes the information in the form of an access token that follows a JWT format. Single Sign-On (SSO) commonly uses JWTs to communicate with different systems residing on similar or other domains.","title":"Authentication"},{"location":"Getting%20Started/setup/instance-configuration/authentication/json-web-tokens-jwt/#information-exchange","text":"JSON Web Tokens are a secure way of transmitting information between different applications. JWTs can also be signed. Tokens can have a timestamp associated with them, and once the timestamp is expired, you can block the information exchange for the expired token. You can also verify that the content of the token has not been tampered with. For example, using public/private keypairs, you can ensure that the sender is an authorized sender. This provides an additional layer of security for data or information exchange.","title":"Information Exchange"},{"location":"Getting%20Started/setup/instance-configuration/authentication/json-web-tokens-jwt/#how-does-json-web-token-work","text":"For instance, you are authenticating a user. Your SSO Provider shares a JSON Web Token(JWT) on the successful authentication. {% hint style=\"info\" %} As a best practice, you should only store the token for the time it is needed. Whenever a user requests access to a resource, the user agent should send the JWT, usually in the Authorization header using Bearer. Authorization: Bearer <followed by the token value> The server\u2019s validation mechanism will verify the token in the Authorization header and grant access to the resources or allow the user to perform an action. {% hint style=\"info\" %} Sending a token as a part of the Authorization header eliminates the Cross-Origin Resource Sharing(CORS) usually faced while sharing through cookies.","title":"How Does JSON Web Token Work?"},{"location":"Getting%20Started/setup/instance-configuration/authentication/json-web-tokens-jwt/#json-web-token-structure","text":"A JSON Web Token has three main parts separated with a dot(.) - Header, Payload, and Signature. For example, your header is HEADER1, Payload is PAYLOAD1, and Signature is SIGNATURE1, then the JWT structure will be: HEADER1 . PAYLOAD1 . SIGNATURE1","title":"JSON Web Token Structure"},{"location":"Getting%20Started/setup/instance-configuration/authentication/json-web-tokens-jwt/#header","text":"A JWT header stores information about the type of token that is JWT and the algorithm used for signing, like SHA256 or RSA, etc. So, the header is represented as: { \u201calg\u201d:\u201dHS256\u201d, \u201ctyp\u201d:\u201dJWT\u201d } Here alg stands for the algorithm used for signing, and typ stands for the token type. The JSON is then encoded as a Base64Url to form the first part of the JSON Web Token, the header.","title":"Header"},{"location":"Getting%20Started/setup/instance-configuration/authentication/json-web-tokens-jwt/#payload","text":"The second part of the token, a payload, comprises claims. Claims are information about the entity usually associated with the user and the metadata. There are three types of claims - public, private, and reserved.","title":"Payload"},{"location":"Getting%20Started/setup/instance-configuration/authentication/json-web-tokens-jwt/#public","text":"If you create public claims , you must define them in IANA JSON Web Token Registry or define them as a URI with a collision-resistant namespace. {% hint style=\"info\" %} The public claims should be validated and agreed upon by Issuer and Consumer.","title":"Public"},{"location":"Getting%20Started/setup/instance-configuration/authentication/json-web-tokens-jwt/#private","text":"The parties communicating with each other might want to have some custom claims identified. You can define these custom claims under private claims . These claims are neither registered nor public. {% hint style=\"info\" %} The public/private claims should not have similar names as reserved claims as it will break the interoperability between the systems exchanging information.","title":"Private"},{"location":"Getting%20Started/setup/instance-configuration/authentication/json-web-tokens-jwt/#registered","text":"A set of pre-defined claims that are not mandatory but are deemed recommended are defined as registered claims . Such claims provide useful information like expiration time, issuer details, the intended audience, etc. {% hint style=\"info\" %} The claim names are only three characters long to ensure compact JWT. A sample payload could be: { \u201csub\u201d: \u201cSSOProvider\u201d, \u201cemail_verified\u201d: true, \u201cupdated_at\u201d: 1646310160264 } The payload is then encoded to form a Base64Url and forms the second part of the token.","title":"Registered"},{"location":"Getting%20Started/setup/instance-configuration/authentication/json-web-tokens-jwt/#signature","text":"To create a signature, you have to encode the header, payload, a secret, use the algorithm defined in the header and sign it. For example, you are using HMAC SHA-256(HS256) algorithm. Then the generated signature is as follows: \u200b\u200bHMACSHA256( base64UrlEncode(header) + \".\" + base64UrlEncode(payload), secret) You can use the signature to validate the sender's authenticity, check if the message is tampered with or not, and can sign with a private key. The signature is encoded as Base64Url and appended to form a complete JSON Web Token. For example, an encoded JWT with header, payload, and signature could be as follows: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9**.**eyJzdWIiOiJTU09Qcm92aWRlciIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJ1cGRhdGVkX2F0IjoxNjQ2MzEwMTYwMjY0fQ**.**qUwYZqYbtfCjhODEEF9M6B3JFN4WtUSg37MixYVN1h0 You can see that the three parts of the JWT are separated by a dot(.). {% hint style=\"info\" %} You can use the JWT Debugger to encode, decode, or verify the generated JWTs.","title":"Signature"},{"location":"Getting%20Started/setup/instance-configuration/authentication/json-web-tokens-jwt/#why-use-json-web-tokens","text":"The key benefits of using a JWT are that it is more compact and thus smaller in size. It is secured and can use a shared secret between an issuer and a consumer. It uses JSON format; almost every programming language has a JSON parser, so you don\u2019t have to reinvent the wheel.","title":"Why use JSON Web Tokens?"},{"location":"Getting%20Started/setup/instance-configuration/authentication/json-web-tokens-jwt/#how-to-use-json-web-tokens-in-appsmith","text":"Let\u2019s take an example. You have integrated your Single Sign On(SSO) provider with Appsmith using OpenID Connect . You are using Appsmith to log in and your SSO provider to authenticate the request. Let\u2019s take a closer look at how this interaction happens from Appsmith. In the above diagram, you can see that: A user requests for login using Appsmith. Behind the scenes, Appsmith is integrated with the SSO provider. SSO Provider authorizes the request. The SSO provider generates a token for authenticated users and shares them with Appsmith. Appsmith has the token accessible on the platform. You can pass it on in your APIs to provide access to the resources or perform desired operations.","title":"How to Use JSON Web Tokens in Appsmith?"},{"location":"Getting%20Started/setup/instance-configuration/authentication/json-web-tokens-jwt/#types-of-token","text":"Appsmith provides two types of JSON Web Tokens that your application can integrate with: ID Token and Access Token.","title":"Types of Token"},{"location":"Getting%20Started/setup/instance-configuration/authentication/json-web-tokens-jwt/#id-token","text":"An ID token is a signed assurance of a user\u2019s identity and contains basic information like the name, picture, email address, etc. When a user logs in successfully, an ID token is shared as per the Open ID Connect (OIDC) specification. How to read ID token on Appsmith? Once the SSO provider successfully authenticates a user, the ID token is available on the Appsmith platform. {% hint style=\"info\" %} Appsmith exposes the idToken parameter on the client-side. It thus is available to be embedded in any operation that you would like to perform either in JavaScript functions, APIs, or queries. You can read the value of an id token in your APIs/Queries by using a mustache sign {{}}. {{appsmith.user.idToken}}","title":"ID Token"},{"location":"Getting%20Started/setup/instance-configuration/authentication/json-web-tokens-jwt/#access-token","text":"An access token is an object that stores information about an entity in the form of claims. When you want to use token-based authentication, an access token comes in handy. Access tokens are self-contained. You don\u2019t have to call a server to validate a token. How to read Access token on Appsmith? After successful user authentication through an SSO Provider, you can use the access tokens on Appsmith. The access token is available as an environment variable. {% hint style=\"info\" %} The environment variable is not accessible on the client-side as per security norms. The environment variable APPSMITH_USER_OAUTH2_ACCESS_TOKEN stores access token. You can read the value of the access token by using it in between the angular braces <<>>. <<APPSMITH_USER_OAUTH2_ACCESS_TOKEN >> With the JSON Web Tokens available on Appsmith, you can securely exchange data or information between Appsmith and your apps or APIs.","title":"Access Token"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/","text":"OpenID Connect SSO \u00b6 OpenID Connect (OIDC) is an authentication protocol built on OAuth2.0 paradigm. You can use OIDC to securely sign-in users to your application. {% hint style=\"info\" %} OpenID Connect is available only in the enterprise edition for self-hosted instances , and only the Superuser of your Appsmith Instance can set up OIDC . Capture Redirect URL for OIDC Configuration \u00b6 {% hint style=\"info\" %} You will have to add the redirect URL to your preferred OIDC Provider\u2019s settings. For OIDC configuration in Appsmith, follow the steps below (the below steps are irrespective of the SSO provider you choose): On your Appsmith Application, go to Profile > Admin Settings. Navigate to Authentication and open the types of authentication available on Appsmith. Select OIDC, click on Enable Copy the Redirect URL {% hint style=\"info\" %} Save the Redirect URL as you\u2019ll need it to configure in OIDC Provider\u2019s settings. {% hint style=\"info\" %} You can choose to integrate with any one of the following OIDC providers by clicking on any of them below. OIDC Providers \u00b6 Appsmith provides some popular OIDC integrations that you can choose from. Click on the available providers to follow the exhaustive guide for integrating with them: {% content-ref url=\"auth0.md\" %} auth0.md {% content-ref url=\"ping-identity.md\" %} ping-identity.md {% content-ref url=\"okta.md\" %} okta.md {% content-ref url=\"active-directory.md\" %} active-directory.md","title":"OpenID Connect SSO"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/#openid-connect-sso","text":"OpenID Connect (OIDC) is an authentication protocol built on OAuth2.0 paradigm. You can use OIDC to securely sign-in users to your application. {% hint style=\"info\" %} OpenID Connect is available only in the enterprise edition for self-hosted instances , and only the Superuser of your Appsmith Instance can set up OIDC .","title":"OpenID Connect SSO"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/#capture-redirect-url-for-oidc-configuration","text":"{% hint style=\"info\" %} You will have to add the redirect URL to your preferred OIDC Provider\u2019s settings. For OIDC configuration in Appsmith, follow the steps below (the below steps are irrespective of the SSO provider you choose): On your Appsmith Application, go to Profile > Admin Settings. Navigate to Authentication and open the types of authentication available on Appsmith. Select OIDC, click on Enable Copy the Redirect URL {% hint style=\"info\" %} Save the Redirect URL as you\u2019ll need it to configure in OIDC Provider\u2019s settings. {% hint style=\"info\" %} You can choose to integrate with any one of the following OIDC providers by clicking on any of them below.","title":"Capture Redirect URL for OIDC Configuration"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/#oidc-providers","text":"Appsmith provides some popular OIDC integrations that you can choose from. Click on the available providers to follow the exhaustive guide for integrating with them: {% content-ref url=\"auth0.md\" %} auth0.md {% content-ref url=\"ping-identity.md\" %} ping-identity.md {% content-ref url=\"okta.md\" %} okta.md {% content-ref url=\"active-directory.md\" %} active-directory.md","title":"OIDC Providers"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/active-directory/","text":"Active Directory \u00b6 Azure Active Directory (Azure AD) is a cloud-based identity and access management service. This service helps your employees access external resources**,** such as Microsoft 365, the Azure portal, and thousands of other SaaS applications. {% hint style=\"info\" %} OpenID Connect is available only in the enterprise edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up OIDC. To configure OpenID Connect(OIDC) within Appsmith using Active Directory as an OIDC provider, follow these steps: Create an Application \u00b6 {% embed url=\" https://youtu.be/GDOVdeIe3VU \" %} Creating an application in Active Directory Log in to your Azure account and click on More services . Click on Azure Active Directory and hit \u201c +Add .\u201d From the \"+Add\" dropdown, select \u201c App Registration .\u201d Under App Registration: Name : Give your App a meaningful name. Supported account types : Select \u201cAccounts in this organizational directory only (Default Directory only - Single tenant).\" Redirect URL : select the application type as Web for Platform and add the redirect URL (Copied from the OIDC window in Appsmith\u2019s Admin Settings ). Click on Register to create the application. Configure Active directory with Appsmith \u00b6 On the application homepage, go to the overview tab and perform the following actions under the essentials dropdown: Copy the Application (client) ID and paste it under the Client ID in the OIDC configurations in Appsmith. For Client secret, click on \u201cClient credentials: Add a certificate or secret.\u201d In the \u201cCertificates and Secrets window,\u201d go to the Client secret tab and click on \u201cNew client secret.\u201d Add the key's description and expiration time in the \u201c Add a client secret \u201d pop-up. Click on Save. Copy the value of the new Client secret and add it under Client secret in the OIDC configurations in Appsmith. {% embed url=\" https://youtu.be/AcpfV0sQ26w \" %} Creating a new Client secret in Active Directory Click the Endpoints tab under App overview and copy the OpenID Connect metadata document URL. {% embed url=\" https://youtu.be/v6N09_Q5LoY \" %} Open the metadata URL in a browser window and copy the following configurations from the above link and add them to OIDC Configurations on Appsmith: Azure Active Directory Configuration OIDC configuration field in Appsmith authorization_endpoint Authorization URL token_endpoint Token URL userinfo_endpoint User Info URL jwks_uri JWK Set URL Configure Scopes \u00b6 The scope defines the OpenID Connect (OIDC) scopes that allow you to authorize the access of user details ( after a user is successfully authenticated) like name, email, profile picture, and more. Each scope maps to a set of user attributes and returns its value. You'll see the Scope field below the JSON Web Key Set : What does Appsmith need as part of Scopes? \u00b6 Appsmith needs openId as a mandatory scope. You can add more scopes if the need be. You'll have to ensure that the same is available at Active Directory. Configure Scopes in Active Directory \u00b6 {% embed url=\" https://youtu.be/CkUOXc1u87A \" %} Configuring scopes in Active Directory To configure scopes/permissions on Active Directory, follow the steps below: Go to API permissions on the left panel. Click on Add a permission button. Under Request API permissions, Select Microsoft Graph and click on Delegated permissions. Select the following permissions: Under OpenID permissions- email openid Profile Under User permissions- User.Read Once complete, these scopes will get added to the Active Directory application. Click on Grant admin consent for Default Directory on the top of the table, next to Add a permission button. Configure Username Attributes for Active Directory \u00b6 The username attributes define the attributes used as usernames for authentication. You can add the attribute to this field that you consider for logging. What does Appsmith need as a Username Attribute? \u00b6 For Active Directory, Appsmith considers \"sub\" address as username. Please ensure that you have added \" sub \" as an attribute in the Username Attribute field. Complete OIDC Setup \u00b6 Save the changes and restart your application by clicking SAVE & RESTART button. You\u2019ll see the SIGN IN WITH OIDC SSO on the Appsmith\u2019s login screen.","title":"Active Directory"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/active-directory/#active-directory","text":"Azure Active Directory (Azure AD) is a cloud-based identity and access management service. This service helps your employees access external resources**,** such as Microsoft 365, the Azure portal, and thousands of other SaaS applications. {% hint style=\"info\" %} OpenID Connect is available only in the enterprise edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up OIDC. To configure OpenID Connect(OIDC) within Appsmith using Active Directory as an OIDC provider, follow these steps:","title":"Active Directory"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/active-directory/#create-an-application","text":"{% embed url=\" https://youtu.be/GDOVdeIe3VU \" %} Creating an application in Active Directory Log in to your Azure account and click on More services . Click on Azure Active Directory and hit \u201c +Add .\u201d From the \"+Add\" dropdown, select \u201c App Registration .\u201d Under App Registration: Name : Give your App a meaningful name. Supported account types : Select \u201cAccounts in this organizational directory only (Default Directory only - Single tenant).\" Redirect URL : select the application type as Web for Platform and add the redirect URL (Copied from the OIDC window in Appsmith\u2019s Admin Settings ). Click on Register to create the application.","title":"Create an Application"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/active-directory/#configure-active-directory-with-appsmith","text":"On the application homepage, go to the overview tab and perform the following actions under the essentials dropdown: Copy the Application (client) ID and paste it under the Client ID in the OIDC configurations in Appsmith. For Client secret, click on \u201cClient credentials: Add a certificate or secret.\u201d In the \u201cCertificates and Secrets window,\u201d go to the Client secret tab and click on \u201cNew client secret.\u201d Add the key's description and expiration time in the \u201c Add a client secret \u201d pop-up. Click on Save. Copy the value of the new Client secret and add it under Client secret in the OIDC configurations in Appsmith. {% embed url=\" https://youtu.be/AcpfV0sQ26w \" %} Creating a new Client secret in Active Directory Click the Endpoints tab under App overview and copy the OpenID Connect metadata document URL. {% embed url=\" https://youtu.be/v6N09_Q5LoY \" %} Open the metadata URL in a browser window and copy the following configurations from the above link and add them to OIDC Configurations on Appsmith: Azure Active Directory Configuration OIDC configuration field in Appsmith authorization_endpoint Authorization URL token_endpoint Token URL userinfo_endpoint User Info URL jwks_uri JWK Set URL","title":"Configure Active directory with Appsmith"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/active-directory/#configure-scopes","text":"The scope defines the OpenID Connect (OIDC) scopes that allow you to authorize the access of user details ( after a user is successfully authenticated) like name, email, profile picture, and more. Each scope maps to a set of user attributes and returns its value. You'll see the Scope field below the JSON Web Key Set :","title":"Configure Scopes"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/active-directory/#what-does-appsmith-need-as-part-of-scopes","text":"Appsmith needs openId as a mandatory scope. You can add more scopes if the need be. You'll have to ensure that the same is available at Active Directory.","title":"What does Appsmith need as part of Scopes?"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/active-directory/#configure-scopes-in-active-directory","text":"{% embed url=\" https://youtu.be/CkUOXc1u87A \" %} Configuring scopes in Active Directory To configure scopes/permissions on Active Directory, follow the steps below: Go to API permissions on the left panel. Click on Add a permission button. Under Request API permissions, Select Microsoft Graph and click on Delegated permissions. Select the following permissions: Under OpenID permissions- email openid Profile Under User permissions- User.Read Once complete, these scopes will get added to the Active Directory application. Click on Grant admin consent for Default Directory on the top of the table, next to Add a permission button.","title":"Configure Scopes in Active Directory"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/active-directory/#configure-username-attributes-for-active-directory","text":"The username attributes define the attributes used as usernames for authentication. You can add the attribute to this field that you consider for logging.","title":"Configure Username Attributes for Active Directory"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/active-directory/#what-does-appsmith-need-as-a-username-attribute","text":"For Active Directory, Appsmith considers \"sub\" address as username. Please ensure that you have added \" sub \" as an attribute in the Username Attribute field.","title":"What does Appsmith need as a Username Attribute?"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/active-directory/#complete-oidc-setup","text":"Save the changes and restart your application by clicking SAVE & RESTART button. You\u2019ll see the SIGN IN WITH OIDC SSO on the Appsmith\u2019s login screen.","title":"Complete OIDC Setup"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/auth0/","text":"Auth0 \u00b6 Auth0 is an authentication and authorization as a service provider. To configure OpenID Connect(OIDC) within Appsmith using Auth0 as an OIDC provider, follow these steps: {% hint style=\"info\" %} OpenID Connect is available only in the enterprise edition for self-hosted instances , and only the Superuser of your Appsmith Instance can set up OIDC . Create Application \u00b6 Log in to your Auth0 account and go to Applications . (Please create an account if you don\u2019t have one on Auth0 ). Click on +Create Application and pick Regular Web Applications from the given options. The default name of the application is My App . You can change it as per your requirements. Open the newly created Auth0 App, go to the settings tab and - Add the Redirect URL (Copied from OIDC window in Appsmith\u2019s Admin Settings ) in the following fields - Application Login URL Allowed Callback URLs Configure Auth0 fields in Appsmith \u00b6 To continue with the OIDC setup on Appsmith, navigate to Auth0 configurations and perform the following actions: Copy the Client ID , and Client Secret paste them into the OIDC configurations in Appsmith. Go to Advance Settings and open the endpoints tab. Copy the required OAuth URLs and add them to your OIDC configurations. Add all the URLs copied from Auth0 to Appsmith. Configurations at Auth0 Configuration at Appsmith Configuring Scopes for Auth0 \u00b6 The scope defines the OpenID Connect (OIDC) scopes that allow you to authorize the access of user details (after a user is successfully authenticated) like name, email, profile picture, and more. Each scope maps to a set of user attributes and returns its value. Just below the JSON Web Key Set, you\u2019ll see the Scope field: What does Appsmith need as part of Scopes? \u00b6 Appsmith needs openId and email as mandatory scopes. You can add more scopes if the need be. You'll have to ensure that the same is available at Auth0. Auth0 Scope \u00b6 Auth0 provides standard claims: openId, profile, and email as part of the authorization action. If you want to access additional user attributes, you\u2019ll have to configure them on the Auth0 and add them to Appsmith as part of the Scope field. Configuring Username Attributes for Auth0 \u00b6 The username attributes define the attributes used as usernames for authentication. You can add the attribute to this field that you consider for logging. What does Appsmith need as a Username Attribute? \u00b6 Appsmith considers email address as username . Please ensure that you have added it as an attribute in the Username Attribute field. Please provide email as the attribute name for configuring the username attribute for Auth0. Complete OIDC Setup \u00b6 Save the changes and restart your application by clicking SAVE & RESTART button. You\u2019ll see the SIGN IN WITH OIDC SSO on the Appsmith\u2019s login screen.","title":"Auth0"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/auth0/#auth0","text":"Auth0 is an authentication and authorization as a service provider. To configure OpenID Connect(OIDC) within Appsmith using Auth0 as an OIDC provider, follow these steps: {% hint style=\"info\" %} OpenID Connect is available only in the enterprise edition for self-hosted instances , and only the Superuser of your Appsmith Instance can set up OIDC .","title":"Auth0"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/auth0/#create-application","text":"Log in to your Auth0 account and go to Applications . (Please create an account if you don\u2019t have one on Auth0 ). Click on +Create Application and pick Regular Web Applications from the given options. The default name of the application is My App . You can change it as per your requirements. Open the newly created Auth0 App, go to the settings tab and - Add the Redirect URL (Copied from OIDC window in Appsmith\u2019s Admin Settings ) in the following fields - Application Login URL Allowed Callback URLs","title":"Create Application"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/auth0/#configure-auth0-fields-in-appsmith","text":"To continue with the OIDC setup on Appsmith, navigate to Auth0 configurations and perform the following actions: Copy the Client ID , and Client Secret paste them into the OIDC configurations in Appsmith. Go to Advance Settings and open the endpoints tab. Copy the required OAuth URLs and add them to your OIDC configurations. Add all the URLs copied from Auth0 to Appsmith. Configurations at Auth0 Configuration at Appsmith","title":"Configure Auth0 fields in Appsmith"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/auth0/#configuring-scopes-for-auth0","text":"The scope defines the OpenID Connect (OIDC) scopes that allow you to authorize the access of user details (after a user is successfully authenticated) like name, email, profile picture, and more. Each scope maps to a set of user attributes and returns its value. Just below the JSON Web Key Set, you\u2019ll see the Scope field:","title":"Configuring Scopes for Auth0"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/auth0/#what-does-appsmith-need-as-part-of-scopes","text":"Appsmith needs openId and email as mandatory scopes. You can add more scopes if the need be. You'll have to ensure that the same is available at Auth0.","title":"What does Appsmith need as part of Scopes?"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/auth0/#auth0-scope","text":"Auth0 provides standard claims: openId, profile, and email as part of the authorization action. If you want to access additional user attributes, you\u2019ll have to configure them on the Auth0 and add them to Appsmith as part of the Scope field.","title":"Auth0 Scope"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/auth0/#configuring-username-attributes-for-auth0","text":"The username attributes define the attributes used as usernames for authentication. You can add the attribute to this field that you consider for logging.","title":"Configuring Username Attributes for Auth0"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/auth0/#what-does-appsmith-need-as-a-username-attribute","text":"Appsmith considers email address as username . Please ensure that you have added it as an attribute in the Username Attribute field. Please provide email as the attribute name for configuring the username attribute for Auth0.","title":"What does Appsmith need as a Username Attribute?"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/auth0/#complete-oidc-setup","text":"Save the changes and restart your application by clicking SAVE & RESTART button. You\u2019ll see the SIGN IN WITH OIDC SSO on the Appsmith\u2019s login screen.","title":"Complete OIDC Setup"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/okta/","text":"Okta \u00b6 Okta is an Identity-as-a-Service (IDaaS) provider. To configure OpenID Connect (OIDC) within Appsmith using Okta, follow these steps: {% hint style=\"info\" %} OpenID Connect is available only in the enterprise edition for self-hosted instances , and only the Superuser of your Appsmith Instance can set up OIDC . Create Application \u00b6 Log in to your Okta Developer Account and go to Applications . (Please create an account if you don\u2019t have one). Click on Create App integration . In Create App integration window, choose OIDC as the Sign-in method and Web application as the Application type. Click on Next. In the General settings of the newly created App Integration: Give your App integration a meaningful name (Optional.) Add the redirect URL (Copied from the OIDC window in Appsmith\u2019s Admin Settings ) in the Sign-in redirect URL field. You can add multiple redirect URLs. Under Assignment, configure the Accessibility of this App as required. Click on Save . This action creates the app integration and opens the settings page to configure additional options. Configure Okta fields in Appsmith \u00b6 To continue with the OIDC setup on Appsmith, navigate to the fields on the Okta configurations, and perform the actions as mentioned below: On the Okta Application homepage, go to the General tab: Copy the Client ID and Client Secret and paste them into the OIDC configurations in Appsmith. Configuration at Okta Copy your Okta domain URL, attach /.well-known/openid-configuration to it, and open this modified URL in your browser. <your_okta_domain>/.well-known/openid-configuration {% embed url=\" https://www.youtube.com/watch?v=dgDhBUXKA6s \" %} Get Okta Configurations Configuration at Appsmith - Add all the configurations from the above URL in OIDC Configurations on Appsmith. Refer to the below table that shows field mapping: Fields (Okta) Fields (Appsmith) authorization_endpoint Authorization URL token_endpoint Token URL Userinfo_endpoint User Info URL Jwks_uri JWK Set URL Configure Scopes for Okta \u00b6 The scope defines the OpenID Connect (OIDC) scopes that allow you to authorize the access of user details ( after a user is successfully authenticated) like name, email, profile picture, and more. Each scope maps to a set of user attributes and returns its value. Just below the JSON Web Key Set, you\u2019ll see the Scope field: What does Appsmith need as part of Scopes? \u00b6 Appsmith needs openId as a mandatory scope. You can add more scopes if the need be. You'll have to ensure that the same is available at Okta. Okta Scope \u00b6 Okta provides a number of configurable scopes that can be granted based on your business requirements. Navigate to Okta API Scopes , where you\u2019ll be able to grant all or selected scopes. Configure Username Attributes for Okta \u00b6 The username attributes define the attributes used as usernames for authentication. You can add the attribute to this field that you consider for logging. What does Appsmith need as a Username Attribute? \u00b6 Appsmith considers email address as username . Please ensure that you have added it as an attribute in the Username Attribute field. Please provide email as the attribute name for configuring the username attribute for Okta. Complete OIDC Setup \u00b6 Save the changes and restart your application by clicking SAVE & RESTART button. You\u2019ll see the SIGN IN WITH OIDC SSO on the Appsmith\u2019s login screen.","title":"Okta"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/okta/#okta","text":"Okta is an Identity-as-a-Service (IDaaS) provider. To configure OpenID Connect (OIDC) within Appsmith using Okta, follow these steps: {% hint style=\"info\" %} OpenID Connect is available only in the enterprise edition for self-hosted instances , and only the Superuser of your Appsmith Instance can set up OIDC .","title":"Okta"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/okta/#create-application","text":"Log in to your Okta Developer Account and go to Applications . (Please create an account if you don\u2019t have one). Click on Create App integration . In Create App integration window, choose OIDC as the Sign-in method and Web application as the Application type. Click on Next. In the General settings of the newly created App Integration: Give your App integration a meaningful name (Optional.) Add the redirect URL (Copied from the OIDC window in Appsmith\u2019s Admin Settings ) in the Sign-in redirect URL field. You can add multiple redirect URLs. Under Assignment, configure the Accessibility of this App as required. Click on Save . This action creates the app integration and opens the settings page to configure additional options.","title":"Create Application"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/okta/#configure-okta-fields-in-appsmith","text":"To continue with the OIDC setup on Appsmith, navigate to the fields on the Okta configurations, and perform the actions as mentioned below: On the Okta Application homepage, go to the General tab: Copy the Client ID and Client Secret and paste them into the OIDC configurations in Appsmith. Configuration at Okta Copy your Okta domain URL, attach /.well-known/openid-configuration to it, and open this modified URL in your browser. <your_okta_domain>/.well-known/openid-configuration {% embed url=\" https://www.youtube.com/watch?v=dgDhBUXKA6s \" %} Get Okta Configurations Configuration at Appsmith - Add all the configurations from the above URL in OIDC Configurations on Appsmith. Refer to the below table that shows field mapping: Fields (Okta) Fields (Appsmith) authorization_endpoint Authorization URL token_endpoint Token URL Userinfo_endpoint User Info URL Jwks_uri JWK Set URL","title":"Configure Okta fields in Appsmith"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/okta/#configure-scopes-for-okta","text":"The scope defines the OpenID Connect (OIDC) scopes that allow you to authorize the access of user details ( after a user is successfully authenticated) like name, email, profile picture, and more. Each scope maps to a set of user attributes and returns its value. Just below the JSON Web Key Set, you\u2019ll see the Scope field:","title":"Configure Scopes for Okta"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/okta/#what-does-appsmith-need-as-part-of-scopes","text":"Appsmith needs openId as a mandatory scope. You can add more scopes if the need be. You'll have to ensure that the same is available at Okta.","title":"What does Appsmith need as part of Scopes?"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/okta/#okta-scope","text":"Okta provides a number of configurable scopes that can be granted based on your business requirements. Navigate to Okta API Scopes , where you\u2019ll be able to grant all or selected scopes.","title":"Okta Scope"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/okta/#configure-username-attributes-for-okta","text":"The username attributes define the attributes used as usernames for authentication. You can add the attribute to this field that you consider for logging.","title":"Configure Username Attributes for Okta"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/okta/#what-does-appsmith-need-as-a-username-attribute","text":"Appsmith considers email address as username . Please ensure that you have added it as an attribute in the Username Attribute field. Please provide email as the attribute name for configuring the username attribute for Okta.","title":"What does Appsmith need as a Username Attribute?"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/okta/#complete-oidc-setup","text":"Save the changes and restart your application by clicking SAVE & RESTART button. You\u2019ll see the SIGN IN WITH OIDC SSO on the Appsmith\u2019s login screen.","title":"Complete OIDC Setup"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/ping-identity/","text":"Ping Identity \u00b6 Ping Identity (PingID) is a cloud-based authentication provider. To configure OpenID Connect(OIDC) within Appsmith using PingID as an OIDC provider, follow these steps: {% hint style=\"info\" %} OpenID Connect is available only in the enterprise edition for self-hosted instances , and only the Superuser of your Appsmith Instance can set up OIDC . Create Environment \u00b6 Log into your Ping one account (Please create a new account if you don\u2019t have one). and: On the top left, click the Ping Identity logo. Select Home . You\u2019ll see the list of environments available. Click Add Environment available on the top right. Click on Build your own solution in the Create Environment window and choose PingOne SSO from the given options. {% embed url=\" https://youtu.be/B-Vsbqkkwqg \" %} Build your own Solution Fill in the details about the environment and click on Next. {% embed url=\" https://youtu.be/h8QqEhbpEPs \" %} Environment Configuration Go to Connections from the sidebar and click on Applications . Create a new Application by clicking on the + button. On the New application window, select Web App and choose OIDC as the connection type. Enter the application name and description (optional) on the next page. On the Configure window, add the Redirect URL of your Appsmith application (Copied from the OIDC window in Appsmith\u2019s Admin Settings ) and click on Save and Continue. Use the Grant Access Resources to filter the scopes by openid resource type. Move the desired scopes to Scope Grants to give access to the resources. Click on Save and Continue . In the Attribute Mapping, add the OIDC attributes. Please note that only the values added in the Scope Grant will be valid here. Hit Save and Close , and your application is ready. {% embed url=\" https://youtu.be/fRreXB6P0No \" %} Configure Environment and Scope Under the general section, you can see the basic information about your application. You can add multiple Redirect URLs by simply editing the general configurations. (Allows you to use this PingID application for multiple Appsmith applications. Enable user access to the application from the toggle switch at the top right corner. Configure PingID fields in Appsmith \u00b6 To continue with the OIDC setup on Appsmith, navigate to the fields on the Ping Identity configurations, and perform the actions mentioned below: Go to the configuration tab. Here, you\u2019ll get all the configurations that are required to be added to your Appsmith application (Admin Settings \u2192Authentication \u2192OIDC) Configurations on PingID Configurations at Appsmith Configure Scopes for Ping Identity \u00b6 The scope defines the OpenID Connect (OIDC) scopes that allow you to authorize the access of user details ( after a user is successfully authenticated) like name, email, profile picture, and more. Each scope maps to a set of user attributes and returns its value. Just below the JSON Web Key Set, you\u2019ll see the Scope field: What does Appsmith need as part of Scopes? \u00b6 Appsmith needs openId as a mandatory scope. You can add more scopes if the need be. You will have to ensure that the same is available at Ping Identity. Ping Identity Scope \u00b6 Ping Identity supports static and dynamic scopes . A static scope is defined using a text value that could be an attribute name. Dynamic scope is defined using a variable name that will hold the attribute value at runtime. Ping Identity provides an exhaustive guide to configure scopes available on their portal. Configure Username Attributes for Ping Identity \u00b6 The username attributes define the attributes used as usernames for authentication. You can add the attribute to this field that your SSO provider considers for logging. What does Appsmith need as a Username Attribute? \u00b6 Appsmith considers email address as username . Please ensure that you have added it as an attribute in the Username Attribute field. Please provide email as the attribute name for configuring the username attribute for PingIdentity. Complete OIDC Setup \u00b6 Save the changes and restart your application by clicking SAVE & RESTART button. You\u2019ll see the SIGN IN WITH OIDC SSO on the Appsmith\u2019s login screen.","title":"Ping Identity"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/ping-identity/#ping-identity","text":"Ping Identity (PingID) is a cloud-based authentication provider. To configure OpenID Connect(OIDC) within Appsmith using PingID as an OIDC provider, follow these steps: {% hint style=\"info\" %} OpenID Connect is available only in the enterprise edition for self-hosted instances , and only the Superuser of your Appsmith Instance can set up OIDC .","title":"Ping Identity"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/ping-identity/#create-environment","text":"Log into your Ping one account (Please create a new account if you don\u2019t have one). and: On the top left, click the Ping Identity logo. Select Home . You\u2019ll see the list of environments available. Click Add Environment available on the top right. Click on Build your own solution in the Create Environment window and choose PingOne SSO from the given options. {% embed url=\" https://youtu.be/B-Vsbqkkwqg \" %} Build your own Solution Fill in the details about the environment and click on Next. {% embed url=\" https://youtu.be/h8QqEhbpEPs \" %} Environment Configuration Go to Connections from the sidebar and click on Applications . Create a new Application by clicking on the + button. On the New application window, select Web App and choose OIDC as the connection type. Enter the application name and description (optional) on the next page. On the Configure window, add the Redirect URL of your Appsmith application (Copied from the OIDC window in Appsmith\u2019s Admin Settings ) and click on Save and Continue. Use the Grant Access Resources to filter the scopes by openid resource type. Move the desired scopes to Scope Grants to give access to the resources. Click on Save and Continue . In the Attribute Mapping, add the OIDC attributes. Please note that only the values added in the Scope Grant will be valid here. Hit Save and Close , and your application is ready. {% embed url=\" https://youtu.be/fRreXB6P0No \" %} Configure Environment and Scope Under the general section, you can see the basic information about your application. You can add multiple Redirect URLs by simply editing the general configurations. (Allows you to use this PingID application for multiple Appsmith applications. Enable user access to the application from the toggle switch at the top right corner.","title":"Create Environment"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/ping-identity/#configure-pingid-fields-in-appsmith","text":"To continue with the OIDC setup on Appsmith, navigate to the fields on the Ping Identity configurations, and perform the actions mentioned below: Go to the configuration tab. Here, you\u2019ll get all the configurations that are required to be added to your Appsmith application (Admin Settings \u2192Authentication \u2192OIDC) Configurations on PingID Configurations at Appsmith","title":"Configure PingID fields in Appsmith"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/ping-identity/#configure-scopes-for-ping-identity","text":"The scope defines the OpenID Connect (OIDC) scopes that allow you to authorize the access of user details ( after a user is successfully authenticated) like name, email, profile picture, and more. Each scope maps to a set of user attributes and returns its value. Just below the JSON Web Key Set, you\u2019ll see the Scope field:","title":"Configure Scopes for Ping Identity"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/ping-identity/#what-does-appsmith-need-as-part-of-scopes","text":"Appsmith needs openId as a mandatory scope. You can add more scopes if the need be. You will have to ensure that the same is available at Ping Identity.","title":"What does Appsmith need as part of Scopes?"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/ping-identity/#ping-identity-scope","text":"Ping Identity supports static and dynamic scopes . A static scope is defined using a text value that could be an attribute name. Dynamic scope is defined using a variable name that will hold the attribute value at runtime. Ping Identity provides an exhaustive guide to configure scopes available on their portal.","title":"Ping Identity Scope"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/ping-identity/#configure-username-attributes-for-ping-identity","text":"The username attributes define the attributes used as usernames for authentication. You can add the attribute to this field that your SSO provider considers for logging.","title":"Configure Username Attributes for Ping Identity"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/ping-identity/#what-does-appsmith-need-as-a-username-attribute","text":"Appsmith considers email address as username . Please ensure that you have added it as an attribute in the Username Attribute field. Please provide email as the attribute name for configuring the username attribute for PingIdentity.","title":"What does Appsmith need as a Username Attribute?"},{"location":"Getting%20Started/setup/instance-configuration/authentication/openid-connect-oidc/ping-identity/#complete-oidc-setup","text":"Save the changes and restart your application by clicking SAVE & RESTART button. You\u2019ll see the SIGN IN WITH OIDC SSO on the Appsmith\u2019s login screen.","title":"Complete OIDC Setup"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/","text":"SAML SSO \u00b6 Security Assertion Markup Language (SAML) is an XML-based open standard for exchanging identity data between parties: an Identity provider(IdP) and a service provider. The identity provider(IdP) is responsible for authentication and shares the user\u2019s identity and authorization level with a service provider on successful authentication. Upon successful authentication by the identity provider, the service provider authorizes the user to access resources. {% hint style=\"info\" %} Security Assertion Markup Language (SAML) is available only in the enterprise edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up SAML . Capture Redirect & Entity URL \u00b6 Follow the below steps to configure your SAML Provider\u2019s settings. These steps are irrespective of the SAML provider that you choose. On Appsmith, navigate to Profile \u2013-> Admin Settings. Navigate to Authentication and open the available options for authentication on Appsmith. You\u2019ll see several options available, select SAML and click Enable . Redirect URL \u00b6 Copy the Redirect URL , and keep it safe as you\u2019ll need this to add to your IdP\u2019s settings. {% hint style=\"info\" %} Save the Redirect URL as you\u2019ll need it to configure these in the SAML provider\u2019s settings . Entity URL \u00b6 Copy the Entity URL , and keep it safe as you\u2019ll need this to add to your IdP\u2019s settings. {% hint style=\"info\" %} Save the Entity URL as you\u2019ll need it to configure these in the SAML provider\u2019s settings. SAML Providers \u00b6 Appsmith integrates with popular SAML providers that you can choose from. Click the below available providers and follow the instructions to configure them for SAML integration: {% content-ref url=\"auth0.md\" %} auth0.md {% content-ref url=\"ping-identity.md\" %} ping-identity.md {% content-ref url=\"okta.md\" %} okta.md {% content-ref url=\"active-directory.md\" %} active-directory.md Generic SAML Configuration \u00b6 You can also use configurations available on Appsmith to configure your SAML providers, which are not listed here. You can follow the steps listed below to configure the details: Configurations at the Identity Provider \u00b6 You\u2019ll need a Redirect URL and an Entity URL to configure SAML integration for an identity provider. Follow the below steps to capture the redirect and the entity URL available on Appsmith. On Appsmith, navigate to Profile >> Admin Settings. Navigate to Authentication, and open the available options for authentication on Appsmith. You\u2019ll see several options available, select SAML and click Enable . Redirect URL \u00b6 Copy the Redirect URL , and keep it safe as you\u2019ll need this to add to your IdP\u2019s settings. {% hint style=\"info\" %} Add the Redirect URL to the SAML Configuration to fields like the Callback URL. Entity URL Copy the Entity URL , and keep it safe as you\u2019ll need this to add to your IdP\u2019s settings. {% hint style=\"info\" %} Add the Entity URL to the Entity URL available for the SAML settings. Configurations at Appsmith \u00b6 You can register your identity provider with Appsmith in one of the following available ways and complete SAML integration. Metadata URL The metadata XML document is usually hosted and available remotely to integrate with. You can use the URL to configure SAML on Appsmith. Copy the URL where the metadata XML is available and paste it into the Metadata URL field as shown in the screenshot below . XML In case the Metadata URL is unavailable, but you have a raw SAML metadata XML locally available, you can click on the XML tab and add the raw Metadata XML into the Metadata XML field as shown in the below screenshot. IdP Data You can also configure SAML by manually adding the IdP details. If you choose to do so, you\u2019ll need the below details: Entity URL - The entity URL available for the Identity Provider Single Sign-on URL - The SSO URL for the identity provider X509 Public Certificate - A certificate that defines the public-key formats. Email - The name format used for an email address. Complete the Configuration \u00b6 Once you have added the required details click on Save & Restart. On server restart, you\u2019ll see an Authentication Successful! message as shown in the screenshot below. You can now see a SIGN IN WITH SAML SSO available on the Login screen and can use it to log into Appsmith using SAML.","title":"SAML SSO"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/#saml-sso","text":"Security Assertion Markup Language (SAML) is an XML-based open standard for exchanging identity data between parties: an Identity provider(IdP) and a service provider. The identity provider(IdP) is responsible for authentication and shares the user\u2019s identity and authorization level with a service provider on successful authentication. Upon successful authentication by the identity provider, the service provider authorizes the user to access resources. {% hint style=\"info\" %} Security Assertion Markup Language (SAML) is available only in the enterprise edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up SAML .","title":"SAML SSO"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/#capture-redirect-entity-url","text":"Follow the below steps to configure your SAML Provider\u2019s settings. These steps are irrespective of the SAML provider that you choose. On Appsmith, navigate to Profile \u2013-> Admin Settings. Navigate to Authentication and open the available options for authentication on Appsmith. You\u2019ll see several options available, select SAML and click Enable .","title":"Capture Redirect &amp; Entity URL"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/#redirect-url","text":"Copy the Redirect URL , and keep it safe as you\u2019ll need this to add to your IdP\u2019s settings. {% hint style=\"info\" %} Save the Redirect URL as you\u2019ll need it to configure these in the SAML provider\u2019s settings .","title":"Redirect URL"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/#entity-url","text":"Copy the Entity URL , and keep it safe as you\u2019ll need this to add to your IdP\u2019s settings. {% hint style=\"info\" %} Save the Entity URL as you\u2019ll need it to configure these in the SAML provider\u2019s settings.","title":"Entity URL"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/#saml-providers","text":"Appsmith integrates with popular SAML providers that you can choose from. Click the below available providers and follow the instructions to configure them for SAML integration: {% content-ref url=\"auth0.md\" %} auth0.md {% content-ref url=\"ping-identity.md\" %} ping-identity.md {% content-ref url=\"okta.md\" %} okta.md {% content-ref url=\"active-directory.md\" %} active-directory.md","title":"SAML Providers"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/#generic-saml-configuration","text":"You can also use configurations available on Appsmith to configure your SAML providers, which are not listed here. You can follow the steps listed below to configure the details:","title":"Generic SAML Configuration"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/#configurations-at-the-identity-provider","text":"You\u2019ll need a Redirect URL and an Entity URL to configure SAML integration for an identity provider. Follow the below steps to capture the redirect and the entity URL available on Appsmith. On Appsmith, navigate to Profile >> Admin Settings. Navigate to Authentication, and open the available options for authentication on Appsmith. You\u2019ll see several options available, select SAML and click Enable .","title":"Configurations at the Identity Provider"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/#redirect-url_1","text":"Copy the Redirect URL , and keep it safe as you\u2019ll need this to add to your IdP\u2019s settings. {% hint style=\"info\" %} Add the Redirect URL to the SAML Configuration to fields like the Callback URL. Entity URL Copy the Entity URL , and keep it safe as you\u2019ll need this to add to your IdP\u2019s settings. {% hint style=\"info\" %} Add the Entity URL to the Entity URL available for the SAML settings.","title":"Redirect URL"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/#configurations-at-appsmith","text":"You can register your identity provider with Appsmith in one of the following available ways and complete SAML integration. Metadata URL The metadata XML document is usually hosted and available remotely to integrate with. You can use the URL to configure SAML on Appsmith. Copy the URL where the metadata XML is available and paste it into the Metadata URL field as shown in the screenshot below . XML In case the Metadata URL is unavailable, but you have a raw SAML metadata XML locally available, you can click on the XML tab and add the raw Metadata XML into the Metadata XML field as shown in the below screenshot. IdP Data You can also configure SAML by manually adding the IdP details. If you choose to do so, you\u2019ll need the below details: Entity URL - The entity URL available for the Identity Provider Single Sign-on URL - The SSO URL for the identity provider X509 Public Certificate - A certificate that defines the public-key formats. Email - The name format used for an email address.","title":"Configurations at Appsmith"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/#complete-the-configuration","text":"Once you have added the required details click on Save & Restart. On server restart, you\u2019ll see an Authentication Successful! message as shown in the screenshot below. You can now see a SIGN IN WITH SAML SSO available on the Login screen and can use it to log into Appsmith using SAML.","title":"Complete the Configuration"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/active-directory/","text":"Active Directory \u00b6 Azure Active Directory (Azure AD) is a cloud-based identity and access management service. This service helps your employees access external resources, such as Microsoft 365, the Azure portal, and thousands of other SaaS applications. {% hint style=\"info\" %} SAML is available only in the enterprise edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up SAML. To configure SAML within Appsmith using Active Directory as a SAML provider, follow these steps: Create Application \u00b6 {% embed url=\" https://youtu.be/H94cQBp5sFE \" %} Log in to your Azure account and click on More services . Click on Azure Active Directory and hit \u201c +Add \u201d, and select \u201c Enterprise Application .\u201d Under Browse AD Azure Gallery window, click on create your application, and: Give your application a meaningful name. Select \u201c Integrate any other application you don't find in the gallery (Non-gallery) \u201d from the \u201c What are you looking to do with your application? \u201d options. Hit the Create button. Configure Appsmith URLs in Active Directory \u00b6 As mentioned in Capture Redirect & Entity URL , you need to add these URLs to your SAML application. Go to your SAML application homepage and follow the steps below: {% embed url=\" https://youtu.be/9EFlC0PaxD0 \" %} Adding Redirect and Entity URL Click on Single Sign-on from the sidebar and select SAML . Go to section 1, \u201c Basic SAML Configuration ,\u201d and click on edit on the Single Sign-on window. Add the Entity URL (copied from the SAML configurations in Appsmith) under Identifier (Entity ID) . Add the Redirect URL (copied from the SAML configurations in Appsmith) under Replay URL(Assertion Consumer Service URL). Configure Active Directory SAML Fields in Appsmith \u00b6 To complete the SAML configuration, you\u2019ll have to register the identity provider on Appsmith. Register Identity Provider \u00b6 Appsmith provides the below options using which you can register the identity provider on Appsmith and complete the SAML Configuration. Follow the one that best suits you: Metadata URL \u00b6 SAML metadata is an XML document that provides information required for interaction with a SAML-enabled identity or service provider. The Metadata URL is the URL metadata for SAML configuration hosted on a remote server. {% hint style=\"info\" %} Metadata URL is the quickest and most recommended way to set up SAML . {% embed url=\" https://youtu.be/5YEXAhdPwOI \" %} Fetching the metadata URL To get the metadata URL, click on Single Sign-on from the sidebar and go to section 3, \u201c SAML Signing Certificate .\u201d Copy the \u201c App Federation Metadata Url \u201d and add it to the \u201c metadata URL \u201d field in Appsmith. Click on SAVE AND RESTART to save the configuration. XML \u00b6 If you don\u2019t have a Metadata URL but have a raw SAML metadata XML document, you can choose XML to configure SAML. {% embed url=\" https://youtu.be/nUt1__WQBOE \" %} Metadata XML To get the metadata XML, click on Single Sign-on from the sidebar and go to section 3 \u201c SAML Signing Certificate \u201d. Download the \u201c Federation metadata XML \u201d. Add the content of the metadata XML file to the \u201c metadata XML \u201d field in Appsmith. IdP Settings \u00b6 You can also configure SAML by providing the identity provider(IdP) data. If you have Identity provider\u2019s data like X509 Public Certificate, Email, and more, you can choose this option to configure SAML. To get IdP data, click on Single Sign-on from the sidebar, go to section 3 \u201c SAML Signing Certificate \u201d and download the Federation metadata XML file. Navigate to Appsmith, click IdP Data and add the content of the tags (from metadata XML) as per the below mapping table: Appsmith Field Name Metadata XML Tag Entity ID <EntityDescriptor xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\" ID=\"_07355b4e-806d-4cd5-9f0a-949d831ba67e\" entityID=\"https://sts.windows.net/3e889401-476e-489a-9d84-07f623ee08a4/\"> Single Sign-On URL <SingleSignOnService/> X509 Public Certificate <X509Certificate/> Email (It is a static input,please add this value to the Email field) urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress Once you have supplied the details, click the SAVE & RESTART button to save the configuration. Complete the SAML Configuration \u00b6 Once the server restarts with new configurations, you will see a screen showing the message \u2018 Authentication Successful!\u2019 . You\u2019ll see a login screen with the button SIGN IN WITH SAML SSO .","title":"Active Directory"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/active-directory/#active-directory","text":"Azure Active Directory (Azure AD) is a cloud-based identity and access management service. This service helps your employees access external resources, such as Microsoft 365, the Azure portal, and thousands of other SaaS applications. {% hint style=\"info\" %} SAML is available only in the enterprise edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up SAML. To configure SAML within Appsmith using Active Directory as a SAML provider, follow these steps:","title":"Active Directory"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/active-directory/#create-application","text":"{% embed url=\" https://youtu.be/H94cQBp5sFE \" %} Log in to your Azure account and click on More services . Click on Azure Active Directory and hit \u201c +Add \u201d, and select \u201c Enterprise Application .\u201d Under Browse AD Azure Gallery window, click on create your application, and: Give your application a meaningful name. Select \u201c Integrate any other application you don't find in the gallery (Non-gallery) \u201d from the \u201c What are you looking to do with your application? \u201d options. Hit the Create button.","title":"Create Application"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/active-directory/#configure-appsmith-urls-in-active-directory","text":"As mentioned in Capture Redirect & Entity URL , you need to add these URLs to your SAML application. Go to your SAML application homepage and follow the steps below: {% embed url=\" https://youtu.be/9EFlC0PaxD0 \" %} Adding Redirect and Entity URL Click on Single Sign-on from the sidebar and select SAML . Go to section 1, \u201c Basic SAML Configuration ,\u201d and click on edit on the Single Sign-on window. Add the Entity URL (copied from the SAML configurations in Appsmith) under Identifier (Entity ID) . Add the Redirect URL (copied from the SAML configurations in Appsmith) under Replay URL(Assertion Consumer Service URL).","title":"Configure Appsmith URLs in Active Directory"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/active-directory/#configure-active-directory-saml-fields-in-appsmith","text":"To complete the SAML configuration, you\u2019ll have to register the identity provider on Appsmith.","title":"Configure Active Directory SAML Fields in Appsmith"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/active-directory/#register-identity-provider","text":"Appsmith provides the below options using which you can register the identity provider on Appsmith and complete the SAML Configuration. Follow the one that best suits you:","title":"Register Identity Provider"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/active-directory/#metadata-url","text":"SAML metadata is an XML document that provides information required for interaction with a SAML-enabled identity or service provider. The Metadata URL is the URL metadata for SAML configuration hosted on a remote server. {% hint style=\"info\" %} Metadata URL is the quickest and most recommended way to set up SAML . {% embed url=\" https://youtu.be/5YEXAhdPwOI \" %} Fetching the metadata URL To get the metadata URL, click on Single Sign-on from the sidebar and go to section 3, \u201c SAML Signing Certificate .\u201d Copy the \u201c App Federation Metadata Url \u201d and add it to the \u201c metadata URL \u201d field in Appsmith. Click on SAVE AND RESTART to save the configuration.","title":"Metadata URL"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/active-directory/#xml","text":"If you don\u2019t have a Metadata URL but have a raw SAML metadata XML document, you can choose XML to configure SAML. {% embed url=\" https://youtu.be/nUt1__WQBOE \" %} Metadata XML To get the metadata XML, click on Single Sign-on from the sidebar and go to section 3 \u201c SAML Signing Certificate \u201d. Download the \u201c Federation metadata XML \u201d. Add the content of the metadata XML file to the \u201c metadata XML \u201d field in Appsmith.","title":"XML"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/active-directory/#idp-settings","text":"You can also configure SAML by providing the identity provider(IdP) data. If you have Identity provider\u2019s data like X509 Public Certificate, Email, and more, you can choose this option to configure SAML. To get IdP data, click on Single Sign-on from the sidebar, go to section 3 \u201c SAML Signing Certificate \u201d and download the Federation metadata XML file. Navigate to Appsmith, click IdP Data and add the content of the tags (from metadata XML) as per the below mapping table: Appsmith Field Name Metadata XML Tag Entity ID <EntityDescriptor xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\" ID=\"_07355b4e-806d-4cd5-9f0a-949d831ba67e\" entityID=\"https://sts.windows.net/3e889401-476e-489a-9d84-07f623ee08a4/\"> Single Sign-On URL <SingleSignOnService/> X509 Public Certificate <X509Certificate/> Email (It is a static input,please add this value to the Email field) urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress Once you have supplied the details, click the SAVE & RESTART button to save the configuration.","title":"IdP Settings"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/active-directory/#complete-the-saml-configuration","text":"Once the server restarts with new configurations, you will see a screen showing the message \u2018 Authentication Successful!\u2019 . You\u2019ll see a login screen with the button SIGN IN WITH SAML SSO .","title":"Complete the SAML Configuration"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/auth0/","text":"Auth0 \u00b6 Auth0 is an authentication & authorization provider. It provides Security Assertion Markup Language (SAML) integration that you can use to integrate with Appsmith. Follow these steps to configure SAML integration: {% hint style=\"info\" %} Security Assertion Markup Language (SAML) is available only in the enterprise edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up SAML . Create Application \u00b6 Log in to your Auth0 account and go to Applications \u2192 select the subhead Applications \u2192 Click Create Application . (Please create an account if you don\u2019t have one on Auth0 ). From the available options, select Regular Web Applications . {% hint style=\"info\" %} The default name of the application is My App . You can change it to give a suitable name to the application. Your application will be created, and you\u2019ll be navigated to the Application details page. Go to the Settings tab. Scroll down to the Application URIs section. Add the Redirect URL ( Copied from Appsmith SAML Configuration Redirect URL Field ) to the Allowed Callback URLs field. Click Save Changes Configure Auth0 SAML Fields in Appsmith \u00b6 To complete the SAML configuration, you\u2019ll have to register the identity provider on Appsmith. Register Identity Provider \u00b6 Appsmith provides the below options using which you can register the identity provider on Appsmith and complete the SAML Configuration. Follow the one that best suits you: Metadata URL \u00b6 SAML metadata is an XML document that provides information required for interaction with a SAML-enabled identity or service provider. The Metadata URL is the URL metadata for SAML configuration hosted on a remote server. {% hint style=\"info\" %} Metadata URL is the quickest and most recommended way to set up SAML . To obtain the Metadata URL , navigate to the Settings tab, scroll down and expand the Advanced Settings. Click on the Endpoints , scroll down to the SAML config fields, and copy the SAML Metadata URL. Navigate to Appsmith, add the Metadata URL and click SAVE & RESTART button to save the configuration. XML \u00b6 If you don\u2019t have a Metadata URL but have a raw SAML metadata XML document, you can choose XML to configure SAML. Navigate to Appsmith, click XML, add the raw XML in the Metadata XML field and click the SAVE & RESTART button to save the configuration. IdP Data \u00b6 You can also configure SAML by providing the identity provider(IdP) data. If you have Identity provider\u2019s data like X509 Public Certificate , Email , and more, you can choose this option to configure SAML. Navigate to Appsmith, and click IdP Data . You can get the information from Metadata XML and add the content of the tags as per the below mapping table: Appsmith Field Name Metadata XML Tag Entity ID <EntityDescriptor`` `` entityID =\"urn:dev-ux0tussx.us.auth0.com\" / > Single Sign-On URL <SingleSignOnService/> X509 Public Certificate <X509Certificate/> Email <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format: emailAddress </NameIDFormat> Once you have supplied the details, click the SAVE & RESTART button to save the configuration. Complete the SAML Configuration \u00b6 Once the server restarts with new configurations, you will see a screen showing the message \u2018 Authentication Successful!\u2019 . You\u2019ll see a login screen with the button SIGN IN WITH SAML SSO .","title":"Auth0"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/auth0/#auth0","text":"Auth0 is an authentication & authorization provider. It provides Security Assertion Markup Language (SAML) integration that you can use to integrate with Appsmith. Follow these steps to configure SAML integration: {% hint style=\"info\" %} Security Assertion Markup Language (SAML) is available only in the enterprise edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up SAML .","title":"Auth0"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/auth0/#create-application","text":"Log in to your Auth0 account and go to Applications \u2192 select the subhead Applications \u2192 Click Create Application . (Please create an account if you don\u2019t have one on Auth0 ). From the available options, select Regular Web Applications . {% hint style=\"info\" %} The default name of the application is My App . You can change it to give a suitable name to the application. Your application will be created, and you\u2019ll be navigated to the Application details page. Go to the Settings tab. Scroll down to the Application URIs section. Add the Redirect URL ( Copied from Appsmith SAML Configuration Redirect URL Field ) to the Allowed Callback URLs field. Click Save Changes","title":"Create Application"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/auth0/#configure-auth0-saml-fields-in-appsmith","text":"To complete the SAML configuration, you\u2019ll have to register the identity provider on Appsmith.","title":"Configure Auth0 SAML Fields in Appsmith"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/auth0/#register-identity-provider","text":"Appsmith provides the below options using which you can register the identity provider on Appsmith and complete the SAML Configuration. Follow the one that best suits you:","title":"Register Identity Provider"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/auth0/#metadata-url","text":"SAML metadata is an XML document that provides information required for interaction with a SAML-enabled identity or service provider. The Metadata URL is the URL metadata for SAML configuration hosted on a remote server. {% hint style=\"info\" %} Metadata URL is the quickest and most recommended way to set up SAML . To obtain the Metadata URL , navigate to the Settings tab, scroll down and expand the Advanced Settings. Click on the Endpoints , scroll down to the SAML config fields, and copy the SAML Metadata URL. Navigate to Appsmith, add the Metadata URL and click SAVE & RESTART button to save the configuration.","title":"Metadata URL"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/auth0/#xml","text":"If you don\u2019t have a Metadata URL but have a raw SAML metadata XML document, you can choose XML to configure SAML. Navigate to Appsmith, click XML, add the raw XML in the Metadata XML field and click the SAVE & RESTART button to save the configuration.","title":"XML"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/auth0/#idp-data","text":"You can also configure SAML by providing the identity provider(IdP) data. If you have Identity provider\u2019s data like X509 Public Certificate , Email , and more, you can choose this option to configure SAML. Navigate to Appsmith, and click IdP Data . You can get the information from Metadata XML and add the content of the tags as per the below mapping table: Appsmith Field Name Metadata XML Tag Entity ID <EntityDescriptor`` `` entityID =\"urn:dev-ux0tussx.us.auth0.com\" / > Single Sign-On URL <SingleSignOnService/> X509 Public Certificate <X509Certificate/> Email <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format: emailAddress </NameIDFormat> Once you have supplied the details, click the SAVE & RESTART button to save the configuration.","title":"IdP Data"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/auth0/#complete-the-saml-configuration","text":"Once the server restarts with new configurations, you will see a screen showing the message \u2018 Authentication Successful!\u2019 . You\u2019ll see a login screen with the button SIGN IN WITH SAML SSO .","title":"Complete the SAML Configuration"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/okta/","text":"Okta \u00b6 Okta, an Identity-as-a-Service (IDaaS) provider, supports authentication using Secure Assertion Markup Language (SAML). You can use SAML as an authentication type on Appsmith and configure the setup to use Okta as an identity provider. {% hint style=\"info\" %} Security Assertion Markup Language (SAML) is available only in the enterprise edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up SAML . Create App Integration \u00b6 Log in to your Okta Developer Account and navigate to Applications >> Applications >> Click Create App Integration . {% embed url=\" https://youtu.be/4Tj2OEV-r10 \" %} How to create an app integration? Choose SAML as the Sign-in method and click Next . Use this screen to configure a meaningful name and logo for your application, and click Next . On the next screen, provide details as per the below mapping table, and then click Next . On the next screen, select details as per the below mapping table, and click Finish. Field Appsmith SAML Configuration Field Okta SAML Configuration Redirect URL Single sign-on URL Entity URL Audience URI (SP Entity ID) Name ID Format Select Email Address Application Username Email You\u2019ll see that the app integration is created on Okta. Navigate to Appsmith to configure the SAML fields and complete the configuration. Configure Okta SAML fields in Appsmith \u00b6 To complete the SAML setup, you\u2019ll have to register Okta as a provider on the Appsmith platform. Follow the instructions listed below to complete this step: Register Identity Provider \u00b6 There are several ways to register the identity provider on Appsmith and complete the SAML Configuration. Follow the one that best suits you: Metadata URL \u00b6 SAML metadata is an XML document that provides information required for interaction with a SAML-enabled identity or service provider. The Metadata URL is the URL metadata for SAML configuration hosted on a remote server. {% hint style=\"info\" %} Metadata URL is the quickest and most recommended way to set up SAML . Navigate to Applications >> Applications >> Application Name (SAMLAppsmithIntegration) >> Click on tab Sign On >> Scroll down to SAML configuration instructions >> Click Identity Provider Metadata link to open the metadata in a browser tab >> Copy the URL from address bar. Navigate to Appsmith, add the Metadata URL and click SAVE & RESTART button to save the configuration. XML \u00b6 If you don\u2019t have a Metadata URL but have a raw SAML metadata XML document, you can choose XML to configure SAML. Navigate to Appsmith, click XML, add the raw XML in the Metadata XML field and click the SAVE & RESTART button to save the configuration. IdP Data \u00b6 You can also configure SAML by providing the identity provider(IdP) data. If you have Identity provider\u2019s data like X509 Public Certificate, Email, and more, you can choose this option to configure SAML. Navigate to Applications >> Applications >> Application Name (SAMLAppsmithIntegration) >> Click on tab Sign On >> Scroll down to SAML 2.0 >> Click View Setup Instructions The Setup Instructions screen opens up in a new browser tab. Add the content of the tags as per the below mapping table on the Appsmith platform: Appsmith Field Name Metadata XML Tag Entity ID Identity Provider Issuer Single Sign On URL Identity Provider Single Sign-On URL X509 Public Certificate X.509 Certificate Email \\ urn:oasis:names:tc:SAML:1.1:nameid-format: emailAddress \\ Once you have supplied the details, click the SAVE & RESTART button to save the configuration. Complete the SAML Configuration \u00b6 Once the server restarts with new configurations, you will see a screen showing the message \u2018Authentication Successful!\u2019. You\u2019ll see a login screen with a button SIGN IN WITH SAML SSO .","title":"Okta"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/okta/#okta","text":"Okta, an Identity-as-a-Service (IDaaS) provider, supports authentication using Secure Assertion Markup Language (SAML). You can use SAML as an authentication type on Appsmith and configure the setup to use Okta as an identity provider. {% hint style=\"info\" %} Security Assertion Markup Language (SAML) is available only in the enterprise edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up SAML .","title":"Okta"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/okta/#create-app-integration","text":"Log in to your Okta Developer Account and navigate to Applications >> Applications >> Click Create App Integration . {% embed url=\" https://youtu.be/4Tj2OEV-r10 \" %} How to create an app integration? Choose SAML as the Sign-in method and click Next . Use this screen to configure a meaningful name and logo for your application, and click Next . On the next screen, provide details as per the below mapping table, and then click Next . On the next screen, select details as per the below mapping table, and click Finish. Field Appsmith SAML Configuration Field Okta SAML Configuration Redirect URL Single sign-on URL Entity URL Audience URI (SP Entity ID) Name ID Format Select Email Address Application Username Email You\u2019ll see that the app integration is created on Okta. Navigate to Appsmith to configure the SAML fields and complete the configuration.","title":"Create App Integration"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/okta/#configure-okta-saml-fields-in-appsmith","text":"To complete the SAML setup, you\u2019ll have to register Okta as a provider on the Appsmith platform. Follow the instructions listed below to complete this step:","title":"Configure Okta SAML fields in Appsmith"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/okta/#register-identity-provider","text":"There are several ways to register the identity provider on Appsmith and complete the SAML Configuration. Follow the one that best suits you:","title":"Register Identity Provider"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/okta/#metadata-url","text":"SAML metadata is an XML document that provides information required for interaction with a SAML-enabled identity or service provider. The Metadata URL is the URL metadata for SAML configuration hosted on a remote server. {% hint style=\"info\" %} Metadata URL is the quickest and most recommended way to set up SAML . Navigate to Applications >> Applications >> Application Name (SAMLAppsmithIntegration) >> Click on tab Sign On >> Scroll down to SAML configuration instructions >> Click Identity Provider Metadata link to open the metadata in a browser tab >> Copy the URL from address bar. Navigate to Appsmith, add the Metadata URL and click SAVE & RESTART button to save the configuration.","title":"Metadata URL"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/okta/#xml","text":"If you don\u2019t have a Metadata URL but have a raw SAML metadata XML document, you can choose XML to configure SAML. Navigate to Appsmith, click XML, add the raw XML in the Metadata XML field and click the SAVE & RESTART button to save the configuration.","title":"XML"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/okta/#idp-data","text":"You can also configure SAML by providing the identity provider(IdP) data. If you have Identity provider\u2019s data like X509 Public Certificate, Email, and more, you can choose this option to configure SAML. Navigate to Applications >> Applications >> Application Name (SAMLAppsmithIntegration) >> Click on tab Sign On >> Scroll down to SAML 2.0 >> Click View Setup Instructions The Setup Instructions screen opens up in a new browser tab. Add the content of the tags as per the below mapping table on the Appsmith platform: Appsmith Field Name Metadata XML Tag Entity ID Identity Provider Issuer Single Sign On URL Identity Provider Single Sign-On URL X509 Public Certificate X.509 Certificate Email \\ urn:oasis:names:tc:SAML:1.1:nameid-format: emailAddress \\ Once you have supplied the details, click the SAVE & RESTART button to save the configuration.","title":"IdP Data"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/okta/#complete-the-saml-configuration","text":"Once the server restarts with new configurations, you will see a screen showing the message \u2018Authentication Successful!\u2019. You\u2019ll see a login screen with a button SIGN IN WITH SAML SSO .","title":"Complete the SAML Configuration"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/ping-identity/","text":"Ping Identity \u00b6 Ping Identity (PingID) is the identity as a security platform provider. It is a cloud-based authentication service provider and supports Security Assertion Markup Language (SAML). You can use Appsmith to integrate with Ping Identity using SAML configuration for authentication. {% hint style=\"info\" %} Security Assertion Markup Language (SAML) is available only in the enterprise edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up SAML . Create Environment \u00b6 Log into your PingOne account. (Please create an account if you don\u2019t have one). On the dashboard, you can see the Home menu, click on home and see the environment listing. Click on the Add Environment button. Click on the Build your own Solution, select PingOne SSO , and click Next . Create Application \u00b6 Click on the Connections available on the left sidebar and click Applications . Create a new application by clicking on (+) . Fill in the details: Name - Provide a meaningful name Description - Provide a description Select Application Type as SAML Application. Click Save, and you\u2019ll see a configuration overlay and Configure button. Click on Configure button to complete the SAML configuration. You can choose one of the available options to configure SAML. {% embed url=\" https://youtu.be/iMAOqRo2KuI \" %} How to Configure SAML For Ping Identity as IdP? Configure SAML \u00b6 Ping Identity provides several ways to set up SAML integration. For configuring integration with Appsmith, select Manually Enter for Provide Metadata . Add the details as per the below mapping: Add Redirect URL (available on Appsmith) to ACS URLs field. Add Entity URL (available on Appsmith) to the Entity ID field. Click Save to create an application with SAML Configuration. You\u2019ll see the application is created with SAML configuration as below Configure Ping Identity Fields in Appsmith \u00b6 To complete the SAML setup, you\u2019ll have to register PingID as a provider on the Appsmith platform. Follow the instructions listed below to complete this step: Register Identity Provider \u00b6 There are many ways to register the identity provider on Appsmith and complete the SAML Configuration. Navigate to Admin Settings >> Authentication >> Click Enable. Choose the one that best suits you: Metadata URL \u00b6 SAML metadata is an XML document that provides information required for interaction with a SAML-enabled identity or service provider. The Metadata URL is the URL metadata for SAML configuration hosted on a remote server. {% hint style=\"info\" %} Metadata URL is the quickest and most recommended way to set up SAML . Navigate to Environment >> Select Environment_Name >> Click Connections >> Select Application_Name >> Click Configuration Tab >> copy IDP Metadata URL. Add the copied IDP Metadata URL to the Metadata URL field on Appsmith and click SAVE & RESTART button to save the configuration. XML \u00b6 If you don\u2019t have a Metadata URL but have a raw SAML Metadata XML document, you can choose XML to configure SAML. Click XML , add the raw XML in the Metadata XML field, and click the SAVE & RESTART button to save the configuration. IdP Data \u00b6 You can also configure SAML by providing the identity provider(IdP) data. If you have Identity provider\u2019s data like X509 Public Certificate, Email, and more, you can choose this option to configure SAML. Navigate to Environment >> Select Environment_Name >> Click Connections >> Select Application_Name >> Click Configuration Tab >> Click Download Metadata . Add the content of the tags as per the below mapping table on the Appsmith platform: Appsmith Field Name Metadata XML Tag Entity ID \\ entityID attribute Single Sign-On URL \\ Location attribute X509 Public Certificate \\ Email \\ Complete the SAML Configuration \u00b6 Once the server restarts with new configurations, you will see a screen showing the message \u2018Authentication Successful!\u2019. You\u2019ll see a login screen with the button SIGN IN WITH SAML SSO .","title":"Ping Identity"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/ping-identity/#ping-identity","text":"Ping Identity (PingID) is the identity as a security platform provider. It is a cloud-based authentication service provider and supports Security Assertion Markup Language (SAML). You can use Appsmith to integrate with Ping Identity using SAML configuration for authentication. {% hint style=\"info\" %} Security Assertion Markup Language (SAML) is available only in the enterprise edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up SAML .","title":"Ping Identity"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/ping-identity/#create-environment","text":"Log into your PingOne account. (Please create an account if you don\u2019t have one). On the dashboard, you can see the Home menu, click on home and see the environment listing. Click on the Add Environment button. Click on the Build your own Solution, select PingOne SSO , and click Next .","title":"Create Environment"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/ping-identity/#create-application","text":"Click on the Connections available on the left sidebar and click Applications . Create a new application by clicking on (+) . Fill in the details: Name - Provide a meaningful name Description - Provide a description Select Application Type as SAML Application. Click Save, and you\u2019ll see a configuration overlay and Configure button. Click on Configure button to complete the SAML configuration. You can choose one of the available options to configure SAML. {% embed url=\" https://youtu.be/iMAOqRo2KuI \" %} How to Configure SAML For Ping Identity as IdP?","title":"Create Application"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/ping-identity/#configure-saml","text":"Ping Identity provides several ways to set up SAML integration. For configuring integration with Appsmith, select Manually Enter for Provide Metadata . Add the details as per the below mapping: Add Redirect URL (available on Appsmith) to ACS URLs field. Add Entity URL (available on Appsmith) to the Entity ID field. Click Save to create an application with SAML Configuration. You\u2019ll see the application is created with SAML configuration as below","title":"Configure SAML"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/ping-identity/#configure-ping-identity-fields-in-appsmith","text":"To complete the SAML setup, you\u2019ll have to register PingID as a provider on the Appsmith platform. Follow the instructions listed below to complete this step:","title":"Configure Ping Identity Fields in Appsmith"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/ping-identity/#register-identity-provider","text":"There are many ways to register the identity provider on Appsmith and complete the SAML Configuration. Navigate to Admin Settings >> Authentication >> Click Enable. Choose the one that best suits you:","title":"Register Identity Provider"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/ping-identity/#metadata-url","text":"SAML metadata is an XML document that provides information required for interaction with a SAML-enabled identity or service provider. The Metadata URL is the URL metadata for SAML configuration hosted on a remote server. {% hint style=\"info\" %} Metadata URL is the quickest and most recommended way to set up SAML . Navigate to Environment >> Select Environment_Name >> Click Connections >> Select Application_Name >> Click Configuration Tab >> copy IDP Metadata URL. Add the copied IDP Metadata URL to the Metadata URL field on Appsmith and click SAVE & RESTART button to save the configuration.","title":"Metadata URL"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/ping-identity/#xml","text":"If you don\u2019t have a Metadata URL but have a raw SAML Metadata XML document, you can choose XML to configure SAML. Click XML , add the raw XML in the Metadata XML field, and click the SAVE & RESTART button to save the configuration.","title":"XML"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/ping-identity/#idp-data","text":"You can also configure SAML by providing the identity provider(IdP) data. If you have Identity provider\u2019s data like X509 Public Certificate, Email, and more, you can choose this option to configure SAML. Navigate to Environment >> Select Environment_Name >> Click Connections >> Select Application_Name >> Click Configuration Tab >> Click Download Metadata . Add the content of the tags as per the below mapping table on the Appsmith platform: Appsmith Field Name Metadata XML Tag Entity ID \\ entityID attribute Single Sign-On URL \\ Location attribute X509 Public Certificate \\ Email \\","title":"IdP Data"},{"location":"Getting%20Started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/ping-identity/#complete-the-saml-configuration","text":"Once the server restarts with new configurations, you will see a screen showing the message \u2018Authentication Successful!\u2019. You\u2019ll see a login screen with the button SIGN IN WITH SAML SSO .","title":"Complete the SAML Configuration"},{"location":"Getting%20Started/setup/instance-configuration/custom-domain/","text":"SSL & Custom Domain \u00b6 You can easily make Appsmith available on a custom domain by updating your domain's DNS records to point to the instance running Appsmith. Most domain registrars / DNS providers have documentation on how you can do this yourself. GoDaddy Amazon Route 53 Digital Ocean NameCheap Domain.com Setting up SSL \u00b6 SSL will automatically set up for your instance once you configure a custom domain for your instance. All SSL certificates Appsmith creates are generated and kept up to date through Let's Encrypt . Custom SSL Certificate \u00b6 In our container, we support to generate a free SSL certificate If you have your owned certificate, please follow these steps to use it inside the container. Firstly, please rename your certificate file as fullchain.pem and key file as privkey.pem Copy these files into the sub-directory <mounting-directory>/ssl/ ( Note: Please change <mounting-directory> by the mounting volume directory in the docker-compose.yml . Default is ./stacks ) Restart the container using docker restart appsmith The container will check the certificate files in the folder <mounting-directory>/ssl and use them if they exist. {% hint style=\"warning\" %} In case the certificate files have a different name from fullchain.pem and privkey.pem , it will be considered as missing custom certificate and auto-provisioning the certificate by Let's Encrypt Docker/K8s \u00b6 After configuring your custom domain as above, getting HTTPS support is super easy. Just tell Appsmith about the custom domain and you are on. Configure the APPSMITH_CUSTOM_DOMAIN field in your instance configuration with your custom domain # Example Docker Configuration APPSMITH_CUSTOM_DOMAIN=appsmith.mydomain.com Restart the appsmith container . {% hint style=\"info\" %} Please ensure port 80 on your server is open and accessible from the Internet for the HTTPS certificate to be provisioned. AWS AMI \u00b6 Once your instance is ready, connect to that instance (via SSH) using your key pair (Create in step 2) and the public IP of your instance (Created in step 4) via the terminal or any SSH Client that you have Move to /home/ubuntu/appsmith/stacks/configuration folder Edit the docker.env file here and change the value of APPSMITH_CUSTOM_DOMAIN variable to your custom domain. For example: APPSMITH_CUSTOM_DOMAIN=appsmith.mydomain.com * Now restart your instance using docker-compose restart appsmith . This will provision the SSL certificate automatically before starting the server. At this point, you should be able to browse to the cloud server by entering your custom domain directly into your browser's address bar with HTTPS. {% hint style=\"info\" %} Please ensure port 80 on your server is open and accessible from the Internet for the HTTPS certificate to be provisioned. Heroku \u00b6 Go to the Settings tab in your Heroku app Click the Add domain button in the Domains section Input your domain name & click Next . Heroku will provide you with a DNS target that you can map your domain with. Go to your DNS provider and make sure that your custom DNS Record (Ex. appsmith.yourcompany.com ) is updated to map to the DNS Target {% hint style=\"warning\" %} * Once you use a custom domain, You might want to set up SSL for your dyno. Please check the official document of Heroku how to configure SSL * Your dyno will need to be upgraded to at least \" Hobby\" type to use this feature of Heroku DigitalOcean \u00b6 To host the Appsmith DigitalOcean droplet on a custom domain, you'll need to select the Add a domain option from the dashboard. It redirects you to a new page. Add your domain name there. Once that's done, it'll give you records of the name servers. Copy the details of the NS (name servers). Use the custom name server's configuration on your domain provider. Sometimes, it might take up to 24-48 hours for this to go live! {% hint style=\"success\" %} Your Appsmith instance should be available at https://appsmith.mydomain.com with automatic certificate provisioning and renewals.","title":"SSL & Custom Domain"},{"location":"Getting%20Started/setup/instance-configuration/custom-domain/#ssl-custom-domain","text":"You can easily make Appsmith available on a custom domain by updating your domain's DNS records to point to the instance running Appsmith. Most domain registrars / DNS providers have documentation on how you can do this yourself. GoDaddy Amazon Route 53 Digital Ocean NameCheap Domain.com","title":"SSL &amp; Custom Domain"},{"location":"Getting%20Started/setup/instance-configuration/custom-domain/#setting-up-ssl","text":"SSL will automatically set up for your instance once you configure a custom domain for your instance. All SSL certificates Appsmith creates are generated and kept up to date through Let's Encrypt .","title":"Setting up SSL"},{"location":"Getting%20Started/setup/instance-configuration/custom-domain/#custom-ssl-certificate","text":"In our container, we support to generate a free SSL certificate If you have your owned certificate, please follow these steps to use it inside the container. Firstly, please rename your certificate file as fullchain.pem and key file as privkey.pem Copy these files into the sub-directory <mounting-directory>/ssl/ ( Note: Please change <mounting-directory> by the mounting volume directory in the docker-compose.yml . Default is ./stacks ) Restart the container using docker restart appsmith The container will check the certificate files in the folder <mounting-directory>/ssl and use them if they exist. {% hint style=\"warning\" %} In case the certificate files have a different name from fullchain.pem and privkey.pem , it will be considered as missing custom certificate and auto-provisioning the certificate by Let's Encrypt","title":"Custom SSL Certificate"},{"location":"Getting%20Started/setup/instance-configuration/custom-domain/#dockerk8s","text":"After configuring your custom domain as above, getting HTTPS support is super easy. Just tell Appsmith about the custom domain and you are on. Configure the APPSMITH_CUSTOM_DOMAIN field in your instance configuration with your custom domain # Example Docker Configuration APPSMITH_CUSTOM_DOMAIN=appsmith.mydomain.com Restart the appsmith container . {% hint style=\"info\" %} Please ensure port 80 on your server is open and accessible from the Internet for the HTTPS certificate to be provisioned.","title":"Docker/K8s"},{"location":"Getting%20Started/setup/instance-configuration/custom-domain/#aws-ami","text":"Once your instance is ready, connect to that instance (via SSH) using your key pair (Create in step 2) and the public IP of your instance (Created in step 4) via the terminal or any SSH Client that you have Move to /home/ubuntu/appsmith/stacks/configuration folder Edit the docker.env file here and change the value of APPSMITH_CUSTOM_DOMAIN variable to your custom domain. For example: APPSMITH_CUSTOM_DOMAIN=appsmith.mydomain.com * Now restart your instance using docker-compose restart appsmith . This will provision the SSL certificate automatically before starting the server. At this point, you should be able to browse to the cloud server by entering your custom domain directly into your browser's address bar with HTTPS. {% hint style=\"info\" %} Please ensure port 80 on your server is open and accessible from the Internet for the HTTPS certificate to be provisioned.","title":"AWS AMI"},{"location":"Getting%20Started/setup/instance-configuration/custom-domain/#heroku","text":"Go to the Settings tab in your Heroku app Click the Add domain button in the Domains section Input your domain name & click Next . Heroku will provide you with a DNS target that you can map your domain with. Go to your DNS provider and make sure that your custom DNS Record (Ex. appsmith.yourcompany.com ) is updated to map to the DNS Target {% hint style=\"warning\" %} * Once you use a custom domain, You might want to set up SSL for your dyno. Please check the official document of Heroku how to configure SSL * Your dyno will need to be upgraded to at least \" Hobby\" type to use this feature of Heroku","title":"Heroku"},{"location":"Getting%20Started/setup/instance-configuration/custom-domain/#digitalocean","text":"To host the Appsmith DigitalOcean droplet on a custom domain, you'll need to select the Add a domain option from the dashboard. It redirects you to a new page. Add your domain name there. Once that's done, it'll give you records of the name servers. Copy the details of the NS (name servers). Use the custom name server's configuration on your domain provider. Sometimes, it might take up to 24-48 hours for this to go live! {% hint style=\"success\" %} Your Appsmith instance should be available at https://appsmith.mydomain.com with automatic certificate provisioning and renewals.","title":"DigitalOcean"},{"location":"Getting%20Started/setup/instance-configuration/custom-domain/custom-ca-root-certificate/","text":"Custom CA Root Certificate \u00b6 You can install custom CA root certificates in your Appsmith container. It is useful when: You interact with internal endpoints that use private SSL certificates via Appsmith without disabling SSL verification. If you have your Appsmith instance behind a firewall or a proxy, that requires SSL decryption. Setup Custom CA Root Folder \u00b6 You can easily do this: By creating a ca-certs folder in your stacks folder Saving all the CA root certificates in the ca-certs folder Restart Appsmith {% hint style=\"info\" %} If your cert file has a .pem extension, rename it to .crt. You should add it in the stacks/ca-certs folder so that it will be picked up. Appsmith will check the ca-certs folder for CA root certificates and apply them on startup. {% hint style=\"info\" %} If you remove a certificate from the ca-certs folder, it'll also be removed from the trust store and won't be trusted anymore.","title":"Custom CA Root Certificate"},{"location":"Getting%20Started/setup/instance-configuration/custom-domain/custom-ca-root-certificate/#custom-ca-root-certificate","text":"You can install custom CA root certificates in your Appsmith container. It is useful when: You interact with internal endpoints that use private SSL certificates via Appsmith without disabling SSL verification. If you have your Appsmith instance behind a firewall or a proxy, that requires SSL decryption.","title":"Custom CA Root Certificate"},{"location":"Getting%20Started/setup/instance-configuration/custom-domain/custom-ca-root-certificate/#setup-custom-ca-root-folder","text":"You can easily do this: By creating a ca-certs folder in your stacks folder Saving all the CA root certificates in the ca-certs folder Restart Appsmith {% hint style=\"info\" %} If your cert file has a .pem extension, rename it to .crt. You should add it in the stacks/ca-certs folder so that it will be picked up. Appsmith will check the ca-certs folder for CA root certificates and apply them on startup. {% hint style=\"info\" %} If you remove a certificate from the ca-certs folder, it'll also be removed from the trust store and won't be trusted anymore.","title":"Setup Custom CA Root Folder"},{"location":"Getting%20Started/setup/instance-configuration/email/","text":"Email \u00b6 Email is a widely used service to communicate with your users. You can set up email integration on your Appsmith instance to: Invite users to your Appsmith workspace Notify admins of important events & approval requests Appsmith allows you to configure email using environment variables or the admin settings . Configure using Environment Variables \u00b6 Appsmith requires the following environment variables to be configured: {% hint style=\"warning\" %} You could start with email configuration after following the Instance Configuration Guide for your instance deployment. Variable Description APPSMITH_MAIL_ENABLED Set it to true to enable the email service. APPSMITH_MAIL_FROM Set it to the verified email of the sender. APPSMITH_REPLY_TO Set it to the email that should receive replies by default. APPSMITH_MAIL_HOST Set it to the SMTP Host of the email service provider. APPSMITH_MAIL_PORT Set it to the SMTP Port available for the email service provider. APPSMITH_MAIL_SMTP_TLS_ENABLED Enables transport layer security if set to true. APPSMITH_MAIL_SMTP_AUTH Set it to true to share the credentials ( APPSMITH_MAIL_USERNAME **** and **** APPSMITH_MAIL_PASSWORD ) with the SMTP server. APPSMITH_MAIL_USERNAME Set it to the username for accessing the SMTP service provider. APPSMITH_MAIL_PASSWORD Set it to the password for the SMTP user. You can also set it to the API key generated by the email service provider for the SMTP user. {% hint style=\"success\" %} Restart the Appsmith instance once the environment variables are configured. Configure using Admin Settings \u00b6 You can configure the email for your self-hosted instance using the Admin Settings page. Follow the below steps: Navigate to profile >> Admin Settings >> Select Email. Add configuration details provided by your email service provider. SMTP Host - SMTP host of your email service provider SMTP Port - SMTP port of your email service provider From Address - a verified email address that will be shown in the from field when users receive an email TLS Protected Connection - Bey default is enabled. Toggle back to disable SMTP Username - Add the username for your email service provider SMTP Password - Add the password for your email service provider Click the SAVE & RESTART button to save the configurations and restart the Appsmith instance. {% hint style=\"success\" %} Once your instance is restarted, you can use the SEND TEST EMAIL button to send a test email. Configuration Guides \u00b6 Follow the below guides to configure popular email service providers: {% content-ref url=\"sendgrid.md\" %} sendgrid.md {% content-ref url=\"amazon-ses.md\" %} amazon-ses.md","title":"Email"},{"location":"Getting%20Started/setup/instance-configuration/email/#email","text":"Email is a widely used service to communicate with your users. You can set up email integration on your Appsmith instance to: Invite users to your Appsmith workspace Notify admins of important events & approval requests Appsmith allows you to configure email using environment variables or the admin settings .","title":"Email"},{"location":"Getting%20Started/setup/instance-configuration/email/#configure-using-environment-variables","text":"Appsmith requires the following environment variables to be configured: {% hint style=\"warning\" %} You could start with email configuration after following the Instance Configuration Guide for your instance deployment. Variable Description APPSMITH_MAIL_ENABLED Set it to true to enable the email service. APPSMITH_MAIL_FROM Set it to the verified email of the sender. APPSMITH_REPLY_TO Set it to the email that should receive replies by default. APPSMITH_MAIL_HOST Set it to the SMTP Host of the email service provider. APPSMITH_MAIL_PORT Set it to the SMTP Port available for the email service provider. APPSMITH_MAIL_SMTP_TLS_ENABLED Enables transport layer security if set to true. APPSMITH_MAIL_SMTP_AUTH Set it to true to share the credentials ( APPSMITH_MAIL_USERNAME **** and **** APPSMITH_MAIL_PASSWORD ) with the SMTP server. APPSMITH_MAIL_USERNAME Set it to the username for accessing the SMTP service provider. APPSMITH_MAIL_PASSWORD Set it to the password for the SMTP user. You can also set it to the API key generated by the email service provider for the SMTP user. {% hint style=\"success\" %} Restart the Appsmith instance once the environment variables are configured.","title":"Configure using Environment Variables"},{"location":"Getting%20Started/setup/instance-configuration/email/#configure-using-admin-settings","text":"You can configure the email for your self-hosted instance using the Admin Settings page. Follow the below steps: Navigate to profile >> Admin Settings >> Select Email. Add configuration details provided by your email service provider. SMTP Host - SMTP host of your email service provider SMTP Port - SMTP port of your email service provider From Address - a verified email address that will be shown in the from field when users receive an email TLS Protected Connection - Bey default is enabled. Toggle back to disable SMTP Username - Add the username for your email service provider SMTP Password - Add the password for your email service provider Click the SAVE & RESTART button to save the configurations and restart the Appsmith instance. {% hint style=\"success\" %} Once your instance is restarted, you can use the SEND TEST EMAIL button to send a test email.","title":"Configure using Admin Settings"},{"location":"Getting%20Started/setup/instance-configuration/email/#configuration-guides","text":"Follow the below guides to configure popular email service providers: {% content-ref url=\"sendgrid.md\" %} sendgrid.md {% content-ref url=\"amazon-ses.md\" %} amazon-ses.md","title":"Configuration Guides&#x20;"},{"location":"Getting%20Started/setup/instance-configuration/email/amazon-ses/","text":"Amazon SES \u00b6 To configure Amazon SES as your SMTP server, create an account & login to the AWS console. 1. Navigate to the SES section & SMTP setting page 2. Copy the SMTP configuration & Create new SMTP Credentials 3. Create an IAM user 4. Copy the generated username & password 5. Verify the email address via which Appsmith should send and receive emails {% hint style=\"warning\" %} You can also configure the email service provider using Admin settings . 6. Update the values in your Instance Configuration {% hint style=\"danger\" %} Do not use port 465 listed on the SES page because it is TLS enabled by default # Example docker configuration # ***** Email ********** APPSMITH_MAIL_ENABLED=true APPSMITH_MAIL_FROM=YOUR_VERIFIED_EMAIL_ID APPSMITH_REPLY_TO=YOUR_VERIFIED_EMAIL_ID APPSMITH_MAIL_HOST=email-smtp.us-east-2.amazonaws.com APPSMITH_MAIL_PORT=587 # ***** Set to true if providing a TLS port ****** APPSMITH_MAIL_SMTP_TLS_ENABLED=true APPSMITH_MAIL_USERNAME=YOUR_SES_USER_NAME APPSMITH_MAIL_PASSWORD=YOUR_SES_PASSWORD APPSMITH_MAIL_SMTP_AUTH=true # ****************************** {% hint style=\"info\" %} Your email service should now be configured correctly. Read more about setting up email with SES. 7. Restart the Appsmith Instance {% hint style=\"warning\" %} If you have created a new amazon SES account, your account will be sandboxed and will be unable to send emails to unverified email Ids. Read more on how to request production access","title":"Amazon SES"},{"location":"Getting%20Started/setup/instance-configuration/email/amazon-ses/#amazon-ses","text":"To configure Amazon SES as your SMTP server, create an account & login to the AWS console. 1. Navigate to the SES section & SMTP setting page 2. Copy the SMTP configuration & Create new SMTP Credentials 3. Create an IAM user 4. Copy the generated username & password 5. Verify the email address via which Appsmith should send and receive emails {% hint style=\"warning\" %} You can also configure the email service provider using Admin settings . 6. Update the values in your Instance Configuration {% hint style=\"danger\" %} Do not use port 465 listed on the SES page because it is TLS enabled by default # Example docker configuration # ***** Email ********** APPSMITH_MAIL_ENABLED=true APPSMITH_MAIL_FROM=YOUR_VERIFIED_EMAIL_ID APPSMITH_REPLY_TO=YOUR_VERIFIED_EMAIL_ID APPSMITH_MAIL_HOST=email-smtp.us-east-2.amazonaws.com APPSMITH_MAIL_PORT=587 # ***** Set to true if providing a TLS port ****** APPSMITH_MAIL_SMTP_TLS_ENABLED=true APPSMITH_MAIL_USERNAME=YOUR_SES_USER_NAME APPSMITH_MAIL_PASSWORD=YOUR_SES_PASSWORD APPSMITH_MAIL_SMTP_AUTH=true # ****************************** {% hint style=\"info\" %} Your email service should now be configured correctly. Read more about setting up email with SES. 7. Restart the Appsmith Instance {% hint style=\"warning\" %} If you have created a new amazon SES account, your account will be sandboxed and will be unable to send emails to unverified email Ids. Read more on how to request production access","title":"Amazon SES"},{"location":"Getting%20Started/setup/instance-configuration/email/sendgrid/","text":"Sendgrid \u00b6 To configure Sendgrid as your SMTP server, create an account & login to Sendgrid. 1. Navigate to the Integration Section 2. Select the SMTP Relay integration option 3. Create a new API key and copy all the fields 4. Navigate to the Sendgrid Senders Section 5. Create a new sender identity from which emails will be sent {% hint style=\"warning\" %} You can also configure the email service provider using Admin settings . 6. Update the values in your instance configuration # Example docker configuration # ***** Email ********** APPSMITH_MAIL_ENABLED=true APPSMITH_MAIL_FROM=YOUR_SENDER_IDENTITY_EMAIL_ID APPSMITH_REPLY_TO=YOUR_SENDER_IDENTITY_EMAIL_ID APPSMITH_MAIL_HOST=smtp.sendgrid.net APPSMITH_MAIL_PORT=587 # ***** Set to true if providing a TLS port ****** APPSMITH_MAIL_SMTP_TLS_ENABLED=true APPSMITH_MAIL_USERNAME=apikey APPSMITH_MAIL_PASSWORD=YOUR_SENDGRID_API_KEY APPSMITH_MAIL_SMTP_AUTH=true # ****************************** 5. Restart the appsmith instance {% hint style=\"success\" %} Once you've verified your sender identity, your email service should be configured correctly","title":"Sendgrid"},{"location":"Getting%20Started/setup/instance-configuration/email/sendgrid/#sendgrid","text":"To configure Sendgrid as your SMTP server, create an account & login to Sendgrid. 1. Navigate to the Integration Section 2. Select the SMTP Relay integration option 3. Create a new API key and copy all the fields 4. Navigate to the Sendgrid Senders Section 5. Create a new sender identity from which emails will be sent {% hint style=\"warning\" %} You can also configure the email service provider using Admin settings . 6. Update the values in your instance configuration # Example docker configuration # ***** Email ********** APPSMITH_MAIL_ENABLED=true APPSMITH_MAIL_FROM=YOUR_SENDER_IDENTITY_EMAIL_ID APPSMITH_REPLY_TO=YOUR_SENDER_IDENTITY_EMAIL_ID APPSMITH_MAIL_HOST=smtp.sendgrid.net APPSMITH_MAIL_PORT=587 # ***** Set to true if providing a TLS port ****** APPSMITH_MAIL_SMTP_TLS_ENABLED=true APPSMITH_MAIL_USERNAME=apikey APPSMITH_MAIL_PASSWORD=YOUR_SENDGRID_API_KEY APPSMITH_MAIL_SMTP_AUTH=true # ****************************** 5. Restart the appsmith instance {% hint style=\"success\" %} Once you've verified your sender identity, your email service should be configured correctly","title":"Sendgrid"},{"location":"Getting%20Started/setup/instance-management/","text":"Instance Management \u00b6 Updating to the latest release \u00b6 You can perform a manual update of your Appsmith instance by running the following commands in the Appsmith installation directory. // To restart appsmith without docker compose docker pull appsmith/appsmith-ce && docker restart appsmith // To restart appsmith with docker compose docker-compose pull && docker-compose up -d --force-recreate appsmith Switching off auto-updates \u00b6 In your docker-compose.yml file, the auto_update container is responsible for periodically checking for updates to Appsmith and applying those updates. If you wish to disable this auto-updating, please run the following command: docker-compose rm -s -v -f auto_update This will bring down the auto_update container, and update checks are no-longer performed. Note that however, if you run docker-compose up -d later, for any reason, then this auto_update will be brought up again. You can use that to turn auto-updates on again in the future. To check if auto updates are turned on in your instance, please run docker-compose ps and see if there a server called auto_update listed in the output, and if it's status is Up . If not, then auto updates are turned off for your instance.","title":"Instance Management"},{"location":"Getting%20Started/setup/instance-management/#instance-management","text":"","title":"Instance Management"},{"location":"Getting%20Started/setup/instance-management/#updating-to-the-latest-release","text":"You can perform a manual update of your Appsmith instance by running the following commands in the Appsmith installation directory. // To restart appsmith without docker compose docker pull appsmith/appsmith-ce && docker restart appsmith // To restart appsmith with docker compose docker-compose pull && docker-compose up -d --force-recreate appsmith","title":"Updating to the latest release"},{"location":"Getting%20Started/setup/instance-management/#switching-off-auto-updates","text":"In your docker-compose.yml file, the auto_update container is responsible for periodically checking for updates to Appsmith and applying those updates. If you wish to disable this auto-updating, please run the following command: docker-compose rm -s -v -f auto_update This will bring down the auto_update container, and update checks are no-longer performed. Note that however, if you run docker-compose up -d later, for any reason, then this auto_update will be brought up again. You can use that to turn auto-updates on again in the future. To check if auto updates are turned on in your instance, please run docker-compose ps and see if there a server called auto_update listed in the output, and if it's status is Up . If not, then auto updates are turned off for your instance.","title":"Switching off auto-updates"},{"location":"Getting%20Started/setup/instance-management/appsmithctl/","text":"Appsmithctl \u00b6 Appsmith comes with an appsmithctl command to help with the management and maintenance of your instance. Appsmithctl Command-Line Options \u00b6 Subcommand Description --help Show help. ex , export_db Export internal database. im , import_db Import internal database. mi , migrate Migrate to a new server. crs , check_replica_set Check Replica Set MongoDB. backup Create a backup of Appsmith instance. restore Restore Appsmith instance from a backup. Export Database \u00b6 The following command can be used to make a backup dump of Appsmith's database. This can be restored onto another instance using the import command (discussed below) to restore all data. ex , export_db \u00b6 Before running this, ensure you are in the directory where docker-compose.yml is located. docker-compose exec appsmith appsmithctl export_db The output file will be stored in the container directory /appsmith-stacks/data/backup/appsmith-data.archive . Thanks to the volume configuration in the docker-compose.yml file, it should be available on your host machine at ./stacks/data/backup/appsmith-data.archive . If your volume configuration is different or unavailable, you can use the following command to copy the archive file to your host disk: docker cp appsmith:/appsmith-stacks/data/backup/appsmith-data.archive . {% hint style=\"info\" %} You may want to save the docker.env file in addition to this archive file if you intend to be able to reproduce this environment elsewhere in case of a disaster, The docker.env file can be copied out of the container with the following command: docker cp appsmith:/appsmith-stacks/configuration/docker.env . Be sure to keep this file safe , since it contains information that can be used to decrypt datasource information from the database archive. Import Database \u00b6 The following command can restore the backup archive, that was produced by the export command (discussed above). im , import_db \u00b6 First, copy the archive file into the container using the following command: docker cp ./appsmith-data.archive appsmith:/appsmith-stacks/data/restore/ Second, run the following command to import data from this file: docker-compose exec appsmith appsmithctl import_db Note that when you restore, you may also want to copy a docker.env from the original instance into this one. You can use the following command to do this (assuming you are in the installation folder and docker.env exists in the same folder): docker cp ./docker.env appsmith:/appsmith-stacks/configuration/ This will need a restart of the Appsmith server, which can be done using the following command: docker-compose exec appsmith supervisorctl restart backend Backup Appsmith instance \u00b6 The following command can be used to create a backup archive of the Appsmith instance, which includes the database, docker.env data, and Git data. backup \u00b6 This archive can be used to restore an Appsmith instance to the backed-up state using the restore command. Before running this, ensure you are in the directory where docker-compose.yml is located (Docker host root Directory). docker-compose exec appsmith appsmithctl backup The archive file will be stored in the container directory /appsmith-stacks/data/backup/ . Thanks to the volume configuration in the docker-compose.yml file, it should be available on your host machine at ./stacks/data/backup/ {% hint style=\"danger\" %} Please save the encryption env values , APPSMITH_ENCRYPTION_PASSWORD and APPSMITH_ENCRYPTION_SALT from docker.env because the backup archive does not include them for security reasons. Restore Appsmith instance \u00b6 The following command can be used to restore an Appsmith instance from a backup archive. restore \u00b6 docker-compose exec appsmith appsmithctl restore The command first lists all the backup archives in the directory /appsmith-stacks/data/backup/ in ascending/chronological with the most recent backup archive located at the bottom. {% hint style=\"warning\" %} If you are restoring an instance with an older Appsmith version , then you may observe a warning . In this case, please follow the instructions to update the docker-compose.yml file with the correct Appsmith image corresponding to the instance to be restored . Enter the index of the corresponding backup archive you want to use to restore. In the restored instance, you have the option to use the existing encryption environment variables APPSMITH_ENCRYPTION_PASSWORD and APPSMITH_ENCRYPTION_SALT of the existing Appsmith instance, or you can manually input these values corresponding to the backed-up instance.","title":"Appsmithctl"},{"location":"Getting%20Started/setup/instance-management/appsmithctl/#appsmithctl","text":"Appsmith comes with an appsmithctl command to help with the management and maintenance of your instance.","title":"Appsmithctl"},{"location":"Getting%20Started/setup/instance-management/appsmithctl/#appsmithctl-command-line-options","text":"Subcommand Description --help Show help. ex , export_db Export internal database. im , import_db Import internal database. mi , migrate Migrate to a new server. crs , check_replica_set Check Replica Set MongoDB. backup Create a backup of Appsmith instance. restore Restore Appsmith instance from a backup.","title":"Appsmithctl Command-Line Options"},{"location":"Getting%20Started/setup/instance-management/appsmithctl/#export-database","text":"The following command can be used to make a backup dump of Appsmith's database. This can be restored onto another instance using the import command (discussed below) to restore all data.","title":"Export Database"},{"location":"Getting%20Started/setup/instance-management/appsmithctl/#ex-export_db","text":"Before running this, ensure you are in the directory where docker-compose.yml is located. docker-compose exec appsmith appsmithctl export_db The output file will be stored in the container directory /appsmith-stacks/data/backup/appsmith-data.archive . Thanks to the volume configuration in the docker-compose.yml file, it should be available on your host machine at ./stacks/data/backup/appsmith-data.archive . If your volume configuration is different or unavailable, you can use the following command to copy the archive file to your host disk: docker cp appsmith:/appsmith-stacks/data/backup/appsmith-data.archive . {% hint style=\"info\" %} You may want to save the docker.env file in addition to this archive file if you intend to be able to reproduce this environment elsewhere in case of a disaster, The docker.env file can be copied out of the container with the following command: docker cp appsmith:/appsmith-stacks/configuration/docker.env . Be sure to keep this file safe , since it contains information that can be used to decrypt datasource information from the database archive.","title":"ex, export_db"},{"location":"Getting%20Started/setup/instance-management/appsmithctl/#import-database","text":"The following command can restore the backup archive, that was produced by the export command (discussed above).","title":"Import Database"},{"location":"Getting%20Started/setup/instance-management/appsmithctl/#im-import_db","text":"First, copy the archive file into the container using the following command: docker cp ./appsmith-data.archive appsmith:/appsmith-stacks/data/restore/ Second, run the following command to import data from this file: docker-compose exec appsmith appsmithctl import_db Note that when you restore, you may also want to copy a docker.env from the original instance into this one. You can use the following command to do this (assuming you are in the installation folder and docker.env exists in the same folder): docker cp ./docker.env appsmith:/appsmith-stacks/configuration/ This will need a restart of the Appsmith server, which can be done using the following command: docker-compose exec appsmith supervisorctl restart backend","title":"im, import_db"},{"location":"Getting%20Started/setup/instance-management/appsmithctl/#backup-appsmith-instance","text":"The following command can be used to create a backup archive of the Appsmith instance, which includes the database, docker.env data, and Git data.","title":"Backup Appsmith instance"},{"location":"Getting%20Started/setup/instance-management/appsmithctl/#backup","text":"This archive can be used to restore an Appsmith instance to the backed-up state using the restore command. Before running this, ensure you are in the directory where docker-compose.yml is located (Docker host root Directory). docker-compose exec appsmith appsmithctl backup The archive file will be stored in the container directory /appsmith-stacks/data/backup/ . Thanks to the volume configuration in the docker-compose.yml file, it should be available on your host machine at ./stacks/data/backup/ {% hint style=\"danger\" %} Please save the encryption env values , APPSMITH_ENCRYPTION_PASSWORD and APPSMITH_ENCRYPTION_SALT from docker.env because the backup archive does not include them for security reasons.","title":"backup"},{"location":"Getting%20Started/setup/instance-management/appsmithctl/#restore-appsmith-instance","text":"The following command can be used to restore an Appsmith instance from a backup archive.","title":"Restore Appsmith instance"},{"location":"Getting%20Started/setup/instance-management/appsmithctl/#restore","text":"docker-compose exec appsmith appsmithctl restore The command first lists all the backup archives in the directory /appsmith-stacks/data/backup/ in ascending/chronological with the most recent backup archive located at the bottom. {% hint style=\"warning\" %} If you are restoring an instance with an older Appsmith version , then you may observe a warning . In this case, please follow the instructions to update the docker-compose.yml file with the correct Appsmith image corresponding to the instance to be restored . Enter the index of the corresponding backup archive you want to use to restore. In the restored instance, you have the option to use the existing encryption environment variables APPSMITH_ENCRYPTION_PASSWORD and APPSMITH_ENCRYPTION_SALT of the existing Appsmith instance, or you can manually input these values corresponding to the backed-up instance.","title":"restore"},{"location":"Getting%20Started/setup/instance-management/maintenance-window/","text":"Maintenance Window \u00b6 Adding a configurable maintenance window for Appsmith\u2019s auto-updates \u00b6 Checking for updates can be configured to run during a pre-specific maintenance window by specifying a cron expression to the --schedule argument in the auto_update container\u2019s command. Changes required \u00b6 Step 1 \u00b6 In the docker-compose.yml file, scroll to the configurations of the container with image containrrr/watchtower . It'll be named either auto_update or watchtower . This is what your configuration will look like auto_update: image: containrrr/watchtower volumes: - /var/run/docker.sock:/var/run/docker.sock # Checks for update every 5 mins because of --interval command: --interval 300 --label-enable --cleanup networks: - appsmith restart: always Step 2 \u00b6 In the command configuration, please remove the --interval argument and the value 300 next to it, and in it\u2019s place, add a --schedule and a cron expression defining an update interval of your choice. Your new configuration will look like below. auto_update: image: containrrr/watchtower volumes: - /var/run/docker.sock:/var/run/docker.sock # Check for updates every hour because of the cron schedule command: --schedule \"0 0 * ? * *\" --label-enable --cleanup networks: - appsmith restart: always \u2139\ufe0f Note that a 6-value cron expression is expected here, not the traditional 5-value one. For details on how the expression works, please refer to ( https://pkg.go.dev/github.com/robfig/cron@v1.2.0#hdr-CRON _Expression_Format) After making the changes restart the auto update container via the command below: # Use the container name as defined in your docker-compose.yml file. This command uses the name: auto_update sudo docker-compose pull && sudo docker-compose up --force-recreate auto_update Check the logs and see that the maintenance window is now in effect. docker-compose logs -f auto_update Example configurations for some common use cases \u00b6 Check for updates every Sunday at 12:00: command: --schedule \"0 0 12 ? * SUN\" --label-enable --cleanup Check for updates every hour: command: --schedule \"0 0 * ? * *\" --label-enable --cleanup Check for updates once at 12:00 everyday: command: --schedule \"0 0 12 * * ?\" --label-enable --cleanup References: \u00b6 Cron Generator tool Config Scheduler","title":"Maintenance Window"},{"location":"Getting%20Started/setup/instance-management/maintenance-window/#maintenance-window","text":"","title":"Maintenance Window"},{"location":"Getting%20Started/setup/instance-management/maintenance-window/#adding-a-configurable-maintenance-window-for-appsmiths-auto-updates","text":"Checking for updates can be configured to run during a pre-specific maintenance window by specifying a cron expression to the --schedule argument in the auto_update container\u2019s command.","title":"Adding a configurable maintenance window for Appsmith\u2019s auto-updates"},{"location":"Getting%20Started/setup/instance-management/maintenance-window/#changes-required","text":"","title":"Changes required"},{"location":"Getting%20Started/setup/instance-management/maintenance-window/#step-1","text":"In the docker-compose.yml file, scroll to the configurations of the container with image containrrr/watchtower . It'll be named either auto_update or watchtower . This is what your configuration will look like auto_update: image: containrrr/watchtower volumes: - /var/run/docker.sock:/var/run/docker.sock # Checks for update every 5 mins because of --interval command: --interval 300 --label-enable --cleanup networks: - appsmith restart: always","title":"Step 1"},{"location":"Getting%20Started/setup/instance-management/maintenance-window/#step-2","text":"In the command configuration, please remove the --interval argument and the value 300 next to it, and in it\u2019s place, add a --schedule and a cron expression defining an update interval of your choice. Your new configuration will look like below. auto_update: image: containrrr/watchtower volumes: - /var/run/docker.sock:/var/run/docker.sock # Check for updates every hour because of the cron schedule command: --schedule \"0 0 * ? * *\" --label-enable --cleanup networks: - appsmith restart: always \u2139\ufe0f Note that a 6-value cron expression is expected here, not the traditional 5-value one. For details on how the expression works, please refer to ( https://pkg.go.dev/github.com/robfig/cron@v1.2.0#hdr-CRON _Expression_Format) After making the changes restart the auto update container via the command below: # Use the container name as defined in your docker-compose.yml file. This command uses the name: auto_update sudo docker-compose pull && sudo docker-compose up --force-recreate auto_update Check the logs and see that the maintenance window is now in effect. docker-compose logs -f auto_update","title":"Step 2"},{"location":"Getting%20Started/setup/instance-management/maintenance-window/#example-configurations-for-some-common-use-cases","text":"Check for updates every Sunday at 12:00: command: --schedule \"0 0 12 ? * SUN\" --label-enable --cleanup Check for updates every hour: command: --schedule \"0 0 * ? * *\" --label-enable --cleanup Check for updates once at 12:00 everyday: command: --schedule \"0 0 12 * * ?\" --label-enable --cleanup","title":"Example configurations for some common use cases"},{"location":"Getting%20Started/setup/instance-management/maintenance-window/#references","text":"Cron Generator tool Config Scheduler","title":"References:"},{"location":"Getting%20Started/setup/instance-management/supervisor/","text":"Supervisor \u00b6 The container runs multiple processes, including the Appsmith server, Nginx, MongoDB, etc., inside a single Docker container. These processes are started and managed by Supervisor . Supervisor comes with a web interface for managing the various processes, available at http://localhost/supervisor , as well as a command-line interface towards the same goal. {% hint style=\"info\" %} The credentials for supervisor access is defined by the environment variables APPSMITH_SUPERVISOR_USER and APPSMITH_SUPERVISOR_PASSWORD in the stacks/configuration/docker.env file. Here's a screenshot of the web interface listing all the processes managed: The command-line interface can also be used to perform operations like restarting the Appsmith server, restarting Nginx, etc. For example, the following command (run in the installation folder) can be used to get the status of all running processes: docker-compose exec appsmith supervisorctl status Or to view the last few lines of stderr output of one of the processes: docker-compose exec appsmith supervisorctl tail backend stderr To learn more, please refer to Supervisor's documentation on what actions are available to be performed by the command-line interface.","title":"Supervisor"},{"location":"Getting%20Started/setup/instance-management/supervisor/#supervisor","text":"The container runs multiple processes, including the Appsmith server, Nginx, MongoDB, etc., inside a single Docker container. These processes are started and managed by Supervisor . Supervisor comes with a web interface for managing the various processes, available at http://localhost/supervisor , as well as a command-line interface towards the same goal. {% hint style=\"info\" %} The credentials for supervisor access is defined by the environment variables APPSMITH_SUPERVISOR_USER and APPSMITH_SUPERVISOR_PASSWORD in the stacks/configuration/docker.env file. Here's a screenshot of the web interface listing all the processes managed: The command-line interface can also be used to perform operations like restarting the Appsmith server, restarting Nginx, etc. For example, the following command (run in the installation folder) can be used to get the status of all running processes: docker-compose exec appsmith supervisorctl status Or to view the last few lines of stderr output of one of the processes: docker-compose exec appsmith supervisorctl tail backend stderr To learn more, please refer to Supervisor's documentation on what actions are available to be performed by the command-line interface.","title":"Supervisor"},{"location":"Getting%20Started/setup/upgrade-to-business-edition/","text":"Upgrade to Business Edition \u00b6 Follow **** the below guides to upgrade your Community Edition (CE) to a Business Edition (BE) based on the type of your Appsmith Installation: {% hint style=\"warning\" %} You'll need your Business Edition License Key to complete the upgrade**.** {% content-ref url=\"docker.md\" %} docker.md {% hint style=\"warning\" %} For non-docker Appsmith installations , please get in touch with us via discord or email . We will help you upgrade your Appsmith instance. License Renewal \u00b6 The Appsmith server shuts down if your Business license key is expired. You will see an invalid license key message like below in the logs: Exiting application. Invalid license key. {% hint style=\"warning\" %} Please get in touch with our support team either on Discord or by email to renew your license. Once you have a new license key, replace the existing license key in the docker-compose.yml file.","title":"Upgrade to Business Edition"},{"location":"Getting%20Started/setup/upgrade-to-business-edition/#upgrade-to-business-edition","text":"Follow **** the below guides to upgrade your Community Edition (CE) to a Business Edition (BE) based on the type of your Appsmith Installation: {% hint style=\"warning\" %} You'll need your Business Edition License Key to complete the upgrade**.** {% content-ref url=\"docker.md\" %} docker.md {% hint style=\"warning\" %} For non-docker Appsmith installations , please get in touch with us via discord or email . We will help you upgrade your Appsmith instance.","title":"Upgrade to Business Edition"},{"location":"Getting%20Started/setup/upgrade-to-business-edition/#license-renewal","text":"The Appsmith server shuts down if your Business license key is expired. You will see an invalid license key message like below in the logs: Exiting application. Invalid license key. {% hint style=\"warning\" %} Please get in touch with our support team either on Discord or by email to renew your license. Once you have a new license key, replace the existing license key in the docker-compose.yml file.","title":"License Renewal"},{"location":"Getting%20Started/setup/upgrade-to-business-edition/docker/","text":"Docker \u00b6 Follow **** the steps listed below to upgrade your Community Edition (CE) to a Business Edition (EE) installed on docker: {% hint style=\"info\" %} These steps can be used to upgrade the docker installations only . You can also follow the steps below for any docker-enabled instances , including **** AWS AMI and Digital Ocean . Step 1: Database Backup \u00b6 The Community and Business editions use Mongo DB, so you don't have to migrate the database. However, backup your Community Edition Mongo DB by following the steps here . {% hint style=\"info\" %} The database backup should be taken with the docker instance up and running . Step 2: Update Image \u00b6 Navigate to the directory where the docker-compose.yml file is located. Open the docker-compose.yml file, and look for image: key. Update the image name to point to the Business Edition (BE) image. Update: From CE Image: services: appsmith: image: index.docker.io/appsmith/appsmith-ce To EE Image: services: appsmith: image: index.docker.io/appsmith/appsmith-ee And save the file. Step3: Add or Replace License Key \u00b6 Navigate to the directory where the docker-compose.yml file is located. Add/replace the Business Edition license key under the environment key and save the file. {% hint style=\"warning\" %} Add the key environment to the docker-compose.yml file if not already present. environment: - APPSMITH_LICENSE_KEY=<<< Enter your license key here >>> Step 4: Add Keycloak Master Credentials \u00b6 Navigate to the directory where the docker.env file is located. In the docker.env file, add the below Keycloak master credentials and save the file. KEYCLOAK_ADMIN_USERNAME=admin KEYCLOAK_ADMIN_PASSWORD=<Add a generated password> Step 5: Recreate the Instance \u00b6 You can recreate the instance by running the below command: docker-compose up -d Once the container is up and running, you have successfully upgraded the docker instance to the Business Edition. You could verify that the business image (appsmith-ee) is in use with the help of the **** docker ps command. Rollback (Optional) \u00b6 If you face issues during the upgrade process, you can contact support on: Discord Email You can also rollback to Community Edition while the team looks at the issues. Follow the below steps: Stop the docker instance by using docker-compose down * Navigate to the directory where the docker.env file is located. Remove the Keycloak Master Credentials from the docker.env file * Navigate to the directory where the docker-compose.yml file is located. Remove the license key (APPSMITH_LICENSE_KEY) * Update the image in the docker-compose.yml file from Business Edition to Community Edition. From EE Image services: appsmith: image: index.docker.io/appsmith/appsmith-ee To CE Image services: appsmith: image: index.docker.io/appsmith/appsmith-ce Recreate Instance by running the below command: docker-compose up -d Restore the database backup you had taken at the start of the upgrade process by following the steps here .","title":"Docker"},{"location":"Getting%20Started/setup/upgrade-to-business-edition/docker/#docker","text":"Follow **** the steps listed below to upgrade your Community Edition (CE) to a Business Edition (EE) installed on docker: {% hint style=\"info\" %} These steps can be used to upgrade the docker installations only . You can also follow the steps below for any docker-enabled instances , including **** AWS AMI and Digital Ocean .","title":"Docker"},{"location":"Getting%20Started/setup/upgrade-to-business-edition/docker/#step-1-database-backup","text":"The Community and Business editions use Mongo DB, so you don't have to migrate the database. However, backup your Community Edition Mongo DB by following the steps here . {% hint style=\"info\" %} The database backup should be taken with the docker instance up and running .","title":"Step 1: Database Backup"},{"location":"Getting%20Started/setup/upgrade-to-business-edition/docker/#step-2-update-image","text":"Navigate to the directory where the docker-compose.yml file is located. Open the docker-compose.yml file, and look for image: key. Update the image name to point to the Business Edition (BE) image. Update: From CE Image: services: appsmith: image: index.docker.io/appsmith/appsmith-ce To EE Image: services: appsmith: image: index.docker.io/appsmith/appsmith-ee And save the file.","title":"Step 2: Update Image"},{"location":"Getting%20Started/setup/upgrade-to-business-edition/docker/#step3-add-or-replace-license-key","text":"Navigate to the directory where the docker-compose.yml file is located. Add/replace the Business Edition license key under the environment key and save the file. {% hint style=\"warning\" %} Add the key environment to the docker-compose.yml file if not already present. environment: - APPSMITH_LICENSE_KEY=<<< Enter your license key here >>>","title":"Step3: Add or Replace License Key"},{"location":"Getting%20Started/setup/upgrade-to-business-edition/docker/#step-4-add-keycloak-master-credentials","text":"Navigate to the directory where the docker.env file is located. In the docker.env file, add the below Keycloak master credentials and save the file. KEYCLOAK_ADMIN_USERNAME=admin KEYCLOAK_ADMIN_PASSWORD=<Add a generated password>","title":"Step 4: Add Keycloak Master Credentials"},{"location":"Getting%20Started/setup/upgrade-to-business-edition/docker/#step-5-recreate-the-instance","text":"You can recreate the instance by running the below command: docker-compose up -d Once the container is up and running, you have successfully upgraded the docker instance to the Business Edition. You could verify that the business image (appsmith-ee) is in use with the help of the **** docker ps command.","title":"Step 5: Recreate the Instance"},{"location":"Getting%20Started/setup/upgrade-to-business-edition/docker/#rollback-optional","text":"If you face issues during the upgrade process, you can contact support on: Discord Email You can also rollback to Community Edition while the team looks at the issues. Follow the below steps: Stop the docker instance by using docker-compose down * Navigate to the directory where the docker.env file is located. Remove the Keycloak Master Credentials from the docker.env file * Navigate to the directory where the docker-compose.yml file is located. Remove the license key (APPSMITH_LICENSE_KEY) * Update the image in the docker-compose.yml file from Business Edition to Community Edition. From EE Image services: appsmith: image: index.docker.io/appsmith/appsmith-ee To CE Image services: appsmith: image: index.docker.io/appsmith/appsmith-ce Recreate Instance by running the below command: docker-compose up -d Restore the database backup you had taken at the start of the upgrade process by following the steps here .","title":"Rollback (Optional)"}]}